"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _contextSubscribe = require("../lib/contextSubscribe");

var _bem = require("../lib/bem");

var _state = require("../lib/state");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var panelInstances = 0;
var panelUniqId = 0;
/*
 * Handles prop integrity and manages the complexity of props vs. context vs. nothing at all
 * @param {object} props
 * @param {object} context
 * @param {string} uniqId
 */

function getTabPanelProps(_ref, _ref2, uniqId) {
  var bem = _ref2.bem,
      tabbordion = _ref2.tabbordion;

  var checkedProp = _ref.checked,
      disabledProp = _ref.disabled,
      idProp = _ref.id,
      index = _ref.index,
      modifiers = _ref.modifiers,
      nameProp = _ref.name,
      type = _ref.type,
      value = _ref.value,
      visibleProp = _ref.visible,
      props = _objectWithoutProperties(_ref, ["checked", "disabled", "id", "index", "modifiers", "name", "type", "value", "visible"]);

  var _tabbordion$getState = tabbordion.getState(),
      animateContent = _tabbordion$getState.animateContent,
      checkedPanelsRaw = _tabbordion$getState.checkedPanels,
      disabledPanelsRaw = _tabbordion$getState.disabledPanels,
      firstVisiblePanel = _tabbordion$getState.firstVisiblePanel,
      lastVisiblePanel = _tabbordion$getState.lastVisiblePanel,
      panelName = _tabbordion$getState.panelName,
      panelType = _tabbordion$getState.panelType,
      tabbordionId = _tabbordion$getState.tabbordionId;

  var checkedPanels = (0, _state.getArray)(checkedPanelsRaw);
  var disabledPanels = (0, _state.getArray)(disabledPanelsRaw); // props have preference over what comes from context

  var name = (nameProp != null ? nameProp : panelName) || tabbordionId || "tabbordion-panel-".concat(uniqId);
  var id = idProp || "".concat(tabbordionId || name, "-").concat(index);
  var checked = checkedProp != null ? checkedProp : checkedPanels.includes(index);
  var disabled = disabledProp != null ? disabledProp : disabledPanels.includes(index);
  var visible = visibleProp === false ? 'hidden' : firstVisiblePanel === index && 'first' || lastVisiblePanel === index && 'last' || 'between';
  var contentId = null;
  var hasContent = null;
  var childPool = [props.children]; // sniff the id out or use our own (will be exposed via context)

  while (!contentId && childPool.length) {
    _react.Children.forEach(childPool.shift(), function (child) {
      if (contentId || !child || !child.type) {
        return;
      }

      var props = child.props || child._store && child._store.props || {};

      if (child.type === _react.default.Fragment) {
        childPool.push(props.children);
      } else if (child.type.hasContent) {
        hasContent = true;
        contentId = props.id || null;
      }
    });
  }

  if (!contentId) contentId = "".concat(id, "-content");

  var _bem$getState = bem.getState(),
      bemModifiers = _bem$getState.bemModifiers,
      bemSeparator = _bem$getState.bemSeparator,
      blockElements = _bem$getState.blockElements;

  return _objectSpread(_objectSpread({}, props), {}, {
    animateContent: animateContent,
    bemModifiers: bemModifiers,
    bemSeparator: bemSeparator,
    blockElements: blockElements,
    checked: checked,
    disabled: disabled,
    contentId: contentId,
    hasContent: hasContent,
    id: id,
    index: index,
    name: name,
    type: type != null ? type : panelType,
    value: value != null ? value : String(index),
    visible: visible,
    checkedPanels: checkedPanels,
    disabledPanels: disabledPanels,
    modifiers: bemModifiers ? (0, _state.getArray)(modifiers).concat([bemModifiers[checked ? 'checked' : 'unchecked'], bemModifiers[hasContent ? 'content' : 'noContent'], bemModifiers[disabled ? 'disabled' : 'enabled'], bemModifiers[visible]].concat(_toConsumableArray(firstVisiblePanel === lastVisiblePanel && index === firstVisiblePanel ? [bemModifiers['last']] : []))).concat(animateContent ? [bemModifiers.animated, animateContent] : []) : (0, _state.getArray)(modifiers),
    onChangePanel: tabbordion.onChangePanel
  });
}

var TabPanel = /*#__PURE__*/function (_PureComponent) {
  _inherits(TabPanel, _PureComponent);

  var _super = _createSuper(TabPanel);

  function TabPanel(props, context) {
    var _this;

    _classCallCheck(this, TabPanel);

    _this = _super.call(this, props, context); // essentially an attempt for keeping id and name consistent from page to page even when that data is missing

    panelInstances++; // fallback to generate name and id

    _this.uniqId = "".concat(panelUniqId);
    panelUniqId++; // use caching to minimize the need of recalculating stuff all the time

    _this.cachedProps = getTabPanelProps(props, context, _this.uniqId);
    _this.getInputRef = _this.getInputRef.bind(_assertThisInitialized(_this));
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.onClickLabel = _this.onClickLabel.bind(_assertThisInitialized(_this));
    _this.subscribers = [];
    _this.childContext = {
      tabbordionPanel: {
        getState: function getState() {
          return {
            animateContent: _this.cachedProps.animateContent,
            checked: _this.cachedProps.checked,
            contentId: _this.cachedProps.contentId,
            disabled: _this.cachedProps.disabled,
            inputId: _this.cachedProps.id,
            index: _this.cachedProps.index,
            modifiers: _this.cachedProps.modifiers,
            visible: _this.cachedProps.visible
          };
        },
        onClickLabel: _this.onClickLabel,
        subscribe: (0, _contextSubscribe.addSubscriber)(_this.subscribers),
        unsubscribe: (0, _contextSubscribe.removeSubscriber)(_this.subscribers)
      }
    };
    _this.panelState = _this.childContext.tabbordionPanel.getState();
    return _this;
  }

  _createClass(TabPanel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.context.bem.subscribe(this);
      this.context.tabbordion.subscribe(this);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
      this.cachedProps = getTabPanelProps(nextProps, nextContext, this.uniqId);
      var panelState = this.childContext.tabbordionPanel.getState();

      if ((0, _state.isShallowlyDifferent)(panelState, this.panelState)) {
        this.subscribers.forEach(function (component) {
          return component.forceUpdate();
        });
        this.panelState = panelState;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.context.bem.unsubscribe(this);
      this.context.tabbordion.unsubscribe(this);
      delete this.cachedProps;
      panelInstances--;
      if (panelInstances === 0) panelUniqId = 0;
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      return this.childContext;
    }
  }, {
    key: "getInputRef",
    value: function getInputRef(input) {
      this.input = input;
    }
    /** Handler for input checkbox or radio */

  }, {
    key: "onChange",
    value: function onChange(event) {
      if (event.defaultPrevented) {
        return;
      }

      var _this$cachedProps = this.cachedProps,
          index = _this$cachedProps.index,
          onChangePanel = _this$cachedProps.onChangePanel;
      if (onChangePanel) onChangePanel(index);
    }
    /** Handler for TabLabel child */

  }, {
    key: "onClickLabel",
    value: function onClickLabel() {
      var _this2 = this;

      var _this$cachedProps2 = this.cachedProps,
          index = _this$cachedProps2.index,
          onChangePanel = _this$cachedProps2.onChangePanel,
          type = _this$cachedProps2.type;
      if (onChangePanel) onChangePanel(index); // make sure focus goes to the input element, that is what sane browsers do when a label is clicked

      requestAnimationFrame(function () {
        // of course things may go wrong so make sure all expected conditions are met before doing stuff
        if (_this2.input && (_this2.input.checked || type === 'checkbox') && document.activeElement !== _this2.input) {
          _this2.input.focus();
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$cachedProps3 = this.cachedProps,
          animateContent = _this$cachedProps3.animateContent,
          bemModifiers = _this$cachedProps3.bemModifiers,
          bemSeparator = _this$cachedProps3.bemSeparator,
          blockElements = _this$cachedProps3.blockElements,
          checked = _this$cachedProps3.checked,
          checkedPanels = _this$cachedProps3.checkedPanels,
          children = _this$cachedProps3.children,
          className = _this$cachedProps3.className,
          Component = _this$cachedProps3.component,
          contentId = _this$cachedProps3.contentId,
          disabled = _this$cachedProps3.disabled,
          disabledPanels = _this$cachedProps3.disabledPanels,
          hasContent = _this$cachedProps3.hasContent,
          id = _this$cachedProps3.id,
          index = _this$cachedProps3.index,
          modifiers = _this$cachedProps3.modifiers,
          onChangePanel = _this$cachedProps3.onChangePanel,
          name = _this$cachedProps3.name,
          style = _this$cachedProps3.style,
          type = _this$cachedProps3.type,
          value = _this$cachedProps3.value,
          visible = _this$cachedProps3.visible,
          props = _objectWithoutProperties(_this$cachedProps3, ["animateContent", "bemModifiers", "bemSeparator", "blockElements", "checked", "checkedPanels", "children", "className", "component", "contentId", "disabled", "disabledPanels", "hasContent", "id", "index", "modifiers", "onChangePanel", "name", "style", "type", "value", "visible"]);

      var panelBem = (0, _bem.bemClassName)(blockElements, 'panel', modifiers, bemSeparator);
      var ariaSelected = checked ? 'true' : 'false';
      return /*#__PURE__*/_react.default.createElement(Component, _extends({}, props, {
        "aria-expanded": hasContent && ariaSelected,
        "aria-selected": ariaSelected,
        className: !panelBem ? className : className ? "".concat(panelBem, " ").concat(className) : panelBem,
        role: "tab",
        style: _objectSpread(_objectSpread({}, style), {}, {
          display: visible === 'hidden' ? 'none' : null
        })
      }), /*#__PURE__*/_react.default.createElement("input", {
        "aria-controls": contentId,
        checked: checked,
        "data-state": "tabbordion",
        disabled: disabled || visible === 'hidden',
        id: id,
        name: name,
        onChange: this.onChange,
        ref: this.getInputRef,
        type: type,
        value: value
      }), children);
    }
  }]);

  return TabPanel;
}(_react.PureComponent);

TabPanel.childContextTypes = {
  tabbordionPanel: _propTypes.default.object
};
TabPanel.contextTypes = {
  bem: _propTypes.default.object,
  tabbordion: _propTypes.default.object
};
TabPanel.defaultProps = {
  component: 'li'
};
TabPanel.propTypes = {
  // state (these will override contextTypes if set)
  checked: _propTypes.default.bool,
  className: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string,
  index: _propTypes.default.number,
  name: _propTypes.default.string,
  type: _propTypes.default.oneOf(['checkbox', 'radio']),
  value: _propTypes.default.string,
  visible: _propTypes.default.bool,
  // contents
  children: _propTypes.default.node,
  component: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.string]),
  // BEM convention props
  modifiers: _propTypes.default.array
};
var _default = TabPanel;
exports.default = _default;