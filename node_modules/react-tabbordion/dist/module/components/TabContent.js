"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bem = require("../lib/bem");

var _resize = require("../lib/resize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var TabContent = /*#__PURE__*/function (_PureComponent) {
  _inherits(TabContent, _PureComponent);

  var _super = _createSuper(TabContent);

  function TabContent(props, context) {
    var _this;

    _classCallCheck(this, TabContent);

    _this = _super.call(this, props, context);
    _this.state = {
      fastTransition: false,
      height: null
    };
    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));
    _this.onResize = _this.onResize.bind(_assertThisInitialized(_this));
    _this.update = _this.update.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(TabContent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.context.bem.subscribe(this);
      this.context.tabbordionPanel.subscribe(this); // add reference here to reduce unnecessary references server side

      this.onResize.getState = this.context.tabbordionPanel.getState;
      (0, _resize.addResizeListener)(this.onResize);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.update();
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(props, context) {
      // this should not happen but we know bugs happen when unexpected things happen
      if (context.tabbordionPanel !== this.context.tabbordionPanel) {
        this.onResize.getState = context.tabbordionPanel.getState;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      (0, _resize.removeResizeListener)(this.onResize);
      this.context.bem.unsubscribe(this);
      this.context.tabbordionPanel.unsubscribe(this);
    }
  }, {
    key: "getRef",
    value: function getRef(child) {
      this.child = child;
    }
  }, {
    key: "onResize",
    value: function onResize() {
      this.update('resize');
    }
  }, {
    key: "update",
    value: function update(triggerer) {
      var _this2 = this;

      if (!this.child) {
        return;
      }

      var _this$child$getBoundi = this.child.getBoundingClientRect(),
          bottom = _this$child$getBoundi.bottom,
          top = _this$child$getBoundi.top;

      var height = Math.ceil(bottom - top);
      var fastTransition = this.state.fastTransition;

      if (this.state.height !== height) {
        // make all transitions go faster to give smoother experience
        if (triggerer === 'resize') {
          fastTransition = true;
        }

        this.setState({
          fastTransition: fastTransition,
          height: height
        });
      } // kills the previous timeout after each resize event so that fast mode is alive until after last resize event


      if (triggerer === 'resize' && fastTransition) {
        clearTimeout(this._dtt);
        this._dtt = setTimeout(function () {
          delete _this2._dtt;

          _this2.setState({
            fastTransition: false
          });
        }, 500);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          Component = _this$props.component,
          style = _this$props.style,
          props = _objectWithoutProperties(_this$props, ["children", "className", "component", "style"]);

      var _this$context$bem$get = this.context.bem.getState(),
          bemSeparator = _this$context$bem$get.bemSeparator,
          blockElements = _this$context$bem$get.blockElements;

      var _this$context$tabbord = this.context.tabbordionPanel.getState(),
          animateContent = _this$context$tabbord.animateContent,
          checked = _this$context$tabbord.checked,
          contentId = _this$context$tabbord.contentId,
          inputId = _this$context$tabbord.inputId,
          modifiers = _this$context$tabbord.modifiers;

      var panelBem = (0, _bem.bemClassName)(blockElements, 'content', modifiers, bemSeparator);
      var animatorBem = (0, _bem.bemClassName)(blockElements, 'animator', modifiers, bemSeparator);
      var height = animateContent === 'height' ? checked ? this.state.height && this.state.height + 'px' || 'auto' : '0px' : null;
      var marginTop = animateContent === 'marginTop' ? !checked ? this.state.height && -this.state.height + 'px' || '-65535px' : '0px' : null;
      var resizeStyle = this.state.fastTransition ? {
        WebkitTransition: 'all 32ms',
        transition: 'all 32ms'
      } : null; // contentId will be overwritten by props.id (intended behavior)

      return animateContent ? /*#__PURE__*/_react.default.createElement(Component, _extends({
        id: contentId
      }, props, {
        "aria-labelledby": inputId,
        className: !animatorBem ? className : className ? "".concat(animatorBem, " ").concat(className) : animatorBem,
        role: "tabpanel",
        style: _objectSpread(_objectSpread({}, style), {}, {
          height: height,
          overflow: checked && animateContent === 'marginTop' ? 'visible' : 'hidden'
        }, resizeStyle)
      }), /*#__PURE__*/_react.default.createElement("div", {
        ref: this.getRef,
        className: panelBem,
        style: marginTop && _objectSpread({
          marginTop: marginTop
        }, resizeStyle)
      }, children)) : /*#__PURE__*/_react.default.createElement(Component, _extends({
        id: contentId
      }, props, {
        "aria-labelledby": inputId,
        className: !panelBem ? className : className ? "".concat(panelBem, " ").concat(className) : panelBem,
        ref: this.getRef,
        role: "tabpanel",
        style: style
      }), children);
    }
  }]);

  return TabContent;
}(_react.PureComponent);

TabContent.hasContent = true;
TabContent.contextTypes = {
  bem: _propTypes.default.object,
  tabbordionPanel: _propTypes.default.object
};
TabContent.defaultProps = {
  component: 'div'
};
TabContent.propTypes = {
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  component: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.string]),
  style: _propTypes.default.object
};
var _default = TabContent;
exports.default = _default;