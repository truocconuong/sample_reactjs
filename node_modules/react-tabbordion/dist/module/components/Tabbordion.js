"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _contextSubscribe = require("../lib/contextSubscribe");

var _state = require("../lib/state");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var tabbordionInstances = 0;
var tabbordionUniqId = 0;

function getStateBem(props) {
  return {
    bemModifiers: props.bemModifiers,
    bemSeparator: props.bemSeparator,
    blockElements: props.blockElements
  };
}

function getStateTabbordion(context, props, state) {
  var panels = (0, _state.getArray)(state.stateful ? state.panels : props.panels);
  return {
    animateContent: props.animateContent,
    checkedPanels: panels.filter(_state.getChecked).map(_state.getIndex),
    disabledPanels: panels.filter(_state.getDisabled).map(_state.getIndex),
    firstVisiblePanel: context.firstVisibleIndex,
    lastVisiblePanel: context.lastVisibleIndex,
    panelName: props.name || context.uniqId,
    panelType: props.mode === 'multiple' ? 'checkbox' : 'radio',
    tabbordionId: props.id || context.uniqId
  };
}

function identity(value) {
  return value;
}

var Tabbordion = /*#__PURE__*/function (_PureComponent) {
  _inherits(Tabbordion, _PureComponent);

  var _super = _createSuper(Tabbordion);

  function Tabbordion(props) {
    var _this;

    _classCallCheck(this, Tabbordion);

    _this = _super.call(this, props);
    tabbordionInstances++;
    _this.uniqId = "tabbordion-".concat(tabbordionUniqId);
    tabbordionUniqId++;
    _this.getNextState = _this.getNextState.bind(_assertThisInitialized(_this));
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.firstVisibleIndex = null;
    _this.lastVisibleIndex = null; // panels always overrides initialPanels

    _this.state = _this.getNextState(props, {
      stateful: false
    }, Array.isArray(props.panels) ? props.panels : props.initialPanels); // context subscribers

    _this.subscribers = {
      bem: [],
      tabbordion: []
    };
    _this.childContext = {
      bem: {
        getState: function getState() {
          return _this.bemState;
        },
        subscribe: (0, _contextSubscribe.addSubscriber)(_this.subscribers.bem),
        unsubscribe: (0, _contextSubscribe.removeSubscriber)(_this.subscribers.bem)
      },
      tabbordion: {
        getState: function getState() {
          return _this.tabbordionState;
        },
        onChangePanel: _this.onChange,
        subscribe: (0, _contextSubscribe.addSubscriber)(_this.subscribers.tabbordion),
        unsubscribe: (0, _contextSubscribe.removeSubscriber)(_this.subscribers.tabbordion)
      }
    };
    _this.bemState = getStateBem(props);
    _this.tabbordionState = getStateTabbordion(_assertThisInitialized(_this), props, _this.state);
    return _this;
  }

  _createClass(Tabbordion, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var nextState = this.getNextState(nextProps, this.state); // only update if there were changes to the local component state

      if (nextState !== this.state) {
        this.setState(nextState);
      }

      var bemState = getStateBem(nextProps);

      if ((0, _state.isShallowlyDifferent)(bemState, this.bemState)) {
        this.subscribers.bem.forEach(function (component) {
          return component.forceUpdate();
        });
        this.bemState = bemState;
      }

      var tabbordionState = getStateTabbordion(this, nextProps, nextState);

      if ((0, _state.isShallowlyDifferent)(tabbordionState, this.tabbordionState)) {
        this.subscribers.tabbordion.forEach(function (component) {
          return component.forceUpdate();
        });
        this.tabbordionState = tabbordionState;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      tabbordionInstances--;
      if (tabbordionInstances === 0) tabbordionUniqId = 0;
    }
  }, {
    key: "getChildContext",
    value: function getChildContext() {
      return this.childContext;
    }
    /*
     * Controls props and does those nasty little staties we kills them My Precious, *gollum* *gollum*
     * @param {object} props Props received by the component
     * @param {object} prevState State contained in the component
     * @param {array} initialPanels Initial panels state when component is mounted as a stateful component
     * @return {object} State to be used by the component
     */

  }, {
    key: "getNextState",
    value: function getNextState(props, prevState, initialPanels) {
      var panels = (0, _state.getArray)(prevState.stateful ? prevState.panels : initialPanels || props.panels);
      var panelProps = [];
      var usedIndexes = [];
      var invalidIndexes = [];
      var allowMultiChecked = props.mode === 'multiple'; // fragments force us to do some recursive looping to find our actual children as React.Children does not do it

      var childPool = [props.children]; // this logic probably needs to be refactored so that panels register to tabbordion

      while (childPool.length) {
        _react.Children.forEach(childPool.shift(), function (child) {
          if (child == null || !child.type) {
            return;
          }

          var props = child.props || child._store && child._store.props || {};

          if (child.type === _react.default.Fragment && props.children) {
            childPool.push(props.children);
          } else if (child.type.contextTypes && child.type.contextTypes.tabbordion) {
            // use false to mark panels with invalid index
            var index = props.index != null ? props.index : false; // missing index and duplicates are invalid

            var isInvalidIndex = index === false || usedIndexes.includes(index);

            if (isInvalidIndex) {
              invalidIndexes.push(panelProps.length);
            } else {
              usedIndexes.push(index);
            }

            panelProps.push({
              checked: props.checked,
              disabled: props.disabled,
              index: isInvalidIndex ? false : index,
              visible: props.visible
            });
          }
        });
      } // time to fix invalid index values


      var unusedIndex = 0;

      while (invalidIndexes.length > 0) {
        // find the next usable index value
        while (usedIndexes.includes(unusedIndex)) {
          unusedIndex++;
        } // use the index value


        panelProps[invalidIndexes.shift()].index = unusedIndex; // try another index on the next round

        unusedIndex++;
      } // now that we know the indexes we can link to existing data; if it happens to exist, of course


      var checkedCount = 0;
      var firstVisibleIndex = null;
      var lastVisibleIndex = null;
      var nextPanels = panelProps.map(function (props, index) {
        var panel = panels.find(function (panel) {
          return panel.index === props.index;
        }) || {
          checked: checked,
          disabled: disabled,
          visible: visible
        };
        var checked = (props.checked != null ? props.checked : !!panel.checked) && (allowMultiChecked || checkedCount === 0);
        var disabled = props.disabled != null ? props.disabled : !!panel.disabled;
        var visible = props.visible != null ? props.visible : panel.visible === false ? false : true;

        if (visible) {
          lastVisibleIndex = index;
          if (firstVisibleIndex == null) firstVisibleIndex = lastVisibleIndex;
        }

        if (checked && visible) checkedCount++;
        return {
          checked: checked,
          disabled: disabled,
          index: props.index,
          visible: visible
        };
      });

      if (firstVisibleIndex != null) {
        // one panel must always be checked in single mode
        if (checkedCount === 0 && props.mode !== 'multiple' && props.mode !== 'toggle') {
          nextPanels[firstVisibleIndex].checked = true;
        } // it is now safe to use the actual indexes instead of references


        firstVisibleIndex = nextPanels[firstVisibleIndex].index;
        lastVisibleIndex = nextPanels[lastVisibleIndex].index;
      } // keep in local state: We can do this in this way because these values are derived from main panels state.
      //                      Also, this state is updated each time props change, thus we maintain "pureness".


      this.firstVisibleIndex = firstVisibleIndex;
      this.lastVisibleIndex = lastVisibleIndex; // determine who will own the state

      var stateful = !props.onChange || !props.onPanels || !Array.isArray(props.panels);

      if (stateful) {
        // it is mine, my own, My Preciouss...
        if (!prevState.stateful || (0, _state.isShallowlyDifferentArray)(prevState.panels, nextPanels)) {
          if (props.onPanels) props.onPanels(nextPanels);
          return {
            panels: nextPanels,
            stateful: stateful
          };
        }
      } else {
        // provide updated state to whomever will own it
        if ((0, _state.isShallowlyDifferentArray)(panels, nextPanels)) {
          props.onPanels(nextPanels);
        } // clear local state


        if (prevState.stateful) {
          return {
            panels: null,
            stateful: stateful
          };
        }
      }

      return prevState;
    }
  }, {
    key: "onChange",
    value: function onChange(index) {
      var mode = this.props.mode;

      if (!this.state.stateful) {
        this.props.onChange({
          index: index,
          mode: mode
        });
        return;
      } // we can mutate this state as we please because we own this state


      var panel = this.state.panels.find(function (panel) {
        return panel.index === index;
      });

      if (panel == null) {
        throw new Error('Unexpected invalid panel index: ' + index);
      }

      var didMutate = false;

      switch (mode) {
        case 'toggle':
          // only one can be active, but also none can be active (radio, but allow unselect)
          this.state.panels.forEach(function (togglePanel) {
            if (togglePanel !== panel && togglePanel.checked) {
              togglePanel.checked = false;
            }
          });
          panel.checked = !panel.checked;
          didMutate = true;
          break;

        case 'multiple':
          // no state restrictions/relations (checkbox)
          panel.checked = !panel.checked;
          didMutate = true;
          break;

        default:
          // only one panel must stay active (radio)
          this.state.panels.forEach(function (togglePanel) {
            if (togglePanel !== panel && togglePanel.checked) {
              togglePanel.checked = false;
              didMutate = true;
            }
          });

          if (!panel.checked) {
            panel.checked = true;
            didMutate = true;
          }

      }

      if (didMutate) {
        this.setState({
          panels: this.state.panels.slice(0)
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      // use destructuring to pick out props we don't need to pass to the rendered component
      var _this$props = this.props,
          animateContent = _this$props.animateContent,
          children = _this$props.children,
          Component = _this$props.component,
          bemModifiers = _this$props.bemModifiers,
          bemSeparator = _this$props.bemSeparator,
          blockElements = _this$props.blockElements,
          component = _this$props.component,
          initialPanels = _this$props.initialPanels,
          mode = _this$props.mode,
          name = _this$props.name,
          onChange = _this$props.onChange,
          onPanels = _this$props.onPanels,
          panelsProp = _this$props.panels,
          props = _objectWithoutProperties(_this$props, ["animateContent", "children", "component", "bemModifiers", "bemSeparator", "blockElements", "component", "initialPanels", "mode", "name", "onChange", "onPanels", "panels"]);

      var panel = 0;
      var panels = this.state.stateful ? this.state.panels : panelsProp;
      var childPool = [children];
      var clones = [];

      while (childPool.length) {
        _react.Children.forEach(childPool.shift(), function (child) {
          if (child == null || !child.type) {
            clones.push(child);
          } else if (child.type === _react.default.Fragment) {
            childPool.push(child.props.children);
          } else if (child.type.contextTypes && child.type.contextTypes.tabbordion) {
            var clone = /*#__PURE__*/_react.default.cloneElement(child, panels[panel]);

            panel++;
            clones.push(clone);
          } else {
            clones.push(child);
          }
        });
      }

      return /*#__PURE__*/_react.default.createElement(Component, _extends({}, props, {
        role: "tablist"
      }), _react.Children.map(clones, identity));
    }
  }]);

  return Tabbordion;
}(_react.PureComponent);

Tabbordion.childContextTypes = {
  bem: _propTypes.default.object,
  tabbordion: _propTypes.default.object
};
Tabbordion.defaultProps = {
  animateContent: false,
  bemModifiers: {
    animated: 'animated',
    between: 'between',
    checked: 'checked',
    content: 'content',
    disabled: 'disabled',
    enabled: 'enabled',
    first: 'first',
    hidden: 'hidden',
    last: 'last',
    noContent: 'no-content',
    unchecked: 'unchecked'
  },
  bemSeparator: '--',
  blockElements: {
    animator: 'panel__animator',
    content: 'panel__content',
    label: 'panel__label',
    panel: 'panel'
  },
  component: 'ul',
  mode: 'single'
};
Tabbordion.propTypes = {
  animateContent: _propTypes.default.oneOf([false, 'height', 'marginTop']),
  bemModifiers: _propTypes.default.shape({
    between: _propTypes.default.string,
    checked: _propTypes.default.string,
    content: _propTypes.default.string,
    disabled: _propTypes.default.string,
    enabled: _propTypes.default.string,
    first: _propTypes.default.string,
    hidden: _propTypes.default.string,
    last: _propTypes.default.string,
    noContent: _propTypes.default.string,
    unchecked: _propTypes.default.string
  }),
  bemSeparator: _propTypes.default.string,
  blockElements: _propTypes.default.shape({
    content: _propTypes.default.string,
    label: _propTypes.default.string,
    panel: _propTypes.default.string
  }),
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  component: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.string]),
  id: _propTypes.default.string,
  initialPanels: _propTypes.default.arrayOf(_propTypes.default.shape({
    checked: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    index: _propTypes.default.number,
    visible: _propTypes.default.bool
  })),
  mode: _propTypes.default.oneOf(['single', 'toggle', 'multiple']),
  name: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onPanels: _propTypes.default.func,
  panels: _propTypes.default.arrayOf(_propTypes.default.shape({
    checked: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    index: _propTypes.default.number,
    visible: _propTypes.default.bool
  }))
};
var _default = Tabbordion;
exports.default = _default;