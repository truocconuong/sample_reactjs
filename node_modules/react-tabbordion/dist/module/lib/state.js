"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArray = getArray;
exports.getChecked = getChecked;
exports.getDisabled = getDisabled;
exports.getIndex = getIndex;
exports.isShallowlyDifferent = isShallowlyDifferent;
exports.isShallowlyDifferentArray = isShallowlyDifferentArray;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var EMPTY_ARRAY = [];
/** Micro optimization: always use the same reference to empty arrays */

function getArray(array) {
  return Array.isArray(array) && array.length > 0 ? array : EMPTY_ARRAY;
}

function getChecked(_ref) {
  var checked = _ref.checked;
  return checked;
}

function getDisabled(_ref2) {
  var disabled = _ref2.disabled;
  return disabled;
}

function getIndex(_ref3) {
  var index = _ref3.index;
  return index;
}

function isShallowlyDifferent(obj1, obj2) {
  if (obj1 === obj2) {
    return false;
  } // handle undefined and null as equals


  if (obj1 == null || obj2 == null) {
    return obj1 != null || obj2 != null;
  } // non-objects must be an exact match


  if (_typeof(obj1) !== 'object' || _typeof(obj2) !== 'object') {
    return true;
  } // we now know both are objects so we can do object comparisons


  var keys1 = Object.keys(obj1 || {}).sort();
  var keys2 = Object.keys(obj2 || {}).sort(); // must have same amount of keys

  if (keys1.length !== keys2.length) {
    return true;
  }

  return keys1.some(function (key, index) {
    return key !== keys2[index] || (Array.isArray(obj1[key]) ? isShallowlyDifferentArray(obj1[key], obj2[key]) : obj1[key] !== obj2[key]);
  });
}

function isShallowlyDifferentArray() {
  var arr1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var arr2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (arr1.length !== arr2.length) {
    return true;
  }

  return arr1.some(function (item, index) {
    return isShallowlyDifferent(item, arr2[index]);
  });
}