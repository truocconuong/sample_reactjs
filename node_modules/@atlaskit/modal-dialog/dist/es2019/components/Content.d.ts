/** @jsx jsx */
import React from 'react';
import { ActionProps, AppearanceType, ContainerComponentProps, KeyboardOrMouseEvent } from '../types';
import { FooterComponentProps } from './Footer';
import { HeaderComponentProps } from './Header';
interface Props {
    /**
     * Buttons to render in the footer.
     * The first element in the array will implictly become the primary action.
     */
    actions?: Array<ActionProps>;
    /**
     * Appearance of the modal that changes the color of the primary action and adds an icon to the heading.
     */
    appearance?: AppearanceType;
    /**
     * Contents of the modal dialog.
     */
    children?: React.ReactNode;
    /**
     * Component overrides to change components in the modal dialog.
     */
    components: {
        Header?: React.ElementType<HeaderComponentProps>;
        Body?: React.ElementType;
        Footer?: React.ElementType<FooterComponentProps>;
        Container?: React.ElementType<ContainerComponentProps>;
    };
    /**
     * Do not use. This prop has been deprecated.
     * Use the `components` prop instead.
     */
    body?: React.ElementType;
    /**
     * Do not use. This prop has been deprecated.
     * Use the `components` prop instead.
     */
    header?: React.ElementType<HeaderComponentProps>;
    /**
     * Do not use. This prop has been deprecated.
     * Use the `components` prop instead.
     */
    footer?: React.ElementType<FooterComponentProps>;
    /**
     * Callback function called when the modal dialog is requesting to be closed.
     */
    onClose: (event: KeyboardOrMouseEvent) => void;
    /**
     * Callback function called when the modal changes position in the stack.
     */
    onStackChange?: (stackIndex: number) => void;
    /**
     * Whether or not the body content should scroll.
     */
    shouldScroll?: boolean;
    /**
     * Calls `onClose` when pressing escape.
     * Defaults to `true`.
     */
    shouldCloseOnEscapePress?: boolean;
    /**
     * Will remove all styling from the modal dialog container allowing you to define your own styles,
     * heading,
     * and footer with actions.
     * This prop should only be used as a last resort.
     */
    isChromeless?: boolean;
    /**
     * Number representing where in the stack of modals this modal sits.
     * This offsets the modal dialogs vertical position.
     */
    stackIndex?: number;
    /**
     * Heading for the modal dialog.
     */
    heading?: React.ReactNode;
    /**
     * Unique id for the modal heading element.
     */
    headingId?: string;
    /**
     * When `true` will allow the heading to span multiple lines.
     * Defaults to `false`.
     */
    isHeadingMultiline?: boolean;
    /**
     * A `testId` prop is provided for specified elements,
     * which is a unique string that appears as a data attribute `data-testid` in the rendered code,
     * serving as a hook for automated tests.
     */
    testId?: string;
}
interface State {
    showFooterKeyline: boolean;
    showHeaderKeyline: boolean;
    showContentFocus: boolean;
    tabbableElements: Array<{}>;
}
export default class Content extends React.Component<Props, State> {
    static defaultProps: {
        autoFocus: boolean;
        components: {};
        isChromeless: boolean;
        stackIndex: number;
        isHeadingMultiline: boolean;
    };
    escapeIsHeldDown: boolean;
    _isMounted: boolean;
    scrollContainer: HTMLElement | null;
    state: State;
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: Props): void;
    componentWillUnmount(): void;
    determineKeylines: any;
    getScrollContainer: (ref: HTMLElement) => void;
    handleKeyUp: () => void;
    handleKeyDown: (event: any) => void;
    handleStackChange: (stackIndex: number) => void;
    render(): JSX.Element;
}
export {};
