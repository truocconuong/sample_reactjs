import { css } from '@emotion/core';
import styled from '@emotion/styled';
import { DN50, N0, N30A, N60A, text } from '@atlaskit/theme/colors';
import { themed } from '@atlaskit/theme/components';
import { borderRadius, layers } from '@atlaskit/theme/constants';
import { gutter, WIDTH_ENUM } from '../shared-variables';
const boxShadow = ({ isChromeless }) => isChromeless
    ? 'none'
    : `
      0 0 0 1px ${N30A}, 0 2px 1px ${N30A},
      0 0 20px -6px ${N60A}
    `;
const dialogBgColor = ({ isChromeless }) => {
    return isChromeless ? 'transparent' : themed({ light: N0, dark: DN50 })();
};
const maxDimensions = `calc(100% - ${gutter * 2}px)`;
const maxHeightDimensions = `calc(100% - ${gutter * 2 - 1}px)`;
export const dialogWidth = ({ widthName, widthValue }) => {
    if (typeof widthValue === 'number') {
        return `${widthValue}px`;
    }
    return widthName ? `${WIDTH_ENUM.widths[widthName]}px` : widthValue || 'auto';
};
export const dialogHeight = ({ heightValue, }) => {
    if (typeof heightValue === 'number') {
        return `${heightValue}px`;
    }
    return heightValue || 'auto';
};
export const FillScreen = styled.div `
  height: 100vh;
  left: 0;
  overflow-y: auto;
  position: absolute;
  top: ${(props) => props.scrollDistance}px;
  width: 100%;
  z-index: ${layers.modal};
  -webkit-overflow-scrolling: touch;
`;
const positionBaseStyles = (props) => css `
  display: flex;
  flex-direction: column;
  height: ${maxHeightDimensions};
  left: 0;
  right: 0;
  margin-left: auto;
  margin-right: auto;
  max-width: ${maxDimensions};
  top: ${gutter}px;
  width: ${dialogWidth(props)};
  z-index: ${layers.modal()};
  pointer-events: none;
`;
const positionBaseResponsiveStyles = css `
  height: 100%;
  left: 0;
  position: fixed;
  top: 0;
  max-width: 100%;
  width: 100%;
`;
export const PositionerAbsolute = styled.div `
  ${positionBaseStyles};
  position: absolute;

  @media (min-width: 320px) and (max-width: 480px) {
    ${positionBaseResponsiveStyles};
  }
`;
export const PositionerRelative = styled.div `
  margin: ${gutter}px auto;
  position: relative;
  width: ${dialogWidth};
  z-index: ${layers.modal};

  @media (min-width: 320px) and (max-width: 480px) {
    ${positionBaseResponsiveStyles};
    margin: 0;
  }
`;
export const PositionerFixed = styled.div `
  ${positionBaseStyles};
  position: fixed;

  @media (min-width: 320px) and (max-width: 480px) {
    ${positionBaseResponsiveStyles};
  }
`;
export const Dialog = styled.div `
  ${(props) => props.isChromeless
    ? null
    : `
          background-color: ${dialogBgColor(props)};
          border-radius: ${borderRadius()}px;
          box-shadow: ${boxShadow(props)};
        `}
  color: ${text};
  display: flex;
  flex-direction: column;
  height: ${(props) => dialogHeight({ heightValue: props.heightValue })};
  max-height: 100%;
  outline: 0;
  pointer-events: auto;

  @media (min-width: 320px) and (max-width: 480px) {
    height: 100%;
    max-height: 100%;
    border-radius: 0;
  }
`;
PositionerAbsolute.displayName = 'PositionerAbsolute';
Dialog.displayName = 'Dialog';
FillScreen.displayName = 'FillScreen';
PositionerRelative.displayName = 'PositionerRelative';
PositionerFixed.displayName = 'PositionerFixed';
//# sourceMappingURL=Modal.js.map