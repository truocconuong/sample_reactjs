import React, { useCallback, useMemo, useState } from 'react';
import GlobalTheme from '@atlaskit/theme/components';
import ButtonBase from './shared/button-base';
import { getCss } from './shared/css';
import getIsOnlySingleIcon from './shared/get-is-only-single-icon';
function noop() { }
const isFirefox = typeof navigator !== 'undefined' &&
    navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
const ButtonWithMode = React.forwardRef(function ButtonWithMode({ mode, onMouseDown: providedOnMouseDown = noop, onMouseUp: providedOnMouseUp = noop, ...rest }, ref) {
    const appearance = rest.appearance || 'default';
    const spacing = rest.spacing || 'default';
    const shouldFitContainer = Boolean(rest.shouldFitContainer);
    const isSelected = Boolean(rest.isSelected);
    const isOnlySingleIcon = getIsOnlySingleIcon(rest);
    const [isActive, setIsActive] = useState(false);
    // Wrap onMouseDown / onMouseUp to manually trigger active state
    //  in Firefox
    const onMouseDown = useCallback((event) => {
        providedOnMouseDown(event);
        if (isFirefox) {
            setIsActive(true);
        }
    }, [providedOnMouseDown, setIsActive]);
    const onMouseUp = useCallback((event) => {
        providedOnMouseUp(event);
        if (isFirefox) {
            setIsActive(false);
        }
    }, [providedOnMouseUp, setIsActive]);
    const buttonCss = useMemo(() => getCss({
        appearance,
        spacing,
        mode,
        isSelected,
        shouldFitContainer,
        isOnlySingleIcon,
    }), [
        appearance,
        spacing,
        mode,
        isSelected,
        shouldFitContainer,
        isOnlySingleIcon,
    ]);
    return (React.createElement(ButtonBase, Object.assign({}, rest, { ref: ref, buttonCss: buttonCss, "data-firefox-is-active": isActive ? true : undefined, onMouseDown: onMouseDown, onMouseUp: onMouseUp })));
});
const Button = React.memo(React.forwardRef(function Button(props, ref) {
    return (React.createElement(GlobalTheme.Consumer, null, ({ mode }) => {
        return React.createElement(ButtonWithMode, Object.assign({}, props, { ref: ref, mode: mode }));
    }));
}));
// Tools including enzyme rely on components having a display name
Button.displayName = 'Button';
export default Button;
//# sourceMappingURL=button.js.map