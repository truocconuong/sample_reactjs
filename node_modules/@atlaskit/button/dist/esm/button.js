import { __assign, __read, __rest } from "tslib";
import React, { useCallback, useMemo, useState } from 'react';
import GlobalTheme from '@atlaskit/theme/components';
import ButtonBase from './shared/button-base';
import { getCss } from './shared/css';
import getIsOnlySingleIcon from './shared/get-is-only-single-icon';
function noop() { }
var isFirefox = typeof navigator !== 'undefined' &&
    navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
var ButtonWithMode = React.forwardRef(function ButtonWithMode(_a, ref) {
    var mode = _a.mode, _b = _a.onMouseDown, providedOnMouseDown = _b === void 0 ? noop : _b, _c = _a.onMouseUp, providedOnMouseUp = _c === void 0 ? noop : _c, rest = __rest(_a, ["mode", "onMouseDown", "onMouseUp"]);
    var appearance = rest.appearance || 'default';
    var spacing = rest.spacing || 'default';
    var shouldFitContainer = Boolean(rest.shouldFitContainer);
    var isSelected = Boolean(rest.isSelected);
    var isOnlySingleIcon = getIsOnlySingleIcon(rest);
    var _d = __read(useState(false), 2), isActive = _d[0], setIsActive = _d[1];
    // Wrap onMouseDown / onMouseUp to manually trigger active state
    //  in Firefox
    var onMouseDown = useCallback(function (event) {
        providedOnMouseDown(event);
        if (isFirefox) {
            setIsActive(true);
        }
    }, [providedOnMouseDown, setIsActive]);
    var onMouseUp = useCallback(function (event) {
        providedOnMouseUp(event);
        if (isFirefox) {
            setIsActive(false);
        }
    }, [providedOnMouseUp, setIsActive]);
    var buttonCss = useMemo(function () {
        return getCss({
            appearance: appearance,
            spacing: spacing,
            mode: mode,
            isSelected: isSelected,
            shouldFitContainer: shouldFitContainer,
            isOnlySingleIcon: isOnlySingleIcon,
        });
    }, [
        appearance,
        spacing,
        mode,
        isSelected,
        shouldFitContainer,
        isOnlySingleIcon,
    ]);
    return (React.createElement(ButtonBase, __assign({}, rest, { ref: ref, buttonCss: buttonCss, "data-firefox-is-active": isActive ? true : undefined, onMouseDown: onMouseDown, onMouseUp: onMouseUp })));
});
var Button = React.memo(React.forwardRef(function Button(props, ref) {
    return (React.createElement(GlobalTheme.Consumer, null, function (_a) {
        var mode = _a.mode;
        return React.createElement(ButtonWithMode, __assign({}, props, { ref: ref, mode: mode }));
    }));
}));
// Tools including enzyme rely on components having a display name
Button.displayName = 'Button';
export default Button;
//# sourceMappingURL=button.js.map