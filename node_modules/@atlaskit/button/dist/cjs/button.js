"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var components_1 = tslib_1.__importDefault(require("@atlaskit/theme/components"));
var button_base_1 = tslib_1.__importDefault(require("./shared/button-base"));
var css_1 = require("./shared/css");
var get_is_only_single_icon_1 = tslib_1.__importDefault(require("./shared/get-is-only-single-icon"));
function noop() { }
var isFirefox = typeof navigator !== 'undefined' &&
    navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
var ButtonWithMode = react_1.default.forwardRef(function ButtonWithMode(_a, ref) {
    var mode = _a.mode, _b = _a.onMouseDown, providedOnMouseDown = _b === void 0 ? noop : _b, _c = _a.onMouseUp, providedOnMouseUp = _c === void 0 ? noop : _c, rest = tslib_1.__rest(_a, ["mode", "onMouseDown", "onMouseUp"]);
    var appearance = rest.appearance || 'default';
    var spacing = rest.spacing || 'default';
    var shouldFitContainer = Boolean(rest.shouldFitContainer);
    var isSelected = Boolean(rest.isSelected);
    var isOnlySingleIcon = get_is_only_single_icon_1.default(rest);
    var _d = tslib_1.__read(react_1.useState(false), 2), isActive = _d[0], setIsActive = _d[1];
    // Wrap onMouseDown / onMouseUp to manually trigger active state
    //  in Firefox
    var onMouseDown = react_1.useCallback(function (event) {
        providedOnMouseDown(event);
        if (isFirefox) {
            setIsActive(true);
        }
    }, [providedOnMouseDown, setIsActive]);
    var onMouseUp = react_1.useCallback(function (event) {
        providedOnMouseUp(event);
        if (isFirefox) {
            setIsActive(false);
        }
    }, [providedOnMouseUp, setIsActive]);
    var buttonCss = react_1.useMemo(function () {
        return css_1.getCss({
            appearance: appearance,
            spacing: spacing,
            mode: mode,
            isSelected: isSelected,
            shouldFitContainer: shouldFitContainer,
            isOnlySingleIcon: isOnlySingleIcon,
        });
    }, [
        appearance,
        spacing,
        mode,
        isSelected,
        shouldFitContainer,
        isOnlySingleIcon,
    ]);
    return (react_1.default.createElement(button_base_1.default, tslib_1.__assign({}, rest, { ref: ref, buttonCss: buttonCss, "data-firefox-is-active": isActive ? true : undefined, onMouseDown: onMouseDown, onMouseUp: onMouseUp })));
});
var Button = react_1.default.memo(react_1.default.forwardRef(function Button(props, ref) {
    return (react_1.default.createElement(components_1.default.Consumer, null, function (_a) {
        var mode = _a.mode;
        return react_1.default.createElement(ButtonWithMode, tslib_1.__assign({}, props, { ref: ref, mode: mode }));
    }));
}));
// Tools including enzyme rely on components having a display name
Button.displayName = 'Button';
exports.default = Button;
//# sourceMappingURL=button.js.map