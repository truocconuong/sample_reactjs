"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customThemeButton = exports.button = void 0;
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var index_1 = tslib_1.__importStar(require("../index"));
// eslint-disable-next-line
var react_2 = require("@testing-library/react");
function Example(_a) {
    var Component = _a.Component;
    var _b = tslib_1.__read(react_1.useState(false), 2), isSelected = _b[0], setIsSelected = _b[1];
    var _c = tslib_1.__read(react_1.useState(false), 2), isDisabled = _c[0], setIsDisabled = _c[1];
    var ref = react_1.useRef(null);
    react_1.useLayoutEffect(function () {
        function toggleSelect() {
            setIsSelected(function (value) { return !value; });
        }
        function toggleDisabled() {
            setIsDisabled(function (value) { return !value; });
        }
        var el = ref.current;
        if (!el) {
            throw new Error('Could not find button ref');
        }
        el.addEventListener('toggle-select', toggleSelect);
        el.addEventListener('toggle-disabled', toggleDisabled);
        return function () {
            el.removeEventListener('toggle-select', toggleSelect);
            el.removeEventListener('toggle-disabled', toggleDisabled);
        };
    }, []);
    return (
    // @ts-ignore
    react_1.default.createElement(Component, { ref: ref, testId: "my-button", isSelected: isSelected, isDisabled: isDisabled, "data-is-selected": isSelected }, "Hello world"));
}
var interactionTasks = [
    {
        name: 'Click a button',
        description: 'Recording how long a mousedown + click event take to be processed',
        run: function (_a) {
            var container = _a.container;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var button;
                return tslib_1.__generator(this, function (_b) {
                    button = container.querySelector('[data-testid="my-button"]');
                    if (button == null) {
                        throw new Error('Could not find button element');
                    }
                    react_2.fireEvent.mouseDown(button);
                    react_2.fireEvent.click(button);
                    return [2 /*return*/];
                });
            });
        },
    },
    {
        name: 'Focus on button',
        description: 'Focus on a button and wait for layout and paint to finish',
        run: function (_a) {
            var container = _a.container, controls = _a.controls;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var button;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            button = container.querySelector('[data-testid="my-button"]');
                            if (button == null) {
                                throw new Error('Could not find button element');
                            }
                            return [4 /*yield*/, controls.time(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        react_2.fireEvent.focus(button);
                                        react_2.fireEvent.blur(button);
                                        return [2 /*return*/];
                                    });
                                }); })];
                        case 1:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
    {
        name: 'Select button',
        description: 'Trigger the selection of a button',
        run: function (_a) {
            var container = _a.container, controls = _a.controls;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var button;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            button = container.querySelector('[data-testid="my-button"]');
                            if (button == null) {
                                throw new Error('Could not find button element');
                            }
                            if (button.getAttribute('data-is-selected') !== 'false') {
                                throw new Error('Should not start selected');
                            }
                            return [4 /*yield*/, controls.time(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        react_2.fireEvent(button, new Event('toggle-select'));
                                        return [2 /*return*/];
                                    });
                                }); })];
                        case 1:
                            _b.sent();
                            if (button.getAttribute('data-is-selected') !== 'true') {
                                throw new Error('Should now be selected');
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
    {
        name: 'Disable button',
        description: 'Trigger the disabling of a button',
        run: function (_a) {
            var container = _a.container, controls = _a.controls;
            return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                var button;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            button = container.querySelector('[data-testid="my-button"]');
                            if (button == null) {
                                throw new Error('Could not find button element');
                            }
                            if (button.hasAttribute('disabled')) {
                                throw new Error('Should not start disabled');
                            }
                            return [4 /*yield*/, controls.time(function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        react_2.fireEvent(button, new Event('toggle-disabled'));
                                        return [2 /*return*/];
                                    });
                                }); })];
                        case 1:
                            _b.sent();
                            if (!button.hasAttribute('disabled')) {
                                throw new Error('Should now be disabled');
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
];
exports.button = function () { return react_1.default.createElement(Example, { Component: index_1.default }); };
exports.button.story = {
    name: 'Button',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
exports.customThemeButton = function () { return (react_1.default.createElement(Example, { Component: index_1.CustomThemeButton })); };
exports.customThemeButton.story = {
    name: 'CustomThemeButton',
    parameters: {
        performance: {
            interactions: interactionTasks,
        },
    },
};
//# sourceMappingURL=examples.js.map