"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultThemeFn = exports.getSpecifiers = exports.getCustomCss = void 0;
var tslib_1 = require("tslib");
var components_1 = require("@atlaskit/theme/components");
var css_1 = require("../shared/css");
var stateToSelectorMap = {
    focus: '&:focus',
    focusSelected: '&:focus',
    hover: '&:hover',
    active: '&:active',
    disabled: '&[disabled]',
};
// Mapping the new clean css back to the legacy theme format.
// The legacy theme format has all styles at the top level (no nested selectors)
// and uses `getSpecifiers()` to apply the style to all psudeo states
function getCustomCss(_a) {
    var _b = _a.appearance, appearance = _b === void 0 ? 'default' : _b, _c = _a.spacing, spacing = _c === void 0 ? 'default' : _c, _d = _a.mode, mode = _d === void 0 ? 'light' : _d, _e = _a.isSelected, isSelected = _e === void 0 ? false : _e, _f = _a.shouldFitContainer, shouldFitContainer = _f === void 0 ? false : _f, _g = _a.iconIsOnlyChild, iconIsOnlyChild = _g === void 0 ? false : _g, _h = _a.isLoading, isLoading = _h === void 0 ? false : _h, state = _a.state;
    var result = css_1.getCss({
        appearance: appearance,
        spacing: spacing,
        mode: mode,
        isSelected: isSelected,
        shouldFitContainer: shouldFitContainer,
        isOnlySingleIcon: iconIsOnlyChild,
    });
    // we need to disable the default browser focus styles always
    // this is because we are not expressing that we can have two pesduo states at a time
    result.outline = 'none';
    // Pulling relevant styles up to the top level
    var selector = stateToSelectorMap[state];
    if (selector) {
        result = tslib_1.__assign(tslib_1.__assign({}, result), result[selector]);
    }
    if (isLoading) {
        result = tslib_1.__assign(tslib_1.__assign({}, result), result['&[data-has-overlay="true"]']);
    }
    // Delete all selectors and just keep root styles
    Object.keys(result).forEach(function (key) {
        // want to keep this one
        if (key === '&::-moz-focus-inner') {
            return;
        }
        // Not using .startsWith for ie11
        if (key.indexOf('&') === 0) {
            delete result[key];
        }
    });
    return result;
}
exports.getCustomCss = getCustomCss;
// This styling approach works by generating a 'style' and applying with maximum specificity
// To do this we are overwriting all psuedo selectors
function getSpecifiers(styles) {
    return {
        '&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]': styles,
    };
}
exports.getSpecifiers = getSpecifiers;
function defaultThemeFn(current, values) {
    return current(values);
}
exports.defaultThemeFn = defaultThemeFn;
var Theme = components_1.createTheme(function (themeProps) { return ({
    buttonStyles: getCustomCss(themeProps),
    // No styles being applied directly to spinner by default
    // Keeping this for legacy compat. We could remove it, but given
    // that we are changing theme soon there is no point
    spinnerStyles: {},
}); });
exports.default = Theme;
//# sourceMappingURL=theme.js.map