{"ast":null,"code":"import { __extends, __makeTemplateObject } from \"tslib\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { ThemeProvider } from 'styled-components';\nimport exenv from 'exenv';\nimport * as colors from '../colors';\nimport { CHANNEL, DEFAULT_THEME_MODE } from '../constants'; // For forward-compat until everything is upgraded.\n\nimport Theme from './Theme';\n\nfunction getStylesheetResetCSS(backgroundColor) {\n  return \"\\n    body { background: \" + backgroundColor + \"; }\\n  \";\n}\n\nfunction buildThemeState(mode) {\n  var _a;\n\n  return {\n    theme: (_a = {}, _a[CHANNEL] = {\n      mode: mode\n    }, _a)\n  };\n}\n\nvar LegacyReset = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  background-color: \", \";\\n  color: \", \";\\n\\n  a {\\n    color: \", \";\\n  }\\n  a:hover {\\n    color: \", \";\\n  }\\n  a:active {\\n    color: \", \";\\n  }\\n  a:focus {\\n    outline-color: \", \";\\n  }\\n  h1 {\\n    color: \", \";\\n  }\\n  h2 {\\n    color: \", \";\\n  }\\n  h3 {\\n    color: \", \";\\n  }\\n  h4 {\\n    color: \", \";\\n  }\\n  h5 {\\n    color: \", \";\\n  }\\n  h6 {\\n    color: \", \";\\n  }\\n  small {\\n    color: \", \";\\n  }\\n\"], [\"\\n  background-color: \", \";\\n  color: \", \";\\n\\n  a {\\n    color: \", \";\\n  }\\n  a:hover {\\n    color: \", \";\\n  }\\n  a:active {\\n    color: \", \";\\n  }\\n  a:focus {\\n    outline-color: \", \";\\n  }\\n  h1 {\\n    color: \", \";\\n  }\\n  h2 {\\n    color: \", \";\\n  }\\n  h3 {\\n    color: \", \";\\n  }\\n  h4 {\\n    color: \", \";\\n  }\\n  h5 {\\n    color: \", \";\\n  }\\n  h6 {\\n    color: \", \";\\n  }\\n  small {\\n    color: \", \";\\n  }\\n\"])), function (p) {\n  return p.background;\n}, colors.text, colors.link, colors.linkHover, colors.linkActive, colors.linkOutline, colors.heading, colors.heading, colors.heading, colors.heading, colors.heading, colors.subtleHeading, colors.subtleText);\n\nvar AtlaskitThemeProvider =\n/** @class */\nfunction (_super) {\n  __extends(AtlaskitThemeProvider, _super);\n\n  function AtlaskitThemeProvider(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * This function never changes its reference because it accesses\n     * `this` in the function call - thereby sidestepping the need for\n     * creating a new reference everytime theme state changes.\n     * NOTE: When moving to hooks watch out for this regressing.\n     */\n\n\n    _this.getThemeMode = function () {\n      return {\n        mode: _this.state.theme[CHANNEL].mode\n      };\n    };\n\n    _this.state = buildThemeState(props.mode);\n    return _this;\n  }\n\n  AtlaskitThemeProvider.prototype.getChildContext = function () {\n    return {\n      hasAtlaskitThemeProvider: true\n    };\n  };\n\n  AtlaskitThemeProvider.prototype.UNSAFE_componentWillMount = function () {\n    if (!this.context.hasAtlaskitThemeProvider && exenv.canUseDOM) {\n      var css = getStylesheetResetCSS(this.props.background(this.state));\n      this.stylesheet = document.createElement('style');\n      this.stylesheet.type = 'text/css';\n      this.stylesheet.innerHTML = css;\n\n      if (document && document.head) {\n        document.head.appendChild(this.stylesheet);\n      }\n    }\n  };\n\n  AtlaskitThemeProvider.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n    if (newProps.mode !== this.props.mode) {\n      var newThemeState = buildThemeState(newProps.mode);\n\n      if (this.stylesheet) {\n        var css = getStylesheetResetCSS(newProps.background(newThemeState));\n        this.stylesheet.innerHTML = css;\n      }\n\n      this.setState(newThemeState);\n    }\n  };\n\n  AtlaskitThemeProvider.prototype.componentWillUnmount = function () {\n    if (this.stylesheet && document && document.head) {\n      document.head.removeChild(this.stylesheet);\n      delete this.stylesheet;\n    }\n  };\n\n  AtlaskitThemeProvider.prototype.render = function () {\n    var children = this.props.children;\n    var theme = this.state.theme;\n    return (\n      /* Wrapping the new provider around the old one provides forward\n      compatibility when using the old provider for styled components. This\n      allows us to use components converted to use the new API with consumers\n      using the old provider along side components that may still be using the\n      old theming API. */\n      React.createElement(Theme.Provider, {\n        value: this.getThemeMode\n      }, React.createElement(ThemeProvider, {\n        theme: theme\n      }, React.createElement(LegacyReset, {\n        background: this.props.background\n      }, children)))\n    );\n  };\n\n  AtlaskitThemeProvider.defaultProps = {\n    mode: DEFAULT_THEME_MODE,\n    background: colors.background\n  };\n  AtlaskitThemeProvider.childContextTypes = {\n    hasAtlaskitThemeProvider: PropTypes.bool\n  };\n  AtlaskitThemeProvider.contextTypes = {\n    hasAtlaskitThemeProvider: PropTypes.bool\n  };\n  return AtlaskitThemeProvider;\n}(Component);\n\nexport default AtlaskitThemeProvider;\nvar templateObject_1;","map":{"version":3,"sources":["../../../src/components/AtlaskitThemeProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __makeTemplateObject } from \"tslib\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { ThemeProvider } from 'styled-components';\nimport exenv from 'exenv';\nimport * as colors from '../colors';\nimport { CHANNEL, DEFAULT_THEME_MODE } from '../constants';\n// For forward-compat until everything is upgraded.\nimport Theme from './Theme';\nfunction getStylesheetResetCSS(backgroundColor) {\n    return \"\\n    body { background: \" + backgroundColor + \"; }\\n  \";\n}\nfunction buildThemeState(mode) {\n    var _a;\n    return { theme: (_a = {}, _a[CHANNEL] = { mode: mode }, _a) };\n}\nvar LegacyReset = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  background-color: \", \";\\n  color: \", \";\\n\\n  a {\\n    color: \", \";\\n  }\\n  a:hover {\\n    color: \", \";\\n  }\\n  a:active {\\n    color: \", \";\\n  }\\n  a:focus {\\n    outline-color: \", \";\\n  }\\n  h1 {\\n    color: \", \";\\n  }\\n  h2 {\\n    color: \", \";\\n  }\\n  h3 {\\n    color: \", \";\\n  }\\n  h4 {\\n    color: \", \";\\n  }\\n  h5 {\\n    color: \", \";\\n  }\\n  h6 {\\n    color: \", \";\\n  }\\n  small {\\n    color: \", \";\\n  }\\n\"], [\"\\n  background-color: \", \";\\n  color: \", \";\\n\\n  a {\\n    color: \", \";\\n  }\\n  a:hover {\\n    color: \", \";\\n  }\\n  a:active {\\n    color: \", \";\\n  }\\n  a:focus {\\n    outline-color: \", \";\\n  }\\n  h1 {\\n    color: \", \";\\n  }\\n  h2 {\\n    color: \", \";\\n  }\\n  h3 {\\n    color: \", \";\\n  }\\n  h4 {\\n    color: \", \";\\n  }\\n  h5 {\\n    color: \", \";\\n  }\\n  h6 {\\n    color: \", \";\\n  }\\n  small {\\n    color: \", \";\\n  }\\n\"])), function (p) { return p.background; }, colors.text, colors.link, colors.linkHover, colors.linkActive, colors.linkOutline, colors.heading, colors.heading, colors.heading, colors.heading, colors.heading, colors.subtleHeading, colors.subtleText);\nvar AtlaskitThemeProvider = /** @class */ (function (_super) {\n    __extends(AtlaskitThemeProvider, _super);\n    function AtlaskitThemeProvider(props) {\n        var _this = _super.call(this, props) || this;\n        /**\n         * This function never changes its reference because it accesses\n         * `this` in the function call - thereby sidestepping the need for\n         * creating a new reference everytime theme state changes.\n         * NOTE: When moving to hooks watch out for this regressing.\n         */\n        _this.getThemeMode = function () { return ({ mode: _this.state.theme[CHANNEL].mode }); };\n        _this.state = buildThemeState(props.mode);\n        return _this;\n    }\n    AtlaskitThemeProvider.prototype.getChildContext = function () {\n        return { hasAtlaskitThemeProvider: true };\n    };\n    AtlaskitThemeProvider.prototype.UNSAFE_componentWillMount = function () {\n        if (!this.context.hasAtlaskitThemeProvider && exenv.canUseDOM) {\n            var css = getStylesheetResetCSS(this.props.background(this.state));\n            this.stylesheet = document.createElement('style');\n            this.stylesheet.type = 'text/css';\n            this.stylesheet.innerHTML = css;\n            if (document && document.head) {\n                document.head.appendChild(this.stylesheet);\n            }\n        }\n    };\n    AtlaskitThemeProvider.prototype.UNSAFE_componentWillReceiveProps = function (newProps) {\n        if (newProps.mode !== this.props.mode) {\n            var newThemeState = buildThemeState(newProps.mode);\n            if (this.stylesheet) {\n                var css = getStylesheetResetCSS(newProps.background(newThemeState));\n                this.stylesheet.innerHTML = css;\n            }\n            this.setState(newThemeState);\n        }\n    };\n    AtlaskitThemeProvider.prototype.componentWillUnmount = function () {\n        if (this.stylesheet && document && document.head) {\n            document.head.removeChild(this.stylesheet);\n            delete this.stylesheet;\n        }\n    };\n    AtlaskitThemeProvider.prototype.render = function () {\n        var children = this.props.children;\n        var theme = this.state.theme;\n        return (\n        /* Wrapping the new provider around the old one provides forward\n        compatibility when using the old provider for styled components. This\n        allows us to use components converted to use the new API with consumers\n        using the old provider along side components that may still be using the\n        old theming API. */\n        React.createElement(Theme.Provider, { value: this.getThemeMode },\n            React.createElement(ThemeProvider, { theme: theme },\n                React.createElement(LegacyReset, { background: this.props.background }, children))));\n    };\n    AtlaskitThemeProvider.defaultProps = {\n        mode: DEFAULT_THEME_MODE,\n        background: colors.background,\n    };\n    AtlaskitThemeProvider.childContextTypes = {\n        hasAtlaskitThemeProvider: PropTypes.bool,\n    };\n    AtlaskitThemeProvider.contextTypes = {\n        hasAtlaskitThemeProvider: PropTypes.bool,\n    };\n    return AtlaskitThemeProvider;\n}(Component));\nexport default AtlaskitThemeProvider;\nvar templateObject_1;\n//# sourceMappingURL=AtlaskitThemeProvider.js.map"]},"metadata":{},"sourceType":"module"}