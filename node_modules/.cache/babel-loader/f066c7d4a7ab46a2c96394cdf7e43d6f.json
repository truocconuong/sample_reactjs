{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef'; // WARNING: This hook will only function correctly for leaf node components - as in\n// no children inside the component will require analytics themselves.\n// Ignoring this warning will mean the analytics context of child components will not\n// include the context of this component, .e.g, lost data.\n// If you are going to have child components that require analytics use withAnalytics\n// or AnalyticsContext component instead.\n\nexport function usePlatformLeafEventHandler(_a) {\n  var fn = _a.fn,\n      action = _a.action,\n      componentName = _a.componentName,\n      packageName = _a.packageName,\n      packageVersion = _a.packageVersion,\n      analyticsData = _a.analyticsData;\n  var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent; // We put analyticsData and fn in a ref so that we don't need to break\n  // memoization.\n  // Generally these could be defined by consumers inline\n  // and so we do this to avoid breaking memoization of useCallback\n\n  var dataRef = useTrackedRef(analyticsData);\n  var fnRef = useTrackedRef(fn);\n  var handler = useCallback(function (value) {\n    var analyticsEvent = createAnalyticsEvent({\n      action: action,\n      actionSubject: componentName,\n      attributes: {\n        componentName: componentName,\n        packageName: packageName,\n        packageVersion: packageVersion\n      }\n    }); // To avoid wrapping this component in AnalyticsContext we manually\n    // push the parent context's meta data into the context.\n    // Note: this new 'context'\n\n    var context = __assign({\n      componentName: componentName,\n      packageName: packageName,\n      packageVersion: packageVersion\n    }, dataRef.current);\n\n    analyticsEvent.context.push(context); // fire an event on the atlaskit channel\n\n    var clone = analyticsEvent.clone();\n\n    if (clone) {\n      clone.fire('atlaskit');\n    }\n\n    fnRef.current(value, analyticsEvent);\n  }, [// These are strings and won't change\n  action, componentName, packageName, packageVersion, // This function is memoized in the context\n  createAnalyticsEvent, // these are a stable ref because of the useTrackedRef hook\n  dataRef, fnRef]);\n  return handler;\n}","map":{"version":3,"sources":["../../../src/hooks/usePlatformLeafEventHandler.ts"],"names":[],"mappings":";AAAA,SAAS,WAAT,QAA4B,OAA5B;AAIA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,aAAT,QAA8B,iBAA9B,C,CAaA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAM,SAAU,2BAAV,CAAyC,EAAzC,EAOmC;MANvC,EAAE,GAAA,EAAA,CAAA,E;MACF,MAAM,GAAA,EAAA,CAAA,M;MACN,aAAa,GAAA,EAAA,CAAA,a;MACb,WAAW,GAAA,EAAA,CAAA,W;MACX,cAAc,GAAA,EAAA,CAAA,c;MACd,aAAa,GAAA,EAAA,CAAA,a;AAEL,MAAA,oBAAoB,GAAK,kBAAkB,GAAvB,oBAApB,CAD+B,CAGvC;AACA;AACA;AACA;;AACA,MAAM,OAAO,GAAG,aAAa,CAAC,aAAD,CAA7B;AACA,MAAM,KAAK,GAAG,aAAa,CAAC,EAAD,CAA3B;AAEA,MAAM,OAAO,GAAG,WAAW,CACzB,UAAA,KAAA,EAAK;AACH,QAAM,cAAc,GAAqB,oBAAoB,CAAC;AAC5D,MAAA,MAAM,EAAA,MADsD;AAE5D,MAAA,aAAa,EAAE,aAF6C;AAG5D,MAAA,UAAU,EAAE;AACV,QAAA,aAAa,EAAA,aADH;AAEV,QAAA,WAAW,EAAA,WAFD;AAGV,QAAA,cAAc,EAAA;AAHJ;AAHgD,KAAD,CAA7D,CADG,CAWH;AACA;AACA;;AACA,QAAM,OAAO,GAAA,QAAA,CAAA;AACX,MAAA,aAAa,EAAA,aADF;AAEX,MAAA,WAAW,EAAA,WAFA;AAGX,MAAA,cAAc,EAAA;AAHH,KAAA,EAIR,OAAO,CAAC,OAJA,CAAb;;AAOA,IAAA,cAAc,CAAC,OAAf,CAAuB,IAAvB,CAA4B,OAA5B,EArBG,CAuBH;;AACA,QAAM,KAAK,GAA4B,cAAc,CAAC,KAAf,EAAvC;;AACA,QAAI,KAAJ,EAAW;AACT,MAAA,KAAK,CAAC,IAAN,CAAW,UAAX;AACD;;AAED,IAAA,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,cAArB;AACD,GA/BwB,EAgCzB,CACE;AACA,EAAA,MAFF,EAGE,aAHF,EAIE,WAJF,EAKE,cALF,EAME;AACA,EAAA,oBAPF,EAQE;AACA,EAAA,OATF,EAUE,KAVF,CAhCyB,CAA3B;AA8CA,SAAO,OAAP;AACD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { useCallback } from 'react';\nimport { useAnalyticsEvents } from './useAnalyticsEvents';\nimport { useTrackedRef } from './useTrackedRef';\n// WARNING: This hook will only function correctly for leaf node components - as in\n// no children inside the component will require analytics themselves.\n// Ignoring this warning will mean the analytics context of child components will not\n// include the context of this component, .e.g, lost data.\n// If you are going to have child components that require analytics use withAnalytics\n// or AnalyticsContext component instead.\nexport function usePlatformLeafEventHandler(_a) {\n    var fn = _a.fn, action = _a.action, componentName = _a.componentName, packageName = _a.packageName, packageVersion = _a.packageVersion, analyticsData = _a.analyticsData;\n    var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;\n    // We put analyticsData and fn in a ref so that we don't need to break\n    // memoization.\n    // Generally these could be defined by consumers inline\n    // and so we do this to avoid breaking memoization of useCallback\n    var dataRef = useTrackedRef(analyticsData);\n    var fnRef = useTrackedRef(fn);\n    var handler = useCallback(function (value) {\n        var analyticsEvent = createAnalyticsEvent({\n            action: action,\n            actionSubject: componentName,\n            attributes: {\n                componentName: componentName,\n                packageName: packageName,\n                packageVersion: packageVersion,\n            },\n        });\n        // To avoid wrapping this component in AnalyticsContext we manually\n        // push the parent context's meta data into the context.\n        // Note: this new 'context'\n        var context = __assign({ componentName: componentName,\n            packageName: packageName,\n            packageVersion: packageVersion }, dataRef.current);\n        analyticsEvent.context.push(context);\n        // fire an event on the atlaskit channel\n        var clone = analyticsEvent.clone();\n        if (clone) {\n            clone.fire('atlaskit');\n        }\n        fnRef.current(value, analyticsEvent);\n    }, [\n        // These are strings and won't change\n        action,\n        componentName,\n        packageName,\n        packageVersion,\n        // This function is memoized in the context\n        createAnalyticsEvent,\n        // these are a stable ref because of the useTrackedRef hook\n        dataRef,\n        fnRef,\n    ]);\n    return handler;\n}\n//# sourceMappingURL=usePlatformLeafEventHandler.js.map"]},"metadata":{},"sourceType":"module"}