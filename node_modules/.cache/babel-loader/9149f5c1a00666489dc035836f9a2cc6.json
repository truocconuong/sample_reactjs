{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { createTheme } from '@atlaskit/theme/components';\nimport { getCss } from '../shared/css';\nvar stateToSelectorMap = {\n  focus: '&:focus',\n  focusSelected: '&:focus',\n  hover: '&:hover',\n  active: '&:active',\n  disabled: '&[disabled]'\n}; // Mapping the new clean css back to the legacy theme format.\n// The legacy theme format has all styles at the top level (no nested selectors)\n// and uses `getSpecifiers()` to apply the style to all psudeo states\n\nexport function getCustomCss(_a) {\n  var _b = _a.appearance,\n      appearance = _b === void 0 ? 'default' : _b,\n      _c = _a.spacing,\n      spacing = _c === void 0 ? 'default' : _c,\n      _d = _a.mode,\n      mode = _d === void 0 ? 'light' : _d,\n      _e = _a.isSelected,\n      isSelected = _e === void 0 ? false : _e,\n      _f = _a.shouldFitContainer,\n      shouldFitContainer = _f === void 0 ? false : _f,\n      _g = _a.iconIsOnlyChild,\n      iconIsOnlyChild = _g === void 0 ? false : _g,\n      _h = _a.isLoading,\n      isLoading = _h === void 0 ? false : _h,\n      state = _a.state;\n  var result = getCss({\n    appearance: appearance,\n    spacing: spacing,\n    mode: mode,\n    isSelected: isSelected,\n    shouldFitContainer: shouldFitContainer,\n    isOnlySingleIcon: iconIsOnlyChild\n  }); // we need to disable the default browser focus styles always\n  // this is because we are not expressing that we can have two pesduo states at a time\n\n  result.outline = 'none'; // Pulling relevant styles up to the top level\n\n  var selector = stateToSelectorMap[state];\n\n  if (selector) {\n    result = __assign(__assign({}, result), result[selector]);\n  }\n\n  if (isLoading) {\n    result = __assign(__assign({}, result), result['&[data-has-overlay=\"true\"]']);\n  } // Delete all selectors and just keep root styles\n\n\n  Object.keys(result).forEach(function (key) {\n    // want to keep this one\n    if (key === '&::-moz-focus-inner') {\n      return;\n    } // Not using .startsWith for ie11\n\n\n    if (key.indexOf('&') === 0) {\n      delete result[key];\n    }\n  });\n  return result;\n} // This styling approach works by generating a 'style' and applying with maximum specificity\n// To do this we are overwriting all psuedo selectors\n\nexport function getSpecifiers(styles) {\n  return {\n    '&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]': styles\n  };\n}\nexport function defaultThemeFn(current, values) {\n  return current(values);\n}\nvar Theme = createTheme(function (themeProps) {\n  return {\n    buttonStyles: getCustomCss(themeProps),\n    // No styles being applied directly to spinner by default\n    // Keeping this for legacy compat. We could remove it, but given\n    // that we are changing theme soon there is no point\n    spinnerStyles: {}\n  };\n});\nexport default Theme;","map":{"version":3,"sources":["../../../src/custom-theme-button/theme.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { createTheme } from '@atlaskit/theme/components';\nimport { getCss } from '../shared/css';\nvar stateToSelectorMap = {\n    focus: '&:focus',\n    focusSelected: '&:focus',\n    hover: '&:hover',\n    active: '&:active',\n    disabled: '&[disabled]',\n};\n// Mapping the new clean css back to the legacy theme format.\n// The legacy theme format has all styles at the top level (no nested selectors)\n// and uses `getSpecifiers()` to apply the style to all psudeo states\nexport function getCustomCss(_a) {\n    var _b = _a.appearance, appearance = _b === void 0 ? 'default' : _b, _c = _a.spacing, spacing = _c === void 0 ? 'default' : _c, _d = _a.mode, mode = _d === void 0 ? 'light' : _d, _e = _a.isSelected, isSelected = _e === void 0 ? false : _e, _f = _a.shouldFitContainer, shouldFitContainer = _f === void 0 ? false : _f, _g = _a.iconIsOnlyChild, iconIsOnlyChild = _g === void 0 ? false : _g, _h = _a.isLoading, isLoading = _h === void 0 ? false : _h, state = _a.state;\n    var result = getCss({\n        appearance: appearance,\n        spacing: spacing,\n        mode: mode,\n        isSelected: isSelected,\n        shouldFitContainer: shouldFitContainer,\n        isOnlySingleIcon: iconIsOnlyChild,\n    });\n    // we need to disable the default browser focus styles always\n    // this is because we are not expressing that we can have two pesduo states at a time\n    result.outline = 'none';\n    // Pulling relevant styles up to the top level\n    var selector = stateToSelectorMap[state];\n    if (selector) {\n        result = __assign(__assign({}, result), result[selector]);\n    }\n    if (isLoading) {\n        result = __assign(__assign({}, result), result['&[data-has-overlay=\"true\"]']);\n    }\n    // Delete all selectors and just keep root styles\n    Object.keys(result).forEach(function (key) {\n        // want to keep this one\n        if (key === '&::-moz-focus-inner') {\n            return;\n        }\n        // Not using .startsWith for ie11\n        if (key.indexOf('&') === 0) {\n            delete result[key];\n        }\n    });\n    return result;\n}\n// This styling approach works by generating a 'style' and applying with maximum specificity\n// To do this we are overwriting all psuedo selectors\nexport function getSpecifiers(styles) {\n    return {\n        '&, &:hover, &:active, &:focus, &:visited, &:disabled, &[disabled]': styles,\n    };\n}\nexport function defaultThemeFn(current, values) {\n    return current(values);\n}\nvar Theme = createTheme(function (themeProps) { return ({\n    buttonStyles: getCustomCss(themeProps),\n    // No styles being applied directly to spinner by default\n    // Keeping this for legacy compat. We could remove it, but given\n    // that we are changing theme soon there is no point\n    spinnerStyles: {},\n}); });\nexport default Theme;\n//# sourceMappingURL=theme.js.map"]},"metadata":{},"sourceType":"module"}