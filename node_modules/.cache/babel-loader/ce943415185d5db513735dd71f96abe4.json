{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport ReactFocusLock from 'react-focus-lock';\nimport invariant from 'tiny-invariant'; // Thin wrapper over react-focus-lock. This wrapper only exists to ensure API compatibility.\n// This component should be deleted during https://ecosystem.atlassian.net/browse/AK-5658\n\nvar FocusLock =\n/** @class */\nfunction (_super) {\n  __extends(FocusLock, _super);\n\n  function FocusLock() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FocusLock.prototype.componentDidMount = function () {\n    var _a = this.props,\n        isEnabled = _a.isEnabled,\n        autoFocus = _a.autoFocus;\n\n    if (process.env.NODE_ENV !== 'production') {\n      invariant(typeof autoFocus === 'boolean', '@atlaskit/modal-dialog: Passing a function as autoFocus is deprecated. Instead call focus on the element ref or use the autofocus property.');\n    }\n\n    if (typeof autoFocus === 'function' && isEnabled) {\n      var elem = autoFocus();\n\n      if (elem && elem.focus) {\n        elem.focus();\n      }\n    }\n  };\n\n  FocusLock.prototype.render = function () {\n    var _a = this.props,\n        isEnabled = _a.isEnabled,\n        autoFocus = _a.autoFocus,\n        shouldReturnFocus = _a.shouldReturnFocus;\n    return React.createElement(ReactFocusLock, {\n      disabled: !isEnabled,\n      autoFocus: !!autoFocus,\n      returnFocus: shouldReturnFocus\n    }, this.props.children);\n  };\n\n  FocusLock.defaultProps = {\n    autoFocus: true,\n    isEnabled: true,\n    shouldReturnFocus: true\n  };\n  return FocusLock;\n}(React.Component);\n\nexport default FocusLock;","map":{"version":3,"sources":["../../../src/components/FocusLock.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAO,cAAP,MAA2B,kBAA3B;AACA,OAAO,SAAP,MAAsB,gBAAtB,C,CAqBA;AACA;;AACA,IAAA,SAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,SAAA,EAAA,MAAA,CAAA;;AAAvC,WAAA,SAAA,GAAA;;AAoCC;;AA7BC,EAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACQ,QAAA,EAAA,GAA2B,KAAK,KAAhC;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,SAAS,GAAA,EAAA,CAAA,SAAtB;;AAEN,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAA,SAAS,CACP,OAAO,SAAP,KAAqB,SADd,EAEP,6IAFO,CAAT;AAID;;AACD,QAAI,OAAO,SAAP,KAAqB,UAArB,IAAmC,SAAvC,EAAkD;AAChD,UAAM,IAAI,GAAG,SAAS,EAAtB;;AACA,UAAI,IAAI,IAAI,IAAI,CAAC,KAAjB,EAAwB;AACtB,QAAA,IAAI,CAAC,KAAL;AACD;AACF;AACF,GAfD;;AAiBA,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACQ,QAAA,EAAA,GAA8C,KAAK,KAAnD;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,SAAS,GAAA,EAAA,CAAA,SAAtB;AAAA,QAAwB,iBAAiB,GAAA,EAAA,CAAA,iBAAzC;AACN,WACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AACb,MAAA,QAAQ,EAAE,CAAC,SADE;AAEb,MAAA,SAAS,EAAE,CAAC,CAAC,SAFA;AAGb,MAAA,WAAW,EAAE;AAHA,KAAf,EAKG,KAAK,KAAL,CAAW,QALd,CADF;AASD,GAXD;;AAvBO,EAAA,SAAA,CAAA,YAAA,GAAe;AACpB,IAAA,SAAS,EAAE,IADS;AAEpB,IAAA,SAAS,EAAE,IAFS;AAGpB,IAAA,iBAAiB,EAAE;AAHC,GAAf;AAmCT,SAAA,SAAA;AAAC,CApCD,CAAuC,KAAK,CAAC,SAA7C,CAAA;;eAAqB,S","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport React from 'react';\nimport ReactFocusLock from 'react-focus-lock';\nimport invariant from 'tiny-invariant';\n// Thin wrapper over react-focus-lock. This wrapper only exists to ensure API compatibility.\n// This component should be deleted during https://ecosystem.atlassian.net/browse/AK-5658\nvar FocusLock = /** @class */ (function (_super) {\n    __extends(FocusLock, _super);\n    function FocusLock() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FocusLock.prototype.componentDidMount = function () {\n        var _a = this.props, isEnabled = _a.isEnabled, autoFocus = _a.autoFocus;\n        if (process.env.NODE_ENV !== 'production') {\n            invariant(typeof autoFocus === 'boolean', '@atlaskit/modal-dialog: Passing a function as autoFocus is deprecated. Instead call focus on the element ref or use the autofocus property.');\n        }\n        if (typeof autoFocus === 'function' && isEnabled) {\n            var elem = autoFocus();\n            if (elem && elem.focus) {\n                elem.focus();\n            }\n        }\n    };\n    FocusLock.prototype.render = function () {\n        var _a = this.props, isEnabled = _a.isEnabled, autoFocus = _a.autoFocus, shouldReturnFocus = _a.shouldReturnFocus;\n        return (React.createElement(ReactFocusLock, { disabled: !isEnabled, autoFocus: !!autoFocus, returnFocus: shouldReturnFocus }, this.props.children));\n    };\n    FocusLock.defaultProps = {\n        autoFocus: true,\n        isEnabled: true,\n        shouldReturnFocus: true,\n    };\n    return FocusLock;\n}(React.Component));\nexport default FocusLock;\n//# sourceMappingURL=FocusLock.js.map"]},"metadata":{},"sourceType":"module"}