{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addResizeListener = addResizeListener;\nexports.removeResizeListener = removeResizeListener;\n/** Using lodash/throttle would increase UMD size by over 4 kB over this inline addition */\n\nfunction throttle(func, wait) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var context, args, result, previous, timeout;\n\n  function later() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n\n    if (!timeout) {\n      context = args = null;\n    }\n  }\n\n  return function () {\n    var now = Date.now();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = now;\n      result = func.apply(context, args);\n\n      if (!timeout) {\n        context = args = null;\n      }\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\nvar resizeCallbacks = [];\n/** optimized only to be called on panels that actively can do transitions */\n\nfunction triggerResize(callback) {\n  var _callback$getState = callback.getState(),\n      animateContent = _callback$getState.animateContent,\n      checked = _callback$getState.checked;\n\n  if (animateContent === 'height' && checked || animateContent === 'marginTop' && !checked) {\n    callback();\n  }\n}\n/** execute only five times per second: this ought to be a pretty good balance between performance vs. humanity */\n\n\nvar onResize = throttle(function onResize() {\n  resizeCallbacks.forEach(triggerResize);\n}, 200, {\n  leading: false\n});\n\nfunction addResizeListener(callback) {\n  if (resizeCallbacks.length === 0) {\n    window.addEventListener('resize', onResize, false);\n  }\n\n  if (!resizeCallbacks.includes(callback)) {\n    resizeCallbacks.push(callback);\n  }\n}\n\nfunction removeResizeListener(callback) {\n  var index = resizeCallbacks.indexOf(callback);\n\n  if (~index) {\n    resizeCallbacks.splice(index, 1);\n  }\n\n  if (resizeCallbacks.length === 0) {\n    window.removeEventListener('resize', onResize, false);\n  }\n}","map":{"version":3,"sources":["/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/node_modules/react-tabbordion/dist/module/lib/resize.js"],"names":["Object","defineProperty","exports","value","addResizeListener","removeResizeListener","throttle","func","wait","options","arguments","length","undefined","context","args","result","previous","timeout","later","leading","Date","now","apply","remaining","clearTimeout","trailing","setTimeout","resizeCallbacks","triggerResize","callback","_callback$getState","getState","animateContent","checked","onResize","forEach","window","addEventListener","includes","push","index","indexOf","splice","removeEventListener"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addResizeListener = addResizeListener;\nexports.removeResizeListener = removeResizeListener;\n\n/** Using lodash/throttle would increase UMD size by over 4 kB over this inline addition */\nfunction throttle(func, wait) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var context, args, result, previous, timeout;\n\n  function later() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n\n    if (!timeout) {\n      context = args = null;\n    }\n  }\n\n  return function () {\n    var now = Date.now();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      previous = now;\n      result = func.apply(context, args);\n\n      if (!timeout) {\n        context = args = null;\n      }\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\nvar resizeCallbacks = [];\n/** optimized only to be called on panels that actively can do transitions */\n\nfunction triggerResize(callback) {\n  var _callback$getState = callback.getState(),\n      animateContent = _callback$getState.animateContent,\n      checked = _callback$getState.checked;\n\n  if (animateContent === 'height' && checked || animateContent === 'marginTop' && !checked) {\n    callback();\n  }\n}\n/** execute only five times per second: this ought to be a pretty good balance between performance vs. humanity */\n\n\nvar onResize = throttle(function onResize() {\n  resizeCallbacks.forEach(triggerResize);\n}, 200, {\n  leading: false\n});\n\nfunction addResizeListener(callback) {\n  if (resizeCallbacks.length === 0) {\n    window.addEventListener('resize', onResize, false);\n  }\n\n  if (!resizeCallbacks.includes(callback)) {\n    resizeCallbacks.push(callback);\n  }\n}\n\nfunction removeResizeListener(callback) {\n  var index = resizeCallbacks.indexOf(callback);\n\n  if (~index) {\n    resizeCallbacks.splice(index, 1);\n  }\n\n  if (resizeCallbacks.length === 0) {\n    window.removeEventListener('resize', onResize, false);\n  }\n}"]},"metadata":{},"sourceType":"script"}