{"ast":null,"code":"/* eslint-disable prefer-rest-params */\nimport getTheme from './getTheme'; // Unpack custom variants, and get correct value for the current theme\n\nfunction themedVariants(variantProp, variants) {\n  return function (props) {\n    var theme = getTheme(props);\n\n    if (props && props[variantProp] && variants) {\n      var modes = variants[props[variantProp]];\n\n      if (modes && modes[theme.mode]) {\n        var value = modes[theme.mode];\n\n        if (value) {\n          return value;\n        } // TS believes value can be undefined\n\n      }\n    }\n\n    return '';\n  };\n}\n\nexport default function themed(modesOrVariant, variantModes) {\n  if (typeof modesOrVariant === 'string') {\n    return themedVariants(modesOrVariant, variantModes);\n  }\n\n  var modes = modesOrVariant;\n  return function (props) {\n    // Get theme from the user's props\n    var theme = getTheme(props); // User isn't required to provide both light and dark values\n\n    if (theme.mode in modes) {\n      var value = modes[theme.mode]; // TS believes value can be undefined\n\n      if (value) {\n        return value;\n      }\n    }\n\n    return '';\n  };\n}","map":{"version":3,"sources":["../../../src/utils/themed.ts"],"names":[],"mappings":"AAAA;AAEA,OAAO,QAAP,MAAqB,YAArB,C,CAOA;;AACA,SAAS,cAAT,CAA2B,WAA3B,EAAgD,QAAhD,EAA0E;AACxE,SAAO,UAAC,KAAD,EAAmB;AACxB,QAAM,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAtB;;AACA,QAAI,KAAK,IAAI,KAAK,CAAC,WAAD,CAAd,IAA+B,QAAnC,EAA6C;AAC3C,UAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAD,CAAN,CAAtB;;AACA,UAAI,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,IAAP,CAAlB,EAAgC;AAC9B,YAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAP,CAAnB;;AACA,YAAI,KAAJ,EAAW;AACT,iBAAO,KAAP;AACD,SAJ6B,CAI5B;;AACH;AACF;;AACD,WAAO,EAAP;AACD,GAZD;AAaD;;AAED,eAAc,SAAU,MAAV,CACZ,cADY,EAEZ,YAFY,EAEkB;AAE9B,MAAI,OAAO,cAAP,KAA0B,QAA9B,EAAwC;AACtC,WAAO,cAAc,CAAI,cAAJ,EAAoB,YAApB,CAArB;AACD;;AACD,MAAM,KAAK,GAAG,cAAd;AACA,SAAO,UAAC,KAAD,EAAmB;AACxB;AACA,QAAM,KAAK,GAAG,QAAQ,CAAC,KAAD,CAAtB,CAFwB,CAGxB;;AACA,QAAI,KAAK,CAAC,IAAN,IAAc,KAAlB,EAAyB;AACvB,UAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAP,CAAnB,CADuB,CACU;;AACjC,UAAI,KAAJ,EAAW;AACT,eAAO,KAAP;AACD;AACF;;AACD,WAAO,EAAP;AACD,GAXD;AAYD","sourceRoot":"","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport getTheme from './getTheme';\n// Unpack custom variants, and get correct value for the current theme\nfunction themedVariants(variantProp, variants) {\n    return function (props) {\n        var theme = getTheme(props);\n        if (props && props[variantProp] && variants) {\n            var modes = variants[props[variantProp]];\n            if (modes && modes[theme.mode]) {\n                var value = modes[theme.mode];\n                if (value) {\n                    return value;\n                } // TS believes value can be undefined\n            }\n        }\n        return '';\n    };\n}\nexport default function themed(modesOrVariant, variantModes) {\n    if (typeof modesOrVariant === 'string') {\n        return themedVariants(modesOrVariant, variantModes);\n    }\n    var modes = modesOrVariant;\n    return function (props) {\n        // Get theme from the user's props\n        var theme = getTheme(props);\n        // User isn't required to provide both light and dark values\n        if (theme.mode in modes) {\n            var value = modes[theme.mode]; // TS believes value can be undefined\n            if (value) {\n                return value;\n            }\n        }\n        return '';\n    };\n}\n//# sourceMappingURL=themed.js.map"]},"metadata":{},"sourceType":"module"}