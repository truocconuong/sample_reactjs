{"ast":null,"code":"var _jsxFileName = \"/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/src/Components/Dnd/Broad.js\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport data from \"./data.js\";\nimport Column from \"./Column.js\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport AddCard from \"./AddCard.js\";\nimport DetailCard from \"./DetailCard.js\";\nimport Network from \"../../Service/Network.js\";\nimport _ from \"lodash\";\nimport Fbloader from \"../libs/PageLoader/fbloader.js\";\nimport { connect } from \"react-redux\";\nimport CreateInterviewCard from \"./CreateInterviewCard.js\";\nimport toastr from \"toastr\";\nimport roleName from \"../../utils/const\";\nimport DetailInterviewCard from \"./DetailInterviewCard.js\";\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\nimport CustomToast from \"../common/CustomToast\";\nconst api = new Network();\nconst Container = styled.div`\n  display: flex;\n  overflow-x: auto;\n`;\n\nclass Broad extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCard = async () => {\n      const {\n        card_data_detail\n      } = this.state;\n      const content = card_data_detail.content;\n      const data = {\n        name: content.name,\n        position: content.position,\n        clientName: content.clientName,\n        phone: content.phone,\n        email: content.email,\n        location: content.location,\n        approachDate: content.approachDate,\n        cv: content.linkCv,\n        nameJob: content.nameJob,\n        noteApproach: content.noteApproach,\n        idJob: content.idJob\n      };\n      const idCard = card_data_detail.id;\n\n      try {\n        const response = await api.patch(`/api/cards/${idCard}`, data);\n\n        if (response) {\n          toast( /*#__PURE__*/React.createElement(CustomToast, {\n            title: \"Update card successed !\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }\n          }), {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n            className: \"toast_login\",\n            closeButton: false,\n            hideProgressBar: true,\n            newestOnTop: true,\n            closeOnClick: true,\n            rtl: false,\n            pauseOnFocusLoss: true,\n            draggable: true,\n            pauseOnHover: true,\n            transition: Zoom\n          });\n          this.initData();\n          this.close_detail_card();\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.updateLaneOfCard = async result => {\n      const cardId = result.draggableId;\n      const laneIdUpdate = {\n        laneId: result.destination.droppableId\n      };\n\n      try {\n        await api.patch(`/api/cards/${cardId}`, laneIdUpdate);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.offOverFlowY = () => {\n      document.body.style[\"overflow-y\"] = \"hidden\";\n    };\n\n    this.onOverFlowY = () => {\n      document.body.style[\"overflow-y\"] = \"scroll\";\n    };\n\n    this.initUserTeam = async () => {\n      try {\n        const response = await api.get(`/api/trello/user`);\n\n        if (response) {\n          const data = response.data.list;\n\n          const users = _.map(data, user => {\n            return {\n              value: user.id,\n              label: user.email,\n              name: user.name,\n              linkAvatar: user.linkAvatar\n            };\n          });\n\n          this.setState({\n            users: users\n          });\n        }\n      } catch (error) {}\n    };\n\n    this.createCardToLane = async item => {\n      const data = { ...item\n      };\n\n      if (this.state.columnSelectedId !== \"\") {\n        data.laneId = this.state.columnSelectedId;\n      }\n\n      try {\n        const response = await api.post(`/api/cards`, data);\n\n        if (response) {\n          toast( /*#__PURE__*/React.createElement(CustomToast, {\n            title: \"Create card successed !\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }\n          }), {\n            position: toast.POSITION.BOTTOM_RIGHT,\n            autoClose: 3000,\n            className: \"toast_login\",\n            closeButton: false,\n            hideProgressBar: true,\n            newestOnTop: true,\n            closeOnClick: true,\n            rtl: false,\n            pauseOnFocusLoss: true,\n            draggable: true,\n            pauseOnHover: true,\n            transition: Zoom\n          });\n          this.setState({\n            isLoading: true\n          });\n          this.close_add_card_form();\n          this.initData();\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.addMemberToCard = async dataUser => {\n      try {\n        const response = await api.patch(`/api/cards/assignment/${dataUser.card_id}`, {\n          userId: dataUser.content.id\n        });\n\n        if (response) {\n          const {\n            data,\n            card_selected\n          } = this.state;\n          data.cards[dataUser.card_id].content.user.push(dataUser.content);\n          card_selected.content.user.push(dataUser.content);\n          this.setState({\n            card_selected: card_selected,\n            update: !this.state.update,\n            data: data\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.removeMemberToCard = async (card_id, user_id) => {\n      try {\n        const response = await api.patch(`/api/cards/remove/assignment/${card_id}`, {\n          userId: user_id\n        });\n\n        if (response) {\n          const {\n            data,\n            card_selected\n          } = this.state;\n          data.cards[card_id].content.user = _.filter(data.cards[card_id].content.user, user => user.id !== user_id);\n          card_selected.content.user = _.filter(card_selected.content.user, user => user.id !== user_id);\n          this.setState({\n            data: data,\n            card_selected: card_selected\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.handleOnChangeJobSelected = e => {\n      const data = this.state.card_selected;\n      data.content.jobSelected = e;\n      data.content.nameJob = e.value;\n      data.content.idJob = e.id;\n      data.content.clientName = e.clientName;\n      data.content.location = e.locationName;\n      console.log(\"isId\", data);\n      this.setState({\n        card_data_detail: data\n      });\n    };\n\n    this.updateColumn = (cards, column) => {\n      const {\n        data\n      } = this.state;\n\n      const idCards = _.map(cards, card => card.id);\n\n      data.columns[column.id].cardIds.push(...idCards);\n      data.columns[column.id].limit = column.limit + 5;\n\n      if (_.isEmpty(cards)) {\n        data.columns[column.id].maximum = true;\n      }\n\n      for (const card of cards) {\n        const cardId = `${card.id}`;\n        data.cards[cardId] = {\n          id: cardId,\n          content: {\n            name: card.Candidate.name,\n            position: card.position,\n            clientName: !_.isNil(card.Job.Client) ? card.Job.Client.name : \"\",\n            phone: card.Candidate.phone,\n            email: card.Candidate.email,\n            location: card.Job.Location.name,\n            approachDate: card.approachDate,\n            linkCv: card.cv,\n            nameJob: card.Job.title,\n            noteApproach: card.noteApproach,\n            interview: card.Interview,\n            idJob: card.jobId,\n            jobSelected: {\n              value: card.Job.title,\n              label: card.Job.title\n            },\n            user: _.map(card.Users, user => {\n              return {\n                name: user.name,\n                id: user.id,\n                email: user.email,\n                linkAvatar: user.linkAvatar\n              };\n            })\n          }\n        };\n      }\n\n      this.setState({\n        data: data\n      });\n    };\n\n    this.state = {\n      show_add_card: false,\n      show_detail_card: false,\n      card_selected: {\n        content: {\n          name: \"\",\n          position: \"\",\n          clientName: \"\",\n          phone: \"\",\n          email: \"\",\n          location: \"\",\n          approachDate: \"\",\n          linkCv: \"\",\n          nameJob: \"\",\n          idJob: \"\",\n          noteApproach: \"\",\n          user: [],\n          jobSelected: {},\n          laneSelected: {}\n        }\n      },\n      card_data_detail: {\n        content: {\n          name: \"\",\n          position: \"\",\n          clientName: \"\",\n          phone: \"\",\n          email: \"\",\n          location: \"\",\n          approachDate: \"\",\n          linkCv: \"\",\n          nameJob: \"\",\n          idJob: \"\",\n          noteApproach: \"\",\n          user: [],\n          jobSelected: {},\n          laneSelected: {}\n        }\n      },\n      data: {},\n      data_real: {},\n      jobs: [],\n      users: [],\n      lanes: [],\n      isLoading: true,\n      columnSelectedId: \"\",\n      update: false,\n      show_form_create_interview: false,\n      show_form_detail_interview: false,\n      isAddCardNoColumn: false\n    };\n    this.open_add_card_form = this.open_add_card_form.bind(this);\n    this.close_add_card_form = this.close_add_card_form.bind(this);\n    this.open_detail_card = this.open_detail_card.bind(this);\n    this.close_detail_card = this.close_detail_card.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.initData = this.initData.bind(this);\n    this.initJob = this.initJob.bind(this);\n    this.handleInputUpdateCard = this.handleInputUpdateCard.bind(this);\n    this.toggleDetailCardAndInterview = this.toggleDetailCardAndInterview.bind(this);\n    this.createInterview = this.createInterview.bind(this);\n    this.open_add_card_form_no_column = this.open_add_card_form_no_column.bind(this);\n    this.toggleDetailInterview = this.toggleDetailInterview.bind(this);\n  }\n\n  async createInterview(data) {\n    try {\n      const response = await api.post(`/api/admin/card/interview`, data);\n\n      if (response) {\n        toast( /*#__PURE__*/React.createElement(CustomToast, {\n          title: \"Create interview successed !\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }\n        }), {\n          position: toast.POSITION.TOP_CENTER,\n          autoClose: 3000,\n          className: \"toast_login\",\n          closeButton: false,\n          hideProgressBar: true,\n          newestOnTop: true,\n          closeOnClick: true,\n          rtl: false,\n          pauseOnFocusLoss: true,\n          draggable: true,\n          pauseOnHover: true,\n          transition: Zoom\n        });\n        this.setState({\n          isLoading: true\n        });\n        this.toggleDetailCardAndInterview();\n        this.close_detail_card();\n        this.initData();\n      }\n    } catch (error) {\n      toast( /*#__PURE__*/React.createElement(CustomToast, {\n        title: \"Interview time is overlapped !\",\n        type: \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }), {\n        position: toast.POSITION.TOP_CENTER,\n        autoClose: 3000,\n        className: \"toast_login\",\n        closeButton: false,\n        hideProgressBar: true,\n        newestOnTop: true,\n        closeOnClick: true,\n        rtl: false,\n        pauseOnFocusLoss: true,\n        draggable: true,\n        pauseOnHover: true,\n        transition: Zoom\n      });\n    }\n  }\n\n  toggleDetailCardAndInterview() {\n    this.setState({\n      show_detail_card: !this.state.show_detail_card,\n      show_form_create_interview: !this.state.show_form_create_interview\n    });\n  }\n\n  toggleDetailInterview() {\n    this.setState({\n      show_detail_card: !this.state.show_detail_card,\n      show_form_detail_interview: !this.state.show_form_detail_interview\n    });\n  }\n\n  toggleFormCreateInterview() {\n    this.state({\n      show_form_create_interview: !this.state.show_form_create_interview\n    });\n  }\n\n  handleInputUpdateCard(e) {\n    let name = e.target.name;\n    let value = e.target.value;\n    const cardDataDetail = this.state.card_data_detail;\n\n    _.assign(cardDataDetail.content, {\n      [name]: value\n    });\n\n    this.setState({\n      card_data_detail: cardDataDetail\n    });\n  }\n\n  open_add_card_form(columnId) {\n    // mo form add card\n    this.setState({\n      columnSelectedId: columnId,\n      show_add_card: true\n    });\n  }\n\n  open_add_card_form_no_column() {\n    // mo form add card\n    this.setState({\n      isAddCardNoColumn: true,\n      show_add_card: true\n    });\n  }\n\n  close_add_card_form() {\n    // dong form add card\n    this.setState({\n      isAddCardNoColumn: false,\n      columnSelectedId: \"\",\n      show_add_card: false\n    });\n  }\n\n  open_detail_card(cardId, columnTitle) {\n    const card = this.state.data.cards[cardId];\n    card.title = columnTitle;\n    this.setState({\n      show_detail_card: true,\n      card_selected: _.cloneDeep(card),\n      card_data_detail: _.cloneDeep(card)\n    });\n  }\n\n  close_detail_card() {\n    this.setState({\n      show_detail_card: false\n    });\n  }\n\n  onDragEnd(result) {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    let self = this;\n\n    if (!destination || this.props.role === \"Director\") {\n      return;\n    }\n\n    if (destination.droppableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = this.state.data.columns[source.droppableId]; // cot bat dau keo\n\n    const finish = this.state.data.columns[destination.droppableId]; // cot dich den\n\n    if (start === finish) {\n      // keo trong 1 cot\n      const newCardIds = Array.from(start.cardIds);\n      newCardIds.splice(source.index, 1);\n      newCardIds.splice(destination.index, 0, draggableId);\n      const newCol = { ...start,\n        cardIds: newCardIds\n      };\n      const data = { ...self.state.data,\n        columns: { ...self.state.data.columns,\n          [newCol.id]: newCol\n        }\n      };\n      this.setState({\n        data: data\n      });\n    } else {\n      // keo qua 2 cot khac nhau\n      const startCardId = Array.from(start.cardIds); // list card trong cot bat dau\n\n      startCardId.splice(source.index, 1); // xoa card ra khoi cot\n\n      const newStart = { // update lai so card trong cot\n        ...start,\n        cardIds: startCardId\n      };\n      const finishCardId = Array.from(finish.cardIds); // list card trong cot ket thuc\n\n      finishCardId.splice(destination.index, 0, draggableId); // them card vao cot (draggableId la id cua card duoc keo)\n\n      const newFinish = { // update lai so card trong cot\n        ...finish,\n        cardIds: finishCardId\n      };\n      const data = { // ste lai state\n        ...self.state.data,\n        columns: { ...self.state.data.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState({\n        data: data\n      });\n    }\n\n    this.updateLaneOfCard(result);\n  }\n\n  componentDidMount() {\n    this.initData();\n    this.initJob();\n    this.initUserTeam();\n    this.offOverFlowY();\n  }\n\n  componentWillUnmount() {\n    this.onOverFlowY();\n  }\n\n  async initData() {\n    const data = {\n      columns: {},\n      cards: {},\n      columnOrder: []\n    };\n\n    try {\n      const lanes = await api.get(`/api/admin/new/cards`);\n      const columns = lanes.data.list;\n\n      for (const column of columns) {\n        data.columns[`${column.id}`] = {\n          id: `${column.id}`,\n          title: column.nameColumn,\n          background: column.background,\n          limit: 5,\n          maximum: false,\n          cardIds: _.map(column.CandidateJobs, candidate => candidate.id)\n        };\n        const cards = column.CandidateJobs;\n\n        for (const card of cards) {\n          const cardId = `${card.id}`;\n          data.cards[cardId] = {\n            id: cardId,\n            content: {\n              name: card.Candidate.name,\n              position: card.position,\n              clientName: !_.isNil(card.Job.Client) ? card.Job.Client.name : \"\",\n              phone: card.Candidate.phone,\n              email: card.Candidate.email,\n              location: card.Job.Location.name,\n              approachDate: card.approachDate,\n              linkCv: card.cv,\n              nameJob: card.Job.title,\n              noteApproach: card.noteApproach,\n              interview: card.Interview,\n              idJob: card.jobId,\n              jobSelected: {\n                value: card.Job.title,\n                label: card.Job.title\n              },\n              user: _.map(card.Users, user => {\n                return {\n                  name: user.name,\n                  id: user.id,\n                  email: user.email,\n                  linkAvatar: user.linkAvatar\n                };\n              })\n            }\n          };\n        }\n      }\n\n      data.columnOrder = _.map(columns, column => `${column.id}`);\n      this.setState({\n        data: data,\n        data_real: data,\n        lanes: _.map(columns, column => {\n          return {\n            value: column.id,\n            label: column.nameColumn\n          };\n        })\n      });\n    } catch (error) {\n      console.log(error);\n    }\n\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  async initJob() {\n    try {\n      const response = await api.get(`/api/trello/job/active`);\n\n      if (response) {\n        const data = response.data.arrJob;\n\n        const jobs = _.map(data, item => {\n          return {\n            id: item.id,\n            value: item.title,\n            label: item.title,\n            clientName: !_.isNil(item.Client) ? item.Client.name : \"\",\n            locationName: !_.isNil(item.Location.name) ? item.Location.name : \"\"\n          };\n        });\n\n        this.setState({\n          jobs: jobs\n        });\n      }\n    } catch (error) {}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"main-board\",\n      className: `d-flex flex-column flex-column-fluid ${this.props.className_wrap_broad} board`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ToastContainer, {\n      closeOnClick: true,\n      autoClose: 1000,\n      rtl: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }\n    }), this.state.isLoading ? /*#__PURE__*/React.createElement(Fbloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 33\n      }\n    }) : null, /*#__PURE__*/React.createElement(AddCard, {\n      jobs: this.state.jobs,\n      lanes: this.state.lanes,\n      show: this.state.show_add_card,\n      createCardToLane: this.createCardToLane,\n      onHide: this.close_add_card_form,\n      isAddCardNoColumn: this.state.isAddCardNoColumn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DetailCard, {\n      show: this.state.show_detail_card,\n      onHide: this.close_detail_card,\n      data: this.state.card_selected,\n      data_detail: this.state.card_data_detail,\n      update: this.handleInputUpdateCard.bind(this),\n      updateCard: this.updateCard,\n      handleOnChangeJobSelected: this.handleOnChangeJobSelected,\n      jobs: this.state.jobs,\n      removeMemberToCard: this.removeMemberToCard,\n      users: this.state.users,\n      updated: this.state.update,\n      addMemberToCard: this.addMemberToCard,\n      toggleDetailCardAndInterview: this.toggleDetailCardAndInterview,\n      toggleDetailInterview: this.toggleDetailInterview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CreateInterviewCard, {\n      show: this.state.show_form_create_interview,\n      data: this.state.card_selected,\n      createInterview: this.createInterview,\n      onHide: this.toggleDetailCardAndInterview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(DetailInterviewCard, {\n      show: this.state.show_form_detail_interview,\n      data: this.state.card_selected,\n      onHide: this.toggleDetailInterview,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"subheader py-3 py-lg-8 subheader-transparent\",\n      id: \"kt_subheader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"trello\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-center mr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-baseline flex-wrap mr-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold my-2 p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"text-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 21\n      }\n    }, \"Dashboard\")), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"breadcrumb-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 21\n      }\n    }, \"List Cards\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex align-items-center flex-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column-fluid trello-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container_trello\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 11\n      }\n    }, this.state.data.columnOrder ? /*#__PURE__*/React.createElement(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 17\n      }\n    }, this.state.data.columnOrder.map((columnId, index) => {\n      const column = this.state.data.columns[columnId];\n      const cards = column.cardIds.map(cardId => {\n        return this.state.data.cards[cardId];\n      });\n      return /*#__PURE__*/React.createElement(Column, {\n        index: index,\n        key: columnId,\n        column: column,\n        cards: cards,\n        users: this.state.users,\n        open_add_card_form: this.open_add_card_form.bind(this, columnId),\n        open_detail_card: this.open_detail_card,\n        addMemberToCard: this.addMemberToCard,\n        removeMemberToCard: this.removeMemberToCard,\n        updateColumn: this.updateColumn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 23\n        }\n      });\n    }))) : \"\")), this.props.role !== roleName.DIRECTOR ? /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn-add-card-vip btn btn-primary\",\n      onClick: this.open_add_card_form_no_column,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"card-vip__plus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 13\n      }\n    }, \"+\")) : \"\");\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    className_wrap_broad: state.ui.className_wrap_broad,\n    role: state.auth.role\n  };\n};\n\nexport default connect(mapStateToProps)(Broad);","map":{"version":3,"sources":["/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/src/Components/Dnd/Broad.js"],"names":["React","Component","Link","styled","data","Column","DragDropContext","AddCard","DetailCard","Network","_","Fbloader","connect","CreateInterviewCard","toastr","roleName","DetailInterviewCard","ToastContainer","toast","Zoom","CustomToast","api","Container","div","Broad","constructor","props","updateCard","card_data_detail","state","content","name","position","clientName","phone","email","location","approachDate","cv","linkCv","nameJob","noteApproach","idJob","idCard","id","response","patch","POSITION","BOTTOM_RIGHT","autoClose","className","closeButton","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","transition","initData","close_detail_card","error","console","log","updateLaneOfCard","result","cardId","draggableId","laneIdUpdate","laneId","destination","droppableId","offOverFlowY","document","body","style","onOverFlowY","initUserTeam","get","list","users","map","user","value","label","linkAvatar","setState","createCardToLane","item","columnSelectedId","post","isLoading","close_add_card_form","addMemberToCard","dataUser","card_id","userId","card_selected","cards","push","update","removeMemberToCard","user_id","filter","handleOnChangeJobSelected","e","jobSelected","locationName","updateColumn","column","idCards","card","columns","cardIds","limit","isEmpty","maximum","Candidate","isNil","Job","Client","Location","title","interview","Interview","jobId","Users","show_add_card","show_detail_card","laneSelected","data_real","jobs","lanes","show_form_create_interview","show_form_detail_interview","isAddCardNoColumn","open_add_card_form","bind","open_detail_card","onDragEnd","initJob","handleInputUpdateCard","toggleDetailCardAndInterview","createInterview","open_add_card_form_no_column","toggleDetailInterview","TOP_CENTER","toggleFormCreateInterview","target","cardDataDetail","assign","columnId","columnTitle","cloneDeep","source","self","role","index","start","finish","newCardIds","Array","from","splice","newCol","startCardId","newStart","finishCardId","newFinish","componentDidMount","componentWillUnmount","columnOrder","nameColumn","background","CandidateJobs","candidate","arrJob","render","className_wrap_broad","DIRECTOR","mapDispatchToProps","dispatch","mapStateToProps","ownProps","ui","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,SAASC,cAAT,EAAyBC,KAAzB,EAAgCC,IAAhC,QAA4C,gBAA5C;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,MAAMC,GAAG,GAAG,IAAIZ,OAAJ,EAAZ;AAEA,MAAMa,SAAS,GAAGnB,MAAM,CAACoB,GAAI;;;CAA7B;;AAKA,MAAMC,KAAN,SAAoBvB,SAApB,CAA8B;AAC5BwB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmJnBC,UAnJmB,GAmJN,YAAY;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAuB,KAAKC,KAAlC;AACA,YAAMC,OAAO,GAAGF,gBAAgB,CAACE,OAAjC;AACA,YAAM1B,IAAI,GAAG;AACX2B,QAAAA,IAAI,EAAED,OAAO,CAACC,IADH;AAEXC,QAAAA,QAAQ,EAAEF,OAAO,CAACE,QAFP;AAGXC,QAAAA,UAAU,EAAEH,OAAO,CAACG,UAHT;AAIXC,QAAAA,KAAK,EAAEJ,OAAO,CAACI,KAJJ;AAKXC,QAAAA,KAAK,EAAEL,OAAO,CAACK,KALJ;AAMXC,QAAAA,QAAQ,EAAEN,OAAO,CAACM,QANP;AAOXC,QAAAA,YAAY,EAAEP,OAAO,CAACO,YAPX;AAQXC,QAAAA,EAAE,EAAER,OAAO,CAACS,MARD;AASXC,QAAAA,OAAO,EAAEV,OAAO,CAACU,OATN;AAUXC,QAAAA,YAAY,EAAEX,OAAO,CAACW,YAVX;AAWXC,QAAAA,KAAK,EAAEZ,OAAO,CAACY;AAXJ,OAAb;AAaA,YAAMC,MAAM,GAAGf,gBAAgB,CAACgB,EAAhC;;AACA,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,KAAJ,CAAW,cAAaH,MAAO,EAA/B,EAAkCvC,IAAlC,CAAvB;;AACA,YAAIyC,QAAJ,EAAc;AACZ3B,UAAAA,KAAK,eAAC,oBAAC,WAAD;AAAa,YAAA,KAAK,EAAE,yBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAD,EAAoD;AACvDc,YAAAA,QAAQ,EAAEd,KAAK,CAAC6B,QAAN,CAAeC,YAD8B;AAEvDC,YAAAA,SAAS,EAAE,IAF4C;AAGvDC,YAAAA,SAAS,EAAE,aAH4C;AAIvDC,YAAAA,WAAW,EAAE,KAJ0C;AAKvDC,YAAAA,eAAe,EAAE,IALsC;AAMvDC,YAAAA,WAAW,EAAE,IAN0C;AAOvDC,YAAAA,YAAY,EAAE,IAPyC;AAQvDC,YAAAA,GAAG,EAAE,KARkD;AASvDC,YAAAA,gBAAgB,EAAE,IATqC;AAUvDC,YAAAA,SAAS,EAAE,IAV4C;AAWvDC,YAAAA,YAAY,EAAE,IAXyC;AAYvDC,YAAAA,UAAU,EAAExC;AAZ2C,WAApD,CAAL;AAcA,eAAKyC,QAAL;AACA,eAAKC,iBAAL;AACD;AACF,OApBD,CAoBE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KA3LkB;;AAAA,SA0SnBG,gBA1SmB,GA0SA,MAAOC,MAAP,IAAkB;AACnC,YAAMC,MAAM,GAAGD,MAAM,CAACE,WAAtB;AACA,YAAMC,YAAY,GAAG;AACnBC,QAAAA,MAAM,EAAEJ,MAAM,CAACK,WAAP,CAAmBC;AADR,OAArB;;AAGA,UAAI;AACF,cAAMnD,GAAG,CAACyB,KAAJ,CAAW,cAAaqB,MAAO,EAA/B,EAAkCE,YAAlC,CAAN;AACD,OAFD,CAEE,OAAOP,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KApTkB;;AAAA,SAgUnBW,YAhUmB,GAgUJ,MAAM;AACnBC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,YAApB,IAAoC,QAApC;AACD,KAlUkB;;AAAA,SAoUnBC,WApUmB,GAoUL,MAAM;AAClBH,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,YAApB,IAAoC,QAApC;AACD,KAtUkB;;AAAA,SAoanBE,YApamB,GAoaJ,YAAY;AACzB,UAAI;AACF,cAAMjC,QAAQ,GAAG,MAAMxB,GAAG,CAAC0D,GAAJ,CAAS,kBAAT,CAAvB;;AACA,YAAIlC,QAAJ,EAAc;AACZ,gBAAMzC,IAAI,GAAGyC,QAAQ,CAACzC,IAAT,CAAc4E,IAA3B;;AACA,gBAAMC,KAAK,GAAGvE,CAAC,CAACwE,GAAF,CAAM9E,IAAN,EAAa+E,IAAD,IAAU;AAClC,mBAAO;AACLC,cAAAA,KAAK,EAAED,IAAI,CAACvC,EADP;AAELyC,cAAAA,KAAK,EAAEF,IAAI,CAAChD,KAFP;AAGLJ,cAAAA,IAAI,EAAEoD,IAAI,CAACpD,IAHN;AAILuD,cAAAA,UAAU,EAAEH,IAAI,CAACG;AAJZ,aAAP;AAMD,WAPa,CAAd;;AAQA,eAAKC,QAAL,CAAc;AACZN,YAAAA,KAAK,EAAEA;AADK,WAAd;AAGD;AACF,OAhBD,CAgBE,OAAOnB,KAAP,EAAc,CAAE;AACnB,KAtbkB;;AAAA,SAwbnB0B,gBAxbmB,GAwbA,MAAOC,IAAP,IAAgB;AACjC,YAAMrF,IAAI,GAAG,EACX,GAAGqF;AADQ,OAAb;;AAGA,UAAI,KAAK5D,KAAL,CAAW6D,gBAAX,KAAgC,EAApC,EAAwC;AACtCtF,QAAAA,IAAI,CAACkE,MAAL,GAAc,KAAKzC,KAAL,CAAW6D,gBAAzB;AACD;;AACD,UAAI;AACF,cAAM7C,QAAQ,GAAG,MAAMxB,GAAG,CAACsE,IAAJ,CAAU,YAAV,EAAuBvF,IAAvB,CAAvB;;AACA,YAAIyC,QAAJ,EAAc;AACZ3B,UAAAA,KAAK,eAAC,oBAAC,WAAD;AAAa,YAAA,KAAK,EAAE,yBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAD,EAAoD;AACvDc,YAAAA,QAAQ,EAAEd,KAAK,CAAC6B,QAAN,CAAeC,YAD8B;AAEvDC,YAAAA,SAAS,EAAE,IAF4C;AAGvDC,YAAAA,SAAS,EAAE,aAH4C;AAIvDC,YAAAA,WAAW,EAAE,KAJ0C;AAKvDC,YAAAA,eAAe,EAAE,IALsC;AAMvDC,YAAAA,WAAW,EAAE,IAN0C;AAOvDC,YAAAA,YAAY,EAAE,IAPyC;AAQvDC,YAAAA,GAAG,EAAE,KARkD;AASvDC,YAAAA,gBAAgB,EAAE,IATqC;AAUvDC,YAAAA,SAAS,EAAE,IAV4C;AAWvDC,YAAAA,YAAY,EAAE,IAXyC;AAYvDC,YAAAA,UAAU,EAAExC;AAZ2C,WAApD,CAAL;AAcA,eAAKoE,QAAL,CAAc;AACZK,YAAAA,SAAS,EAAE;AADC,WAAd;AAGA,eAAKC,mBAAL;AACA,eAAKjC,QAAL;AACD;AACF,OAvBD,CAuBE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAzdkB;;AAAA,SA0dnBgC,eA1dmB,GA0dD,MAAOC,QAAP,IAAoB;AACpC,UAAI;AACF,cAAMlD,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,KAAJ,CACpB,yBAAwBiD,QAAQ,CAACC,OAAQ,EADrB,EAErB;AAAEC,UAAAA,MAAM,EAAEF,QAAQ,CAACjE,OAAT,CAAiBc;AAA3B,SAFqB,CAAvB;;AAIA,YAAIC,QAAJ,EAAc;AACZ,gBAAM;AAAEzC,YAAAA,IAAF;AAAQ8F,YAAAA;AAAR,cAA0B,KAAKrE,KAArC;AACAzB,UAAAA,IAAI,CAAC+F,KAAL,CAAWJ,QAAQ,CAACC,OAApB,EAA6BlE,OAA7B,CAAqCqD,IAArC,CAA0CiB,IAA1C,CAA+CL,QAAQ,CAACjE,OAAxD;AACAoE,UAAAA,aAAa,CAACpE,OAAd,CAAsBqD,IAAtB,CAA2BiB,IAA3B,CAAgCL,QAAQ,CAACjE,OAAzC;AACA,eAAKyD,QAAL,CAAc;AACZW,YAAAA,aAAa,EAAEA,aADH;AAEZG,YAAAA,MAAM,EAAE,CAAC,KAAKxE,KAAL,CAAWwE,MAFR;AAGZjG,YAAAA,IAAI,EAAEA;AAHM,WAAd;AAKD;AACF,OAfD,CAeE,OAAO0D,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KA7ekB;;AAAA,SA+enBwC,kBA/emB,GA+eE,OAAON,OAAP,EAAgBO,OAAhB,KAA4B;AAC/C,UAAI;AACF,cAAM1D,QAAQ,GAAG,MAAMxB,GAAG,CAACyB,KAAJ,CACpB,gCAA+BkD,OAAQ,EADnB,EAErB;AAAEC,UAAAA,MAAM,EAAEM;AAAV,SAFqB,CAAvB;;AAIA,YAAI1D,QAAJ,EAAc;AACZ,gBAAM;AAAEzC,YAAAA,IAAF;AAAQ8F,YAAAA;AAAR,cAA0B,KAAKrE,KAArC;AACAzB,UAAAA,IAAI,CAAC+F,KAAL,CAAWH,OAAX,EAAoBlE,OAApB,CAA4BqD,IAA5B,GAAmCzE,CAAC,CAAC8F,MAAF,CACjCpG,IAAI,CAAC+F,KAAL,CAAWH,OAAX,EAAoBlE,OAApB,CAA4BqD,IADK,EAEhCA,IAAD,IAAUA,IAAI,CAACvC,EAAL,KAAY2D,OAFW,CAAnC;AAIAL,UAAAA,aAAa,CAACpE,OAAd,CAAsBqD,IAAtB,GAA6BzE,CAAC,CAAC8F,MAAF,CAC3BN,aAAa,CAACpE,OAAd,CAAsBqD,IADK,EAE1BA,IAAD,IAAUA,IAAI,CAACvC,EAAL,KAAY2D,OAFK,CAA7B;AAIA,eAAKhB,QAAL,CAAc;AAAEnF,YAAAA,IAAI,EAAEA,IAAR;AAAc8F,YAAAA,aAAa,EAAEA;AAA7B,WAAd;AACD;AACF,OAjBD,CAiBE,OAAOpC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KApgBkB;;AAAA,SAsgBnB2C,yBAtgBmB,GAsgBUC,CAAD,IAAO;AACjC,YAAMtG,IAAI,GAAG,KAAKyB,KAAL,CAAWqE,aAAxB;AACA9F,MAAAA,IAAI,CAAC0B,OAAL,CAAa6E,WAAb,GAA2BD,CAA3B;AACAtG,MAAAA,IAAI,CAAC0B,OAAL,CAAaU,OAAb,GAAuBkE,CAAC,CAACtB,KAAzB;AACAhF,MAAAA,IAAI,CAAC0B,OAAL,CAAaY,KAAb,GAAqBgE,CAAC,CAAC9D,EAAvB;AACAxC,MAAAA,IAAI,CAAC0B,OAAL,CAAaG,UAAb,GAA0ByE,CAAC,CAACzE,UAA5B;AACA7B,MAAAA,IAAI,CAAC0B,OAAL,CAAaM,QAAb,GAAwBsE,CAAC,CAACE,YAA1B;AACA7C,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB5D,IAApB;AACA,WAAKmF,QAAL,CAAc;AACZ3D,QAAAA,gBAAgB,EAAExB;AADN,OAAd;AAGD,KAjhBkB;;AAAA,SAmhBnByG,YAnhBmB,GAmhBJ,CAACV,KAAD,EAAQW,MAAR,KAAmB;AAChC,YAAM;AAAE1G,QAAAA;AAAF,UAAW,KAAKyB,KAAtB;;AACA,YAAMkF,OAAO,GAAGrG,CAAC,CAACwE,GAAF,CAAMiB,KAAN,EAAca,IAAD,IAAUA,IAAI,CAACpE,EAA5B,CAAhB;;AACAxC,MAAAA,IAAI,CAAC6G,OAAL,CAAaH,MAAM,CAAClE,EAApB,EAAwBsE,OAAxB,CAAgCd,IAAhC,CAAqC,GAAGW,OAAxC;AACA3G,MAAAA,IAAI,CAAC6G,OAAL,CAAaH,MAAM,CAAClE,EAApB,EAAwBuE,KAAxB,GAAgCL,MAAM,CAACK,KAAP,GAAe,CAA/C;;AACA,UAAIzG,CAAC,CAAC0G,OAAF,CAAUjB,KAAV,CAAJ,EAAsB;AACpB/F,QAAAA,IAAI,CAAC6G,OAAL,CAAaH,MAAM,CAAClE,EAApB,EAAwByE,OAAxB,GAAkC,IAAlC;AACD;;AACD,WAAK,MAAML,IAAX,IAAmBb,KAAnB,EAA0B;AACxB,cAAMhC,MAAM,GAAI,GAAE6C,IAAI,CAACpE,EAAG,EAA1B;AACAxC,QAAAA,IAAI,CAAC+F,KAAL,CAAWhC,MAAX,IAAqB;AACnBvB,UAAAA,EAAE,EAAEuB,MADe;AAEnBrC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAEiF,IAAI,CAACM,SAAL,CAAevF,IADd;AAEPC,YAAAA,QAAQ,EAAEgF,IAAI,CAAChF,QAFR;AAGPC,YAAAA,UAAU,EAAE,CAACvB,CAAC,CAAC6G,KAAF,CAAQP,IAAI,CAACQ,GAAL,CAASC,MAAjB,CAAD,GAA4BT,IAAI,CAACQ,GAAL,CAASC,MAAT,CAAgB1F,IAA5C,GAAmD,EAHxD;AAIPG,YAAAA,KAAK,EAAE8E,IAAI,CAACM,SAAL,CAAepF,KAJf;AAKPC,YAAAA,KAAK,EAAE6E,IAAI,CAACM,SAAL,CAAenF,KALf;AAMPC,YAAAA,QAAQ,EAAE4E,IAAI,CAACQ,GAAL,CAASE,QAAT,CAAkB3F,IANrB;AAOPM,YAAAA,YAAY,EAAE2E,IAAI,CAAC3E,YAPZ;AAQPE,YAAAA,MAAM,EAAEyE,IAAI,CAAC1E,EARN;AASPE,YAAAA,OAAO,EAAEwE,IAAI,CAACQ,GAAL,CAASG,KATX;AAUPlF,YAAAA,YAAY,EAAEuE,IAAI,CAACvE,YAVZ;AAWPmF,YAAAA,SAAS,EAAEZ,IAAI,CAACa,SAXT;AAYPnF,YAAAA,KAAK,EAAEsE,IAAI,CAACc,KAZL;AAaPnB,YAAAA,WAAW,EAAE;AACXvB,cAAAA,KAAK,EAAE4B,IAAI,CAACQ,GAAL,CAASG,KADL;AAEXtC,cAAAA,KAAK,EAAE2B,IAAI,CAACQ,GAAL,CAASG;AAFL,aAbN;AAiBPxC,YAAAA,IAAI,EAAEzE,CAAC,CAACwE,GAAF,CAAM8B,IAAI,CAACe,KAAX,EAAmB5C,IAAD,IAAU;AAChC,qBAAO;AACLpD,gBAAAA,IAAI,EAAEoD,IAAI,CAACpD,IADN;AAELa,gBAAAA,EAAE,EAAEuC,IAAI,CAACvC,EAFJ;AAGLT,gBAAAA,KAAK,EAAEgD,IAAI,CAAChD,KAHP;AAILmD,gBAAAA,UAAU,EAAEH,IAAI,CAACG;AAJZ,eAAP;AAMD,aAPK;AAjBC;AAFU,SAArB;AA6BD;;AACD,WAAKC,QAAL,CAAc;AACZnF,QAAAA,IAAI,EAAEA;AADM,OAAd;AAGD,KA9jBkB;;AAEjB,SAAKyB,KAAL,GAAa;AACXmG,MAAAA,aAAa,EAAE,KADJ;AAEXC,MAAAA,gBAAgB,EAAE,KAFP;AAGX/B,MAAAA,aAAa,EAAE;AACbpE,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,EADC;AAEPC,UAAAA,QAAQ,EAAE,EAFH;AAGPC,UAAAA,UAAU,EAAE,EAHL;AAIPC,UAAAA,KAAK,EAAE,EAJA;AAKPC,UAAAA,KAAK,EAAE,EALA;AAMPC,UAAAA,QAAQ,EAAE,EANH;AAOPC,UAAAA,YAAY,EAAE,EAPP;AAQPE,UAAAA,MAAM,EAAE,EARD;AASPC,UAAAA,OAAO,EAAE,EATF;AAUPE,UAAAA,KAAK,EAAE,EAVA;AAWPD,UAAAA,YAAY,EAAE,EAXP;AAYP0C,UAAAA,IAAI,EAAE,EAZC;AAaPwB,UAAAA,WAAW,EAAE,EAbN;AAcPuB,UAAAA,YAAY,EAAE;AAdP;AADI,OAHJ;AAqBXtG,MAAAA,gBAAgB,EAAE;AAChBE,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAE,EADC;AAEPC,UAAAA,QAAQ,EAAE,EAFH;AAGPC,UAAAA,UAAU,EAAE,EAHL;AAIPC,UAAAA,KAAK,EAAE,EAJA;AAKPC,UAAAA,KAAK,EAAE,EALA;AAMPC,UAAAA,QAAQ,EAAE,EANH;AAOPC,UAAAA,YAAY,EAAE,EAPP;AAQPE,UAAAA,MAAM,EAAE,EARD;AASPC,UAAAA,OAAO,EAAE,EATF;AAUPE,UAAAA,KAAK,EAAE,EAVA;AAWPD,UAAAA,YAAY,EAAE,EAXP;AAYP0C,UAAAA,IAAI,EAAE,EAZC;AAaPwB,UAAAA,WAAW,EAAE,EAbN;AAcPuB,UAAAA,YAAY,EAAE;AAdP;AADO,OArBP;AAwCX9H,MAAAA,IAAI,EAAE,EAxCK;AAyCX+H,MAAAA,SAAS,EAAE,EAzCA;AA0CXC,MAAAA,IAAI,EAAE,EA1CK;AA2CXnD,MAAAA,KAAK,EAAE,EA3CI;AA4CXoD,MAAAA,KAAK,EAAE,EA5CI;AA6CXzC,MAAAA,SAAS,EAAE,IA7CA;AA8CXF,MAAAA,gBAAgB,EAAE,EA9CP;AA+CXW,MAAAA,MAAM,EAAE,KA/CG;AAgDXiC,MAAAA,0BAA0B,EAAE,KAhDjB;AAiDXC,MAAAA,0BAA0B,EAAE,KAjDjB;AAkDXC,MAAAA,iBAAiB,EAAE;AAlDR,KAAb;AAoDA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAK7C,mBAAL,GAA2B,KAAKA,mBAAL,CAAyB6C,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAK7E,iBAAL,GAAyB,KAAKA,iBAAL,CAAuB6E,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAK9E,QAAL,GAAgB,KAAKA,QAAL,CAAc8E,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKI,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BJ,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKK,4BAAL,GAAoC,KAAKA,4BAAL,CAAkCL,IAAlC,CAClC,IADkC,CAApC;AAGA,SAAKM,eAAL,GAAuB,KAAKA,eAAL,CAAqBN,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKO,4BAAL,GAAoC,KAAKA,4BAAL,CAAkCP,IAAlC,CAClC,IADkC,CAApC;AAGA,SAAKQ,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BR,IAA3B,CAAgC,IAAhC,CAA7B;AACD;;AAED,QAAMM,eAAN,CAAsB5I,IAAtB,EAA4B;AAC1B,QAAI;AACF,YAAMyC,QAAQ,GAAG,MAAMxB,GAAG,CAACsE,IAAJ,CAAU,2BAAV,EAAsCvF,IAAtC,CAAvB;;AACA,UAAIyC,QAAJ,EAAc;AACZ3B,QAAAA,KAAK,eAAC,oBAAC,WAAD;AAAa,UAAA,KAAK,EAAE,8BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAD,EAAyD;AAC5Dc,UAAAA,QAAQ,EAAEd,KAAK,CAAC6B,QAAN,CAAeoG,UADmC;AAE5DlG,UAAAA,SAAS,EAAE,IAFiD;AAG5DC,UAAAA,SAAS,EAAE,aAHiD;AAI5DC,UAAAA,WAAW,EAAE,KAJ+C;AAK5DC,UAAAA,eAAe,EAAE,IAL2C;AAM5DC,UAAAA,WAAW,EAAE,IAN+C;AAO5DC,UAAAA,YAAY,EAAE,IAP8C;AAQ5DC,UAAAA,GAAG,EAAE,KARuD;AAS5DC,UAAAA,gBAAgB,EAAE,IAT0C;AAU5DC,UAAAA,SAAS,EAAE,IAViD;AAW5DC,UAAAA,YAAY,EAAE,IAX8C;AAY5DC,UAAAA,UAAU,EAAExC;AAZgD,SAAzD,CAAL;AAeA,aAAKoE,QAAL,CAAc;AACZK,UAAAA,SAAS,EAAE;AADC,SAAd;AAGA,aAAKmD,4BAAL;AACA,aAAKlF,iBAAL;AACA,aAAKD,QAAL;AACD;AACF,KAzBD,CAyBE,OAAOE,KAAP,EAAc;AACd5C,MAAAA,KAAK,eACH,oBAAC,WAAD;AAAa,QAAA,KAAK,EAAE,gCAApB;AAAsD,QAAA,IAAI,EAAE,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,EAEH;AACEc,QAAAA,QAAQ,EAAEd,KAAK,CAAC6B,QAAN,CAAeoG,UAD3B;AAEElG,QAAAA,SAAS,EAAE,IAFb;AAGEC,QAAAA,SAAS,EAAE,aAHb;AAIEC,QAAAA,WAAW,EAAE,KAJf;AAKEC,QAAAA,eAAe,EAAE,IALnB;AAMEC,QAAAA,WAAW,EAAE,IANf;AAOEC,QAAAA,YAAY,EAAE,IAPhB;AAQEC,QAAAA,GAAG,EAAE,KARP;AASEC,QAAAA,gBAAgB,EAAE,IATpB;AAUEC,QAAAA,SAAS,EAAE,IAVb;AAWEC,QAAAA,YAAY,EAAE,IAXhB;AAYEC,QAAAA,UAAU,EAAExC;AAZd,OAFG,CAAL;AAiBD;AACF;;AAED4H,EAAAA,4BAA4B,GAAG;AAC7B,SAAKxD,QAAL,CAAc;AACZ0C,MAAAA,gBAAgB,EAAE,CAAC,KAAKpG,KAAL,CAAWoG,gBADlB;AAEZK,MAAAA,0BAA0B,EAAE,CAAC,KAAKzG,KAAL,CAAWyG;AAF5B,KAAd;AAID;;AAEDY,EAAAA,qBAAqB,GAAG;AACtB,SAAK3D,QAAL,CAAc;AACZ0C,MAAAA,gBAAgB,EAAE,CAAC,KAAKpG,KAAL,CAAWoG,gBADlB;AAEZM,MAAAA,0BAA0B,EAAE,CAAC,KAAK1G,KAAL,CAAW0G;AAF5B,KAAd;AAID;;AAEDa,EAAAA,yBAAyB,GAAG;AAC1B,SAAKvH,KAAL,CAAW;AACTyG,MAAAA,0BAA0B,EAAE,CAAC,KAAKzG,KAAL,CAAWyG;AAD/B,KAAX;AAGD;;AAEDQ,EAAAA,qBAAqB,CAACpC,CAAD,EAAI;AACvB,QAAI3E,IAAI,GAAG2E,CAAC,CAAC2C,MAAF,CAAStH,IAApB;AACA,QAAIqD,KAAK,GAAGsB,CAAC,CAAC2C,MAAF,CAASjE,KAArB;AACA,UAAMkE,cAAc,GAAG,KAAKzH,KAAL,CAAWD,gBAAlC;;AACAlB,IAAAA,CAAC,CAAC6I,MAAF,CAASD,cAAc,CAACxH,OAAxB,EAAiC;AAAE,OAACC,IAAD,GAAQqD;AAAV,KAAjC;;AACA,SAAKG,QAAL,CAAc;AAAE3D,MAAAA,gBAAgB,EAAE0H;AAApB,KAAd;AACD;;AA4CDb,EAAAA,kBAAkB,CAACe,QAAD,EAAW;AAC3B;AACA,SAAKjE,QAAL,CAAc;AACZG,MAAAA,gBAAgB,EAAE8D,QADN;AAEZxB,MAAAA,aAAa,EAAE;AAFH,KAAd;AAID;;AAEDiB,EAAAA,4BAA4B,GAAG;AAC7B;AACA,SAAK1D,QAAL,CAAc;AACZiD,MAAAA,iBAAiB,EAAE,IADP;AAEZR,MAAAA,aAAa,EAAE;AAFH,KAAd;AAID;;AAEDnC,EAAAA,mBAAmB,GAAG;AACpB;AACA,SAAKN,QAAL,CAAc;AACZiD,MAAAA,iBAAiB,EAAE,KADP;AAEZ9C,MAAAA,gBAAgB,EAAE,EAFN;AAGZsC,MAAAA,aAAa,EAAE;AAHH,KAAd;AAKD;;AAEDW,EAAAA,gBAAgB,CAACxE,MAAD,EAASsF,WAAT,EAAsB;AACpC,UAAMzC,IAAI,GAAG,KAAKnF,KAAL,CAAWzB,IAAX,CAAgB+F,KAAhB,CAAsBhC,MAAtB,CAAb;AACA6C,IAAAA,IAAI,CAACW,KAAL,GAAa8B,WAAb;AACA,SAAKlE,QAAL,CAAc;AACZ0C,MAAAA,gBAAgB,EAAE,IADN;AAEZ/B,MAAAA,aAAa,EAAExF,CAAC,CAACgJ,SAAF,CAAY1C,IAAZ,CAFH;AAGZpF,MAAAA,gBAAgB,EAAElB,CAAC,CAACgJ,SAAF,CAAY1C,IAAZ;AAHN,KAAd;AAKD;;AAEDnD,EAAAA,iBAAiB,GAAG;AAClB,SAAK0B,QAAL,CAAc;AACZ0C,MAAAA,gBAAgB,EAAE;AADN,KAAd;AAGD;;AAEDW,EAAAA,SAAS,CAAC1E,MAAD,EAAS;AAChB,UAAM;AAAEK,MAAAA,WAAF;AAAeoF,MAAAA,MAAf;AAAuBvF,MAAAA;AAAvB,QAAuCF,MAA7C;AACA,QAAI0F,IAAI,GAAG,IAAX;;AACA,QAAI,CAACrF,WAAD,IAAgB,KAAK7C,KAAL,CAAWmI,IAAX,KAAoB,UAAxC,EAAoD;AAClD;AACD;;AACD,QACEtF,WAAW,CAACC,WAAZ,KAA4BmF,MAAM,CAACvF,WAAnC,IACAG,WAAW,CAACuF,KAAZ,KAAsBH,MAAM,CAACG,KAF/B,EAGE;AACA;AACD;;AACD,UAAMC,KAAK,GAAG,KAAKlI,KAAL,CAAWzB,IAAX,CAAgB6G,OAAhB,CAAwB0C,MAAM,CAACnF,WAA/B,CAAd,CAZgB,CAY2C;;AAC3D,UAAMwF,MAAM,GAAG,KAAKnI,KAAL,CAAWzB,IAAX,CAAgB6G,OAAhB,CAAwB1C,WAAW,CAACC,WAApC,CAAf,CAbgB,CAaiD;;AACjE,QAAIuF,KAAK,KAAKC,MAAd,EAAsB;AACpB;AACA,YAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAAC7C,OAAjB,CAAnB;AACA+C,MAAAA,UAAU,CAACG,MAAX,CAAkBT,MAAM,CAACG,KAAzB,EAAgC,CAAhC;AACAG,MAAAA,UAAU,CAACG,MAAX,CAAkB7F,WAAW,CAACuF,KAA9B,EAAqC,CAArC,EAAwC1F,WAAxC;AAEA,YAAMiG,MAAM,GAAG,EACb,GAAGN,KADU;AAEb7C,QAAAA,OAAO,EAAE+C;AAFI,OAAf;AAKA,YAAM7J,IAAI,GAAG,EACX,GAAGwJ,IAAI,CAAC/H,KAAL,CAAWzB,IADH;AAEX6G,QAAAA,OAAO,EAAE,EACP,GAAG2C,IAAI,CAAC/H,KAAL,CAAWzB,IAAX,CAAgB6G,OADZ;AAEP,WAACoD,MAAM,CAACzH,EAAR,GAAayH;AAFN;AAFE,OAAb;AAOA,WAAK9E,QAAL,CAAc;AACZnF,QAAAA,IAAI,EAAEA;AADM,OAAd;AAGD,KArBD,MAqBO;AACL;AACA,YAAMkK,WAAW,GAAGJ,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAAC7C,OAAjB,CAApB,CAFK,CAE0C;;AAC/CoD,MAAAA,WAAW,CAACF,MAAZ,CAAmBT,MAAM,CAACG,KAA1B,EAAiC,CAAjC,EAHK,CAGgC;;AACrC,YAAMS,QAAQ,GAAG,EACf;AACA,WAAGR,KAFY;AAGf7C,QAAAA,OAAO,EAAEoD;AAHM,OAAjB;AAMA,YAAME,YAAY,GAAGN,KAAK,CAACC,IAAN,CAAWH,MAAM,CAAC9C,OAAlB,CAArB,CAVK,CAU4C;;AACjDsD,MAAAA,YAAY,CAACJ,MAAb,CAAoB7F,WAAW,CAACuF,KAAhC,EAAuC,CAAvC,EAA0C1F,WAA1C,EAXK,CAWmD;;AACxD,YAAMqG,SAAS,GAAG,EAChB;AACA,WAAGT,MAFa;AAGhB9C,QAAAA,OAAO,EAAEsD;AAHO,OAAlB;AAKA,YAAMpK,IAAI,GAAG,EACX;AACA,WAAGwJ,IAAI,CAAC/H,KAAL,CAAWzB,IAFH;AAGX6G,QAAAA,OAAO,EAAE,EACP,GAAG2C,IAAI,CAAC/H,KAAL,CAAWzB,IAAX,CAAgB6G,OADZ;AAEP,WAACsD,QAAQ,CAAC3H,EAAV,GAAe2H,QAFR;AAGP,WAACE,SAAS,CAAC7H,EAAX,GAAgB6H;AAHT;AAHE,OAAb;AASA,WAAKlF,QAAL,CAAc;AACZnF,QAAAA,IAAI,EAAEA;AADM,OAAd;AAGD;;AACD,SAAK6D,gBAAL,CAAsBC,MAAtB;AACD;;AAaDwG,EAAAA,iBAAiB,GAAG;AAClB,SAAK9G,QAAL;AACA,SAAKiF,OAAL;AACA,SAAK/D,YAAL;AACA,SAAKL,YAAL;AACD;;AAEDkG,EAAAA,oBAAoB,GAAG;AACrB,SAAK9F,WAAL;AACD;;AAUD,QAAMjB,QAAN,GAAiB;AACf,UAAMxD,IAAI,GAAG;AACX6G,MAAAA,OAAO,EAAE,EADE;AAEXd,MAAAA,KAAK,EAAE,EAFI;AAGXyE,MAAAA,WAAW,EAAE;AAHF,KAAb;;AAKA,QAAI;AACF,YAAMvC,KAAK,GAAG,MAAMhH,GAAG,CAAC0D,GAAJ,CAAS,sBAAT,CAApB;AACA,YAAMkC,OAAO,GAAGoB,KAAK,CAACjI,IAAN,CAAW4E,IAA3B;;AACA,WAAK,MAAM8B,MAAX,IAAqBG,OAArB,EAA8B;AAC5B7G,QAAAA,IAAI,CAAC6G,OAAL,CAAc,GAAEH,MAAM,CAAClE,EAAG,EAA1B,IAA+B;AAC7BA,UAAAA,EAAE,EAAG,GAAEkE,MAAM,CAAClE,EAAG,EADY;AAE7B+E,UAAAA,KAAK,EAAEb,MAAM,CAAC+D,UAFe;AAG7BC,UAAAA,UAAU,EAAEhE,MAAM,CAACgE,UAHU;AAI7B3D,UAAAA,KAAK,EAAE,CAJsB;AAK7BE,UAAAA,OAAO,EAAE,KALoB;AAM7BH,UAAAA,OAAO,EAAExG,CAAC,CAACwE,GAAF,CAAM4B,MAAM,CAACiE,aAAb,EAA6BC,SAAD,IAAeA,SAAS,CAACpI,EAArD;AANoB,SAA/B;AAQA,cAAMuD,KAAK,GAAGW,MAAM,CAACiE,aAArB;;AACA,aAAK,MAAM/D,IAAX,IAAmBb,KAAnB,EAA0B;AACxB,gBAAMhC,MAAM,GAAI,GAAE6C,IAAI,CAACpE,EAAG,EAA1B;AACAxC,UAAAA,IAAI,CAAC+F,KAAL,CAAWhC,MAAX,IAAqB;AACnBvB,YAAAA,EAAE,EAAEuB,MADe;AAEnBrC,YAAAA,OAAO,EAAE;AACPC,cAAAA,IAAI,EAAEiF,IAAI,CAACM,SAAL,CAAevF,IADd;AAEPC,cAAAA,QAAQ,EAAEgF,IAAI,CAAChF,QAFR;AAGPC,cAAAA,UAAU,EAAE,CAACvB,CAAC,CAAC6G,KAAF,CAAQP,IAAI,CAACQ,GAAL,CAASC,MAAjB,CAAD,GAA4BT,IAAI,CAACQ,GAAL,CAASC,MAAT,CAAgB1F,IAA5C,GAAmD,EAHxD;AAIPG,cAAAA,KAAK,EAAE8E,IAAI,CAACM,SAAL,CAAepF,KAJf;AAKPC,cAAAA,KAAK,EAAE6E,IAAI,CAACM,SAAL,CAAenF,KALf;AAMPC,cAAAA,QAAQ,EAAE4E,IAAI,CAACQ,GAAL,CAASE,QAAT,CAAkB3F,IANrB;AAOPM,cAAAA,YAAY,EAAE2E,IAAI,CAAC3E,YAPZ;AAQPE,cAAAA,MAAM,EAAEyE,IAAI,CAAC1E,EARN;AASPE,cAAAA,OAAO,EAAEwE,IAAI,CAACQ,GAAL,CAASG,KATX;AAUPlF,cAAAA,YAAY,EAAEuE,IAAI,CAACvE,YAVZ;AAWPmF,cAAAA,SAAS,EAAEZ,IAAI,CAACa,SAXT;AAYPnF,cAAAA,KAAK,EAAEsE,IAAI,CAACc,KAZL;AAaPnB,cAAAA,WAAW,EAAE;AACXvB,gBAAAA,KAAK,EAAE4B,IAAI,CAACQ,GAAL,CAASG,KADL;AAEXtC,gBAAAA,KAAK,EAAE2B,IAAI,CAACQ,GAAL,CAASG;AAFL,eAbN;AAiBPxC,cAAAA,IAAI,EAAEzE,CAAC,CAACwE,GAAF,CAAM8B,IAAI,CAACe,KAAX,EAAmB5C,IAAD,IAAU;AAChC,uBAAO;AACLpD,kBAAAA,IAAI,EAAEoD,IAAI,CAACpD,IADN;AAELa,kBAAAA,EAAE,EAAEuC,IAAI,CAACvC,EAFJ;AAGLT,kBAAAA,KAAK,EAAEgD,IAAI,CAAChD,KAHP;AAILmD,kBAAAA,UAAU,EAAEH,IAAI,CAACG;AAJZ,iBAAP;AAMD,eAPK;AAjBC;AAFU,WAArB;AA6BD;AACF;;AACDlF,MAAAA,IAAI,CAACwK,WAAL,GAAmBlK,CAAC,CAACwE,GAAF,CAAM+B,OAAN,EAAgBH,MAAD,IAAa,GAAEA,MAAM,CAAClE,EAAG,EAAxC,CAAnB;AACA,WAAK2C,QAAL,CAAc;AACZnF,QAAAA,IAAI,EAAEA,IADM;AAEZ+H,QAAAA,SAAS,EAAE/H,IAFC;AAGZiI,QAAAA,KAAK,EAAE3H,CAAC,CAACwE,GAAF,CAAM+B,OAAN,EAAgBH,MAAD,IAAY;AAChC,iBAAO;AACL1B,YAAAA,KAAK,EAAE0B,MAAM,CAAClE,EADT;AAELyC,YAAAA,KAAK,EAAEyB,MAAM,CAAC+D;AAFT,WAAP;AAID,SALM;AAHK,OAAd;AAUD,KAzDD,CAyDE,OAAO/G,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AACD,SAAKyB,QAAL,CAAc;AACZK,MAAAA,SAAS,EAAE;AADC,KAAd;AAGD;;AAED,QAAMiD,OAAN,GAAgB;AACd,QAAI;AACF,YAAMhG,QAAQ,GAAG,MAAMxB,GAAG,CAAC0D,GAAJ,CAAS,wBAAT,CAAvB;;AACA,UAAIlC,QAAJ,EAAc;AACZ,cAAMzC,IAAI,GAAGyC,QAAQ,CAACzC,IAAT,CAAc6K,MAA3B;;AACA,cAAM7C,IAAI,GAAG1H,CAAC,CAACwE,GAAF,CAAM9E,IAAN,EAAaqF,IAAD,IAAU;AACjC,iBAAO;AACL7C,YAAAA,EAAE,EAAE6C,IAAI,CAAC7C,EADJ;AAELwC,YAAAA,KAAK,EAAEK,IAAI,CAACkC,KAFP;AAGLtC,YAAAA,KAAK,EAAEI,IAAI,CAACkC,KAHP;AAIL1F,YAAAA,UAAU,EAAE,CAACvB,CAAC,CAAC6G,KAAF,CAAQ9B,IAAI,CAACgC,MAAb,CAAD,GAAwBhC,IAAI,CAACgC,MAAL,CAAY1F,IAApC,GAA2C,EAJlD;AAKL6E,YAAAA,YAAY,EAAE,CAAClG,CAAC,CAAC6G,KAAF,CAAQ9B,IAAI,CAACiC,QAAL,CAAc3F,IAAtB,CAAD,GACV0D,IAAI,CAACiC,QAAL,CAAc3F,IADJ,GAEV;AAPC,WAAP;AASD,SAVY,CAAb;;AAWA,aAAKwD,QAAL,CAAc;AAAE6C,UAAAA,IAAI,EAAEA;AAAR,SAAd;AACD;AACF,KAjBD,CAiBE,OAAOtE,KAAP,EAAc,CAAE;AACnB;;AA8JDoH,EAAAA,MAAM,GAAG;AACP,wBACE;AACE,MAAA,EAAE,EAAC,YADL;AAEE,MAAA,SAAS,EAAG,wCAAuC,KAAKxJ,KAAL,CAAWyJ,oBAAqB,QAFrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE,oBAAC,cAAD;AAAgB,MAAA,YAAY,MAA5B;AAA6B,MAAA,SAAS,EAAE,IAAxC;AAA8C,MAAA,GAAG,EAAE,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKG,KAAKtJ,KAAL,CAAW+D,SAAX,gBAAuB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,GAAsC,IALzC,eAME,oBAAC,OAAD;AACE,MAAA,IAAI,EAAE,KAAK/D,KAAL,CAAWuG,IADnB;AAEE,MAAA,KAAK,EAAE,KAAKvG,KAAL,CAAWwG,KAFpB;AAGE,MAAA,IAAI,EAAE,KAAKxG,KAAL,CAAWmG,aAHnB;AAIE,MAAA,gBAAgB,EAAE,KAAKxC,gBAJzB;AAKE,MAAA,MAAM,EAAE,KAAKK,mBALf;AAME,MAAA,iBAAiB,EAAE,KAAKhE,KAAL,CAAW2G,iBANhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAcE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,KAAK3G,KAAL,CAAWoG,gBADnB;AAEE,MAAA,MAAM,EAAE,KAAKpE,iBAFf;AAGE,MAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWqE,aAHnB;AAIE,MAAA,WAAW,EAAE,KAAKrE,KAAL,CAAWD,gBAJ1B;AAKE,MAAA,MAAM,EAAE,KAAKkH,qBAAL,CAA2BJ,IAA3B,CAAgC,IAAhC,CALV;AAME,MAAA,UAAU,EAAE,KAAK/G,UANnB;AAOE,MAAA,yBAAyB,EAAE,KAAK8E,yBAPlC;AAQE,MAAA,IAAI,EAAE,KAAK5E,KAAL,CAAWuG,IARnB;AASE,MAAA,kBAAkB,EAAE,KAAK9B,kBAT3B;AAUE,MAAA,KAAK,EAAE,KAAKzE,KAAL,CAAWoD,KAVpB;AAWE,MAAA,OAAO,EAAE,KAAKpD,KAAL,CAAWwE,MAXtB;AAYE,MAAA,eAAe,EAAE,KAAKP,eAZxB;AAaE,MAAA,4BAA4B,EAAE,KAAKiD,4BAbrC;AAcE,MAAA,qBAAqB,EAAE,KAAKG,qBAd9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,eA+BE,oBAAC,mBAAD;AACE,MAAA,IAAI,EAAE,KAAKrH,KAAL,CAAWyG,0BADnB;AAEE,MAAA,IAAI,EAAE,KAAKzG,KAAL,CAAWqE,aAFnB;AAGE,MAAA,eAAe,EAAE,KAAK8C,eAHxB;AAIE,MAAA,MAAM,EAAE,KAAKD,4BAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BF,eAqCE,oBAAC,mBAAD;AACE,MAAA,IAAI,EAAE,KAAKlH,KAAL,CAAW0G,0BADnB;AAEE,MAAA,IAAI,EAAE,KAAK1G,KAAL,CAAWqE,aAFnB;AAGE,MAAA,MAAM,EAAE,KAAKgD,qBAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArCF,eA0CE;AACE,MAAA,SAAS,EAAC,8CADZ;AAEE,MAAA,EAAE,EAAC,cAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,4EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAa,MAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,eAME;AAAI,MAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CANF,CADF,CADF,CADF,eAeE;AAAK,MAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CAJF,CA1CF,eAgEE;AAAK,MAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKrH,KAAL,CAAWzB,IAAX,CAAgBwK,WAAhB,gBACC,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKhC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK/G,KAAL,CAAWzB,IAAX,CAAgBwK,WAAhB,CAA4B1F,GAA5B,CAAgC,CAACsE,QAAD,EAAWM,KAAX,KAAqB;AACpD,YAAMhD,MAAM,GAAG,KAAKjF,KAAL,CAAWzB,IAAX,CAAgB6G,OAAhB,CAAwBuC,QAAxB,CAAf;AACA,YAAMrD,KAAK,GAAGW,MAAM,CAACI,OAAP,CAAehC,GAAf,CAAoBf,MAAD,IAAY;AAC3C,eAAO,KAAKtC,KAAL,CAAWzB,IAAX,CAAgB+F,KAAhB,CAAsBhC,MAAtB,CAAP;AACD,OAFa,CAAd;AAGA,0BACE,oBAAC,MAAD;AACE,QAAA,KAAK,EAAE2F,KADT;AAEE,QAAA,GAAG,EAAEN,QAFP;AAGE,QAAA,MAAM,EAAE1C,MAHV;AAIE,QAAA,KAAK,EAAEX,KAJT;AAKE,QAAA,KAAK,EAAE,KAAKtE,KAAL,CAAWoD,KALpB;AAME,QAAA,kBAAkB,EAAE,KAAKwD,kBAAL,CAAwBC,IAAxB,CAClB,IADkB,EAElBc,QAFkB,CANtB;AAUE,QAAA,gBAAgB,EAAE,KAAKb,gBAVzB;AAWE,QAAA,eAAe,EAAE,KAAK7C,eAXxB;AAYE,QAAA,kBAAkB,EAAE,KAAKQ,kBAZ3B;AAaE,QAAA,YAAY,EAAE,KAAKO,YAbrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAiBD,KAtBA,CADH,CADF,CADD,GA6BC,EA9BJ,CADF,CAhEF,EAoGG,KAAKnF,KAAL,CAAWmI,IAAX,KAAoB9I,QAAQ,CAACqK,QAA7B,gBACC;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,kCAFZ;AAGE,MAAA,OAAO,EAAE,KAAKnC,4BAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAM,MAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WALF,CADD,GASC,EA7GJ,CADF;AAkHD;;AAprB2B;;AAurB9B,MAAMoC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO,EAAP;AACD,CAFD;;AAGA,MAAMC,eAAe,GAAG,CAAC1J,KAAD,EAAQ2J,QAAR,KAAqB;AAC3C,SAAO;AACLL,IAAAA,oBAAoB,EAAEtJ,KAAK,CAAC4J,EAAN,CAASN,oBAD1B;AAELtB,IAAAA,IAAI,EAAEhI,KAAK,CAAC6J,IAAN,CAAW7B;AAFZ,GAAP;AAID,CALD;;AAOA,eAAejJ,OAAO,CAAC2K,eAAD,CAAP,CAAyB/J,KAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport data from \"./data.js\";\nimport Column from \"./Column.js\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport AddCard from \"./AddCard.js\";\nimport DetailCard from \"./DetailCard.js\";\nimport Network from \"../../Service/Network.js\";\nimport _ from \"lodash\";\nimport Fbloader from \"../libs/PageLoader/fbloader.js\";\nimport { connect } from \"react-redux\";\nimport CreateInterviewCard from \"./CreateInterviewCard.js\";\nimport toastr from \"toastr\";\nimport roleName from \"../../utils/const\";\nimport DetailInterviewCard from \"./DetailInterviewCard.js\";\nimport { ToastContainer, toast, Zoom } from \"react-toastify\";\nimport CustomToast from \"../common/CustomToast\";\n\nconst api = new Network();\n\nconst Container = styled.div`\n  display: flex;\n  overflow-x: auto;\n`;\n\nclass Broad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show_add_card: false,\n      show_detail_card: false,\n      card_selected: {\n        content: {\n          name: \"\",\n          position: \"\",\n          clientName: \"\",\n          phone: \"\",\n          email: \"\",\n          location: \"\",\n          approachDate: \"\",\n          linkCv: \"\",\n          nameJob: \"\",\n          idJob: \"\",\n          noteApproach: \"\",\n          user: [],\n          jobSelected: {},\n          laneSelected: {},\n        },\n      },\n      card_data_detail: {\n        content: {\n          name: \"\",\n          position: \"\",\n          clientName: \"\",\n          phone: \"\",\n          email: \"\",\n          location: \"\",\n          approachDate: \"\",\n          linkCv: \"\",\n          nameJob: \"\",\n          idJob: \"\",\n          noteApproach: \"\",\n          user: [],\n          jobSelected: {},\n          laneSelected: {},\n        },\n      },\n\n      data: {},\n      data_real: {},\n      jobs: [],\n      users: [],\n      lanes: [],\n      isLoading: true,\n      columnSelectedId: \"\",\n      update: false,\n      show_form_create_interview: false,\n      show_form_detail_interview: false,\n      isAddCardNoColumn: false,\n    };\n    this.open_add_card_form = this.open_add_card_form.bind(this);\n    this.close_add_card_form = this.close_add_card_form.bind(this);\n    this.open_detail_card = this.open_detail_card.bind(this);\n    this.close_detail_card = this.close_detail_card.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.initData = this.initData.bind(this);\n    this.initJob = this.initJob.bind(this);\n    this.handleInputUpdateCard = this.handleInputUpdateCard.bind(this);\n    this.toggleDetailCardAndInterview = this.toggleDetailCardAndInterview.bind(\n      this\n    );\n    this.createInterview = this.createInterview.bind(this);\n    this.open_add_card_form_no_column = this.open_add_card_form_no_column.bind(\n      this\n    );\n    this.toggleDetailInterview = this.toggleDetailInterview.bind(this);\n  }\n\n  async createInterview(data) {\n    try {\n      const response = await api.post(`/api/admin/card/interview`, data);\n      if (response) {\n        toast(<CustomToast title={\"Create interview successed !\"} />, {\n          position: toast.POSITION.TOP_CENTER,\n          autoClose: 3000,\n          className: \"toast_login\",\n          closeButton: false,\n          hideProgressBar: true,\n          newestOnTop: true,\n          closeOnClick: true,\n          rtl: false,\n          pauseOnFocusLoss: true,\n          draggable: true,\n          pauseOnHover: true,\n          transition: Zoom,\n        });\n\n        this.setState({\n          isLoading: true,\n        });\n        this.toggleDetailCardAndInterview();\n        this.close_detail_card();\n        this.initData();\n      }\n    } catch (error) {\n      toast(\n        <CustomToast title={\"Interview time is overlapped !\"} type={\"error\"} />,\n        {\n          position: toast.POSITION.TOP_CENTER,\n          autoClose: 3000,\n          className: \"toast_login\",\n          closeButton: false,\n          hideProgressBar: true,\n          newestOnTop: true,\n          closeOnClick: true,\n          rtl: false,\n          pauseOnFocusLoss: true,\n          draggable: true,\n          pauseOnHover: true,\n          transition: Zoom,\n        }\n      );\n    }\n  }\n\n  toggleDetailCardAndInterview() {\n    this.setState({\n      show_detail_card: !this.state.show_detail_card,\n      show_form_create_interview: !this.state.show_form_create_interview,\n    });\n  }\n\n  toggleDetailInterview() {\n    this.setState({\n      show_detail_card: !this.state.show_detail_card,\n      show_form_detail_interview: !this.state.show_form_detail_interview,\n    });\n  }\n\n  toggleFormCreateInterview() {\n    this.state({\n      show_form_create_interview: !this.state.show_form_create_interview,\n    });\n  }\n\n  handleInputUpdateCard(e) {\n    let name = e.target.name;\n    let value = e.target.value;\n    const cardDataDetail = this.state.card_data_detail;\n    _.assign(cardDataDetail.content, { [name]: value });\n    this.setState({ card_data_detail: cardDataDetail });\n  }\n\n  updateCard = async () => {\n    const { card_data_detail } = this.state;\n    const content = card_data_detail.content;\n    const data = {\n      name: content.name,\n      position: content.position,\n      clientName: content.clientName,\n      phone: content.phone,\n      email: content.email,\n      location: content.location,\n      approachDate: content.approachDate,\n      cv: content.linkCv,\n      nameJob: content.nameJob,\n      noteApproach: content.noteApproach,\n      idJob: content.idJob,\n    };\n    const idCard = card_data_detail.id;\n    try {\n      const response = await api.patch(`/api/cards/${idCard}`, data);\n      if (response) {\n        toast(<CustomToast title={\"Update card successed !\"} />, {\n          position: toast.POSITION.BOTTOM_RIGHT,\n          autoClose: 3000,\n          className: \"toast_login\",\n          closeButton: false,\n          hideProgressBar: true,\n          newestOnTop: true,\n          closeOnClick: true,\n          rtl: false,\n          pauseOnFocusLoss: true,\n          draggable: true,\n          pauseOnHover: true,\n          transition: Zoom,\n        });\n        this.initData();\n        this.close_detail_card();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  open_add_card_form(columnId) {\n    // mo form add card\n    this.setState({\n      columnSelectedId: columnId,\n      show_add_card: true,\n    });\n  }\n\n  open_add_card_form_no_column() {\n    // mo form add card\n    this.setState({\n      isAddCardNoColumn: true,\n      show_add_card: true,\n    });\n  }\n\n  close_add_card_form() {\n    // dong form add card\n    this.setState({\n      isAddCardNoColumn: false,\n      columnSelectedId: \"\",\n      show_add_card: false,\n    });\n  }\n\n  open_detail_card(cardId, columnTitle) {\n    const card = this.state.data.cards[cardId];\n    card.title = columnTitle;\n    this.setState({\n      show_detail_card: true,\n      card_selected: _.cloneDeep(card),\n      card_data_detail: _.cloneDeep(card),\n    });\n  }\n\n  close_detail_card() {\n    this.setState({\n      show_detail_card: false,\n    });\n  }\n\n  onDragEnd(result) {\n    const { destination, source, draggableId } = result;\n    let self = this;\n    if (!destination || this.props.role === \"Director\") {\n      return;\n    }\n    if (\n      destination.droppableId === source.draggableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    const start = this.state.data.columns[source.droppableId]; // cot bat dau keo\n    const finish = this.state.data.columns[destination.droppableId]; // cot dich den\n    if (start === finish) {\n      // keo trong 1 cot\n      const newCardIds = Array.from(start.cardIds);\n      newCardIds.splice(source.index, 1);\n      newCardIds.splice(destination.index, 0, draggableId);\n\n      const newCol = {\n        ...start,\n        cardIds: newCardIds,\n      };\n\n      const data = {\n        ...self.state.data,\n        columns: {\n          ...self.state.data.columns,\n          [newCol.id]: newCol,\n        },\n      };\n      this.setState({\n        data: data,\n      });\n    } else {\n      // keo qua 2 cot khac nhau\n      const startCardId = Array.from(start.cardIds); // list card trong cot bat dau\n      startCardId.splice(source.index, 1); // xoa card ra khoi cot\n      const newStart = {\n        // update lai so card trong cot\n        ...start,\n        cardIds: startCardId,\n      };\n\n      const finishCardId = Array.from(finish.cardIds); // list card trong cot ket thuc\n      finishCardId.splice(destination.index, 0, draggableId); // them card vao cot (draggableId la id cua card duoc keo)\n      const newFinish = {\n        // update lai so card trong cot\n        ...finish,\n        cardIds: finishCardId,\n      };\n      const data = {\n        // ste lai state\n        ...self.state.data,\n        columns: {\n          ...self.state.data.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish,\n        },\n      };\n      this.setState({\n        data: data,\n      });\n    }\n    this.updateLaneOfCard(result);\n  }\n\n  updateLaneOfCard = async (result) => {\n    const cardId = result.draggableId;\n    const laneIdUpdate = {\n      laneId: result.destination.droppableId,\n    };\n    try {\n      await api.patch(`/api/cards/${cardId}`, laneIdUpdate);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  componentDidMount() {\n    this.initData();\n    this.initJob();\n    this.initUserTeam();\n    this.offOverFlowY();\n  }\n\n  componentWillUnmount() {\n    this.onOverFlowY();\n  }\n\n  offOverFlowY = () => {\n    document.body.style[\"overflow-y\"] = \"hidden\";\n  };\n\n  onOverFlowY = () => {\n    document.body.style[\"overflow-y\"] = \"scroll\";\n  };\n\n  async initData() {\n    const data = {\n      columns: {},\n      cards: {},\n      columnOrder: [],\n    };\n    try {\n      const lanes = await api.get(`/api/admin/new/cards`);\n      const columns = lanes.data.list;\n      for (const column of columns) {\n        data.columns[`${column.id}`] = {\n          id: `${column.id}`,\n          title: column.nameColumn,\n          background: column.background,\n          limit: 5,\n          maximum: false,\n          cardIds: _.map(column.CandidateJobs, (candidate) => candidate.id),\n        };\n        const cards = column.CandidateJobs;\n        for (const card of cards) {\n          const cardId = `${card.id}`;\n          data.cards[cardId] = {\n            id: cardId,\n            content: {\n              name: card.Candidate.name,\n              position: card.position,\n              clientName: !_.isNil(card.Job.Client) ? card.Job.Client.name : \"\",\n              phone: card.Candidate.phone,\n              email: card.Candidate.email,\n              location: card.Job.Location.name,\n              approachDate: card.approachDate,\n              linkCv: card.cv,\n              nameJob: card.Job.title,\n              noteApproach: card.noteApproach,\n              interview: card.Interview,\n              idJob: card.jobId,\n              jobSelected: {\n                value: card.Job.title,\n                label: card.Job.title,\n              },\n              user: _.map(card.Users, (user) => {\n                return {\n                  name: user.name,\n                  id: user.id,\n                  email: user.email,\n                  linkAvatar: user.linkAvatar,\n                };\n              }),\n            },\n          };\n        }\n      }\n      data.columnOrder = _.map(columns, (column) => `${column.id}`);\n      this.setState({\n        data: data,\n        data_real: data,\n        lanes: _.map(columns, (column) => {\n          return {\n            value: column.id,\n            label: column.nameColumn,\n          };\n        }),\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    this.setState({\n      isLoading: false,\n    });\n  }\n\n  async initJob() {\n    try {\n      const response = await api.get(`/api/trello/job/active`);\n      if (response) {\n        const data = response.data.arrJob;\n        const jobs = _.map(data, (item) => {\n          return {\n            id: item.id,\n            value: item.title,\n            label: item.title,\n            clientName: !_.isNil(item.Client) ? item.Client.name : \"\",\n            locationName: !_.isNil(item.Location.name)\n              ? item.Location.name\n              : \"\",\n          };\n        });\n        this.setState({ jobs: jobs });\n      }\n    } catch (error) {}\n  }\n\n  initUserTeam = async () => {\n    try {\n      const response = await api.get(`/api/trello/user`);\n      if (response) {\n        const data = response.data.list;\n        const users = _.map(data, (user) => {\n          return {\n            value: user.id,\n            label: user.email,\n            name: user.name,\n            linkAvatar: user.linkAvatar,\n          };\n        });\n        this.setState({\n          users: users,\n        });\n      }\n    } catch (error) {}\n  };\n\n  createCardToLane = async (item) => {\n    const data = {\n      ...item,\n    };\n    if (this.state.columnSelectedId !== \"\") {\n      data.laneId = this.state.columnSelectedId;\n    }\n    try {\n      const response = await api.post(`/api/cards`, data);\n      if (response) {\n        toast(<CustomToast title={\"Create card successed !\"} />, {\n          position: toast.POSITION.BOTTOM_RIGHT,\n          autoClose: 3000,\n          className: \"toast_login\",\n          closeButton: false,\n          hideProgressBar: true,\n          newestOnTop: true,\n          closeOnClick: true,\n          rtl: false,\n          pauseOnFocusLoss: true,\n          draggable: true,\n          pauseOnHover: true,\n          transition: Zoom,\n        });\n        this.setState({\n          isLoading: true,\n        });\n        this.close_add_card_form();\n        this.initData();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  addMemberToCard = async (dataUser) => {\n    try {\n      const response = await api.patch(\n        `/api/cards/assignment/${dataUser.card_id}`,\n        { userId: dataUser.content.id }\n      );\n      if (response) {\n        const { data, card_selected } = this.state;\n        data.cards[dataUser.card_id].content.user.push(dataUser.content);\n        card_selected.content.user.push(dataUser.content);\n        this.setState({\n          card_selected: card_selected,\n          update: !this.state.update,\n          data: data,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  removeMemberToCard = async (card_id, user_id) => {\n    try {\n      const response = await api.patch(\n        `/api/cards/remove/assignment/${card_id}`,\n        { userId: user_id }\n      );\n      if (response) {\n        const { data, card_selected } = this.state;\n        data.cards[card_id].content.user = _.filter(\n          data.cards[card_id].content.user,\n          (user) => user.id !== user_id\n        );\n        card_selected.content.user = _.filter(\n          card_selected.content.user,\n          (user) => user.id !== user_id\n        );\n        this.setState({ data: data, card_selected: card_selected });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  handleOnChangeJobSelected = (e) => {\n    const data = this.state.card_selected;\n    data.content.jobSelected = e;\n    data.content.nameJob = e.value;\n    data.content.idJob = e.id;\n    data.content.clientName = e.clientName;\n    data.content.location = e.locationName;\n    console.log(\"isId\", data);\n    this.setState({\n      card_data_detail: data,\n    });\n  };\n\n  updateColumn = (cards, column) => {\n    const { data } = this.state;\n    const idCards = _.map(cards, (card) => card.id);\n    data.columns[column.id].cardIds.push(...idCards);\n    data.columns[column.id].limit = column.limit + 5;\n    if (_.isEmpty(cards)) {\n      data.columns[column.id].maximum = true;\n    }\n    for (const card of cards) {\n      const cardId = `${card.id}`;\n      data.cards[cardId] = {\n        id: cardId,\n        content: {\n          name: card.Candidate.name,\n          position: card.position,\n          clientName: !_.isNil(card.Job.Client) ? card.Job.Client.name : \"\",\n          phone: card.Candidate.phone,\n          email: card.Candidate.email,\n          location: card.Job.Location.name,\n          approachDate: card.approachDate,\n          linkCv: card.cv,\n          nameJob: card.Job.title,\n          noteApproach: card.noteApproach,\n          interview: card.Interview,\n          idJob: card.jobId,\n          jobSelected: {\n            value: card.Job.title,\n            label: card.Job.title,\n          },\n          user: _.map(card.Users, (user) => {\n            return {\n              name: user.name,\n              id: user.id,\n              email: user.email,\n              linkAvatar: user.linkAvatar,\n            };\n          }),\n        },\n      };\n    }\n    this.setState({\n      data: data,\n    });\n  };\n\n  render() {\n    return (\n      <div\n        id=\"main-board\"\n        className={`d-flex flex-column flex-column-fluid ${this.props.className_wrap_broad} board`}\n      >\n        <ToastContainer closeOnClick autoClose={1000} rtl={false} />\n        {this.state.isLoading ? <Fbloader /> : null}\n        <AddCard\n          jobs={this.state.jobs}\n          lanes={this.state.lanes}\n          show={this.state.show_add_card}\n          createCardToLane={this.createCardToLane}\n          onHide={this.close_add_card_form}\n          isAddCardNoColumn={this.state.isAddCardNoColumn}\n        />\n        <DetailCard\n          show={this.state.show_detail_card}\n          onHide={this.close_detail_card}\n          data={this.state.card_selected}\n          data_detail={this.state.card_data_detail}\n          update={this.handleInputUpdateCard.bind(this)}\n          updateCard={this.updateCard}\n          handleOnChangeJobSelected={this.handleOnChangeJobSelected}\n          jobs={this.state.jobs}\n          removeMemberToCard={this.removeMemberToCard}\n          users={this.state.users}\n          updated={this.state.update}\n          addMemberToCard={this.addMemberToCard}\n          toggleDetailCardAndInterview={this.toggleDetailCardAndInterview}\n          toggleDetailInterview={this.toggleDetailInterview}\n        />\n\n        <CreateInterviewCard\n          show={this.state.show_form_create_interview}\n          data={this.state.card_selected}\n          createInterview={this.createInterview}\n          onHide={this.toggleDetailCardAndInterview}\n        />\n        <DetailInterviewCard\n          show={this.state.show_form_detail_interview}\n          data={this.state.card_selected}\n          onHide={this.toggleDetailInterview}\n        />\n        <div\n          className=\"subheader py-3 py-lg-8 subheader-transparent\"\n          id=\"kt_subheader\"\n        >\n          <div className=\"trello\">\n            <div className=\"d-flex align-items-center mr-1\">\n              <div className=\"d-flex align-items-baseline flex-wrap mr-5\">\n                <ul className=\"breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold my-2 p-0\">\n                  <li className=\"breadcrumb-item\">\n                    <Link to=\"/\" className=\"text-dark\">\n                      Dashboard\n                    </Link>\n                  </li>\n                  <li className=\"breadcrumb-item\">\n                    <div className=\"text-dark\">List Cards</div>\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <div className=\"d-flex align-items-center flex-wrap\"></div>\n          </div>\n        </div>\n        <div className=\"d-flex flex-column-fluid trello-main\">\n          <div className=\"container_trello\">\n            {this.state.data.columnOrder ? (\n              <DragDropContext onDragEnd={this.onDragEnd}>\n                <Container>\n                  {this.state.data.columnOrder.map((columnId, index) => {\n                    const column = this.state.data.columns[columnId];\n                    const cards = column.cardIds.map((cardId) => {\n                      return this.state.data.cards[cardId];\n                    });\n                    return (\n                      <Column\n                        index={index}\n                        key={columnId}\n                        column={column}\n                        cards={cards}\n                        users={this.state.users}\n                        open_add_card_form={this.open_add_card_form.bind(\n                          this,\n                          columnId\n                        )}\n                        open_detail_card={this.open_detail_card}\n                        addMemberToCard={this.addMemberToCard}\n                        removeMemberToCard={this.removeMemberToCard}\n                        updateColumn={this.updateColumn}\n                      />\n                    );\n                  })}\n                </Container>\n              </DragDropContext>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n\n        {this.props.role !== roleName.DIRECTOR ? (\n          <button\n            type=\"button\"\n            className=\"btn-add-card-vip btn btn-primary\"\n            onClick={this.open_add_card_form_no_column}\n          >\n            <span className=\"card-vip__plus\">+</span>\n          </button>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    className_wrap_broad: state.ui.className_wrap_broad,\n    role: state.auth.role,\n  };\n};\n\nexport default connect(mapStateToProps)(Broad);\n"]},"metadata":{},"sourceType":"module"}