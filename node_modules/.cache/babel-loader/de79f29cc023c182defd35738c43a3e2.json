{"ast":null,"code":"import { __extends } from \"tslib\";\n/** @jsx jsx */\n\nimport React from 'react';\nimport { jsx } from '@emotion/core';\nimport ErrorIcon from '@atlaskit/icon/glyph/error';\nimport WarningIcon from '@atlaskit/icon/glyph/warning';\nimport { Header, Title, titleIconWrapperStyles, TitleText } from '../styled/Content';\n\nvar TitleIcon = function (_a) {\n  var appearance = _a.appearance;\n\n  if (!appearance) {\n    return null;\n  }\n\n  var Icon = appearance === 'danger' ? ErrorIcon : WarningIcon;\n  return jsx(\"span\", {\n    css: titleIconWrapperStyles(appearance)\n  }, jsx(Icon, {\n    label: appearance + \" icon\"\n  }));\n};\n\nvar ModalHeader =\n/** @class */\nfunction (_super) {\n  __extends(ModalHeader, _super);\n\n  function ModalHeader() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ModalHeader.prototype.render = function () {\n    var _a = this.props,\n        id = _a.id,\n        appearance = _a.appearance,\n        component = _a.component,\n        heading = _a.heading,\n        onClose = _a.onClose,\n        showKeyline = _a.showKeyline,\n        isHeadingMultiline = _a.isHeadingMultiline,\n        testId = _a.testId;\n    var warning = 'You can provide `component` OR `heading`, not both.';\n\n    if (!component && !heading) {\n      return null;\n    }\n\n    if (component && heading) {\n      console.warn(warning); // eslint-disable-line no-console\n\n      return null;\n    }\n\n    if (component) {\n      return React.createElement(component, {\n        id: id,\n        testId: testId,\n        appearance: appearance,\n        onClose: onClose,\n        showKeyline: showKeyline,\n        isHeadingMultiline: isHeadingMultiline\n      });\n    }\n\n    return jsx(Header, {\n      showKeyline: showKeyline\n    }, jsx(Title, null, jsx(TitleIcon, {\n      appearance: appearance\n    }), jsx(TitleText, {\n      isHeadingMultiline: isHeadingMultiline,\n      id: id,\n      \"data-testid\": testId && testId + \"-heading\"\n    }, heading)));\n  };\n\n  ModalHeader.defaultProps = {\n    isHeadingMultiline: true\n  };\n  return ModalHeader;\n}(React.Component);\n\nexport default ModalHeader;","map":{"version":3,"sources":["../../../src/components/Header.tsx"],"names":[],"mappings":";AAAA;;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,GAAT,QAAoB,eAApB;AAEA,OAAO,SAAP,MAAsB,4BAAtB;AACA,OAAO,WAAP,MAAwB,8BAAxB;AAEA,SACE,MADF,EAEE,KAFF,EAGE,sBAHF,EAIE,SAJF,QAKO,mBALP;;AAQA,IAAM,SAAS,GAAG,UAAC,EAAD,EAAsD;MAAnD,UAAU,GAAA,EAAA,CAAA,U;;AAC7B,MAAI,CAAC,UAAL,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,MAAM,IAAI,GAAG,UAAU,KAAK,QAAf,GAA0B,SAA1B,GAAsC,WAAnD;AAEA,SACE,GAAA,CAAA,MAAA,EAAA;AAAM,IAAA,GAAG,EAAE,sBAAsB,CAAC,UAAD;AAAjC,GAAA,EACE,GAAA,CAAC,IAAD,EAAK;AAAC,IAAA,KAAK,EAAK,UAAU,GAAA;AAArB,GAAL,CADF,CADF;AAKD,CAZD;;AAgEA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAAzC,WAAA,WAAA,GAAA;;AAmDC;;AA9CC,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACQ,QAAA,EAAA,GASF,KAAK,KATH;AAAA,QACJ,EAAE,GAAA,EAAA,CAAA,EADE;AAAA,QAEJ,UAAU,GAAA,EAAA,CAAA,UAFN;AAAA,QAGJ,SAAS,GAAA,EAAA,CAAA,SAHL;AAAA,QAIJ,OAAO,GAAA,EAAA,CAAA,OAJH;AAAA,QAKJ,OAAO,GAAA,EAAA,CAAA,OALH;AAAA,QAMJ,WAAW,GAAA,EAAA,CAAA,WANP;AAAA,QAOJ,kBAAkB,GAAA,EAAA,CAAA,kBAPd;AAAA,QAQJ,MAAM,GAAA,EAAA,CAAA,MARF;AAUN,QAAM,OAAO,GAAG,qDAAhB;;AAEA,QAAI,CAAC,SAAD,IAAc,CAAC,OAAnB,EAA4B;AAC1B,aAAO,IAAP;AACD;;AACD,QAAI,SAAS,IAAI,OAAjB,EAA0B;AACxB,MAAA,OAAO,CAAC,IAAR,CAAa,OAAb,EADwB,CACD;;AACvB,aAAO,IAAP;AACD;;AACD,QAAI,SAAJ,EAAe;AACb,aAAO,KAAK,CAAC,aAAN,CAAoB,SAApB,EAA+B;AACpC,QAAA,EAAE,EAAA,EADkC;AAEpC,QAAA,MAAM,EAAA,MAF8B;AAGpC,QAAA,UAAU,EAAA,UAH0B;AAIpC,QAAA,OAAO,EAAA,OAJ6B;AAKpC,QAAA,WAAW,EAAA,WALyB;AAMpC,QAAA,kBAAkB,EAAA;AANkB,OAA/B,CAAP;AAQD;;AAED,WACE,GAAA,CAAC,MAAD,EAAO;AAAC,MAAA,WAAW,EAAE;AAAd,KAAP,EACE,GAAA,CAAC,KAAD,EAAM,IAAN,EACE,GAAA,CAAC,SAAD,EAAU;AAAC,MAAA,UAAU,EAAE;AAAb,KAAV,CADF,EAEE,GAAA,CAAC,SAAD,EAAU;AACR,MAAA,kBAAkB,EAAE,kBADZ;AAER,MAAA,EAAE,EAAE,EAFI;AAEF,qBACO,MAAM,IAAO,MAAM,GAAA;AAHxB,KAAV,EAKG,OALH,CAFF,CADF,CADF;AAcD,GA7CD;;AAJO,EAAA,WAAA,CAAA,YAAA,GAAe;AACpB,IAAA,kBAAkB,EAAE;AADA,GAAf;AAkDT,SAAA,WAAA;AAAC,CAnDD,CAAyC,KAAK,CAAC,SAA/C,CAAA;;eAAqB,W","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\n/** @jsx jsx */\nimport React from 'react';\nimport { jsx } from '@emotion/core';\nimport ErrorIcon from '@atlaskit/icon/glyph/error';\nimport WarningIcon from '@atlaskit/icon/glyph/warning';\nimport { Header, Title, titleIconWrapperStyles, TitleText, } from '../styled/Content';\nvar TitleIcon = function (_a) {\n    var appearance = _a.appearance;\n    if (!appearance) {\n        return null;\n    }\n    var Icon = appearance === 'danger' ? ErrorIcon : WarningIcon;\n    return (jsx(\"span\", { css: titleIconWrapperStyles(appearance) },\n        jsx(Icon, { label: appearance + \" icon\" })));\n};\nvar ModalHeader = /** @class */ (function (_super) {\n    __extends(ModalHeader, _super);\n    function ModalHeader() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ModalHeader.prototype.render = function () {\n        var _a = this.props, id = _a.id, appearance = _a.appearance, component = _a.component, heading = _a.heading, onClose = _a.onClose, showKeyline = _a.showKeyline, isHeadingMultiline = _a.isHeadingMultiline, testId = _a.testId;\n        var warning = 'You can provide `component` OR `heading`, not both.';\n        if (!component && !heading) {\n            return null;\n        }\n        if (component && heading) {\n            console.warn(warning); // eslint-disable-line no-console\n            return null;\n        }\n        if (component) {\n            return React.createElement(component, {\n                id: id,\n                testId: testId,\n                appearance: appearance,\n                onClose: onClose,\n                showKeyline: showKeyline,\n                isHeadingMultiline: isHeadingMultiline,\n            });\n        }\n        return (jsx(Header, { showKeyline: showKeyline },\n            jsx(Title, null,\n                jsx(TitleIcon, { appearance: appearance }),\n                jsx(TitleText, { isHeadingMultiline: isHeadingMultiline, id: id, \"data-testid\": testId && testId + \"-heading\" }, heading))));\n    };\n    ModalHeader.defaultProps = {\n        isHeadingMultiline: true,\n    };\n    return ModalHeader;\n}(React.Component));\nexport default ModalHeader;\n//# sourceMappingURL=Header.js.map"]},"metadata":{},"sourceType":"module"}