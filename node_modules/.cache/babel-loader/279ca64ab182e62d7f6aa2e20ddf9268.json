{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bemClassName = bemClassName;\n/*\n * Generates BEM convention style class names and decorates with given modifiers.\n * @param {object} blockElements Index of space separated classes representing block and element level items of BEM.\n *                               May also include classes beginning with a separator which will be extended.\n * @param {string} key Item to pick from blockElements.\n * @param {array} modifiers List of modifiers to use.\n * @param {string} separator Separator to use between block-element and a modifier.\n * @return {string} className where the first item in space separated list is extended with given modifiers.\n */\n\nfunction bemClassName(blockElements, key, modifiers) {\n  var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '--';\n  var blockElement = blockElements && blockElements[key] || null; // we prefer strings here\n\n  if (blockElement == null) {\n    return null;\n  } else if (typeof blockElement !== 'string') {\n    blockElement = String(blockElement);\n  }\n\n  var otherClasses = '';\n  var i = blockElement.indexOf(' '); // separate main block-element from other block-elements and separator-modifiers\n\n  if (i >= 0) {\n    otherClasses = blockElement.slice(i);\n    blockElement = blockElement.slice(0, i);\n  } // we need this often enough\n\n\n  var modifierPrefix = ' ' + blockElement + separator; // prefix separator-modifiers with the block-element\n\n  if (otherClasses && separator) {\n    var spaceAndSeparator = ' ' + separator; // a case where for loop seems a nicer choice than generating a \"replace all\" RegExp\n\n    for (i = otherClasses.indexOf(spaceAndSeparator); i >= 0; i = otherClasses.indexOf(spaceAndSeparator, i + blockElement.length)) {\n      otherClasses = otherClasses.replace(spaceAndSeparator, modifierPrefix);\n    }\n  }\n\n  if (!Array.isArray(modifiers)) {\n    return blockElement + otherClasses;\n  } // generates the final className and includes given modifiers from the array\n\n\n  return modifiers.reduce(function (className, modifier) {\n    if (modifier != null) {\n      return className + modifierPrefix + modifier;\n    } else {\n      return className;\n    }\n  }, blockElement) + otherClasses;\n}","map":{"version":3,"sources":["/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/node_modules/react-tabbordion/dist/module/lib/bem.js"],"names":["Object","defineProperty","exports","value","bemClassName","blockElements","key","modifiers","separator","arguments","length","undefined","blockElement","String","otherClasses","i","indexOf","slice","modifierPrefix","spaceAndSeparator","replace","Array","isArray","reduce","className","modifier"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AAEA;;;;;;;;;;AASA,SAASA,YAAT,CAAsBC,aAAtB,EAAqCC,GAArC,EAA0CC,SAA1C,EAAqD;AACnD,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAApF;AACA,MAAIG,YAAY,GAAGP,aAAa,IAAIA,aAAa,CAACC,GAAD,CAA9B,IAAuC,IAA1D,CAFmD,CAEa;;AAEhE,MAAIM,YAAY,IAAI,IAApB,EAA0B;AACxB,WAAO,IAAP;AACD,GAFD,MAEO,IAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AAC3CA,IAAAA,YAAY,GAAGC,MAAM,CAACD,YAAD,CAArB;AACD;;AAED,MAAIE,YAAY,GAAG,EAAnB;AACA,MAAIC,CAAC,GAAGH,YAAY,CAACI,OAAb,CAAqB,GAArB,CAAR,CAXmD,CAWhB;;AAEnC,MAAID,CAAC,IAAI,CAAT,EAAY;AACVD,IAAAA,YAAY,GAAGF,YAAY,CAACK,KAAb,CAAmBF,CAAnB,CAAf;AACAH,IAAAA,YAAY,GAAGA,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsBF,CAAtB,CAAf;AACD,GAhBkD,CAgBjD;;;AAGF,MAAIG,cAAc,GAAG,MAAMN,YAAN,GAAqBJ,SAA1C,CAnBmD,CAmBE;;AAErD,MAAIM,YAAY,IAAIN,SAApB,EAA+B;AAC7B,QAAIW,iBAAiB,GAAG,MAAMX,SAA9B,CAD6B,CACY;;AAEzC,SAAKO,CAAC,GAAGD,YAAY,CAACE,OAAb,CAAqBG,iBAArB,CAAT,EAAkDJ,CAAC,IAAI,CAAvD,EAA0DA,CAAC,GAAGD,YAAY,CAACE,OAAb,CAAqBG,iBAArB,EAAwCJ,CAAC,GAAGH,YAAY,CAACF,MAAzD,CAA9D,EAAgI;AAC9HI,MAAAA,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAqBD,iBAArB,EAAwCD,cAAxC,CAAf;AACD;AACF;;AAED,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcf,SAAd,CAAL,EAA+B;AAC7B,WAAOK,YAAY,GAAGE,YAAtB;AACD,GA/BkD,CA+BjD;;;AAGF,SAAOP,SAAS,CAACgB,MAAV,CAAiB,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;AACrD,QAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,aAAOD,SAAS,GAAGN,cAAZ,GAA6BO,QAApC;AACD,KAFD,MAEO;AACL,aAAOD,SAAP;AACD;AACF,GANM,EAMJZ,YANI,IAMYE,YANnB;AAOD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bemClassName = bemClassName;\n\n/*\n * Generates BEM convention style class names and decorates with given modifiers.\n * @param {object} blockElements Index of space separated classes representing block and element level items of BEM.\n *                               May also include classes beginning with a separator which will be extended.\n * @param {string} key Item to pick from blockElements.\n * @param {array} modifiers List of modifiers to use.\n * @param {string} separator Separator to use between block-element and a modifier.\n * @return {string} className where the first item in space separated list is extended with given modifiers.\n */\nfunction bemClassName(blockElements, key, modifiers) {\n  var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '--';\n  var blockElement = blockElements && blockElements[key] || null; // we prefer strings here\n\n  if (blockElement == null) {\n    return null;\n  } else if (typeof blockElement !== 'string') {\n    blockElement = String(blockElement);\n  }\n\n  var otherClasses = '';\n  var i = blockElement.indexOf(' '); // separate main block-element from other block-elements and separator-modifiers\n\n  if (i >= 0) {\n    otherClasses = blockElement.slice(i);\n    blockElement = blockElement.slice(0, i);\n  } // we need this often enough\n\n\n  var modifierPrefix = ' ' + blockElement + separator; // prefix separator-modifiers with the block-element\n\n  if (otherClasses && separator) {\n    var spaceAndSeparator = ' ' + separator; // a case where for loop seems a nicer choice than generating a \"replace all\" RegExp\n\n    for (i = otherClasses.indexOf(spaceAndSeparator); i >= 0; i = otherClasses.indexOf(spaceAndSeparator, i + blockElement.length)) {\n      otherClasses = otherClasses.replace(spaceAndSeparator, modifierPrefix);\n    }\n  }\n\n  if (!Array.isArray(modifiers)) {\n    return blockElement + otherClasses;\n  } // generates the final className and includes given modifiers from the array\n\n\n  return modifiers.reduce(function (className, modifier) {\n    if (modifier != null) {\n      return className + modifierPrefix + modifier;\n    } else {\n      return className;\n    }\n  }, blockElement) + otherClasses;\n}"]},"metadata":{},"sourceType":"script"}