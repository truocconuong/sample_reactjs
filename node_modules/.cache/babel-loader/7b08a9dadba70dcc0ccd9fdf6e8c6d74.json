{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport React, { useCallback, useMemo } from 'react';\nimport { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';\nimport { useAnalyticsContext } from '../../hooks/useAnalyticsContext';\nimport { useTrackedRef } from '../../hooks/useTrackedRef';\n\nvar AnalyticsListener = function (_a) {\n  var children = _a.children,\n      channel = _a.channel,\n      onEvent = _a.onEvent;\n  var analyticsContext = useAnalyticsContext();\n  var onEventRef = useTrackedRef(onEvent);\n  var channelRef = useTrackedRef(channel);\n  var getAtlaskitAnalyticsEventHandlers = useCallback(function () {\n    var thisHandler = function (event, eventChannel) {\n      if (channelRef.current === '*' || channelRef.current === eventChannel) {\n        onEventRef.current(event, eventChannel);\n      }\n    };\n\n    return __spread(analyticsContext.getAtlaskitAnalyticsEventHandlers(), [thisHandler]);\n  }, [analyticsContext, channelRef, onEventRef]);\n  var value = useMemo(function () {\n    return {\n      getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,\n      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext\n    };\n  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);\n  return React.createElement(AnalyticsReactContext.Provider, {\n    value: value\n  }, children);\n};\n\nexport default AnalyticsListener;","map":{"version":3,"sources":["../../../../src/components/AnalyticsListener/ModernAnalyticsListener.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,WAAhB,EAA6B,OAA7B,QAA4C,OAA5C;AAEA,SAAS,OAAO,IAAI,qBAApB,QAAiD,+CAAjD;AAGA,SAAS,mBAAT,QAAoC,iCAApC;AACA,SAAS,aAAT,QAA8B,2BAA9B;;AAIA,IAAM,iBAAiB,GAA8B,UAAC,EAAD,EAIpD;MAHC,QAAQ,GAAA,EAAA,CAAA,Q;MACR,OAAO,GAAA,EAAA,CAAA,O;MACP,OAAO,GAAA,EAAA,CAAA,O;AAEP,MAAM,gBAAgB,GAAG,mBAAmB,EAA5C;AACA,MAAM,UAAU,GAAG,aAAa,CAAC,OAAD,CAAhC;AACA,MAAM,UAAU,GAAG,aAAa,CAAC,OAAD,CAAhC;AAEA,MAAM,iCAAiC,GAAG,WAAW,CAAC,YAAA;AACpD,QAAM,WAAW,GAA4B,UAAC,KAAD,EAAQ,YAAR,EAAoB;AAC/D,UAAI,UAAU,CAAC,OAAX,KAAuB,GAAvB,IAA8B,UAAU,CAAC,OAAX,KAAuB,YAAzD,EAAuE;AACrE,QAAA,UAAU,CAAC,OAAX,CAAmB,KAAnB,EAA0B,YAA1B;AACD;AACF,KAJD;;AAMA,WAAA,QAAA,CACK,gBAAgB,CAAC,iCAAjB,EADL,EACyD,CACvD,WADuD,CADzD,CAAA;AAID,GAXoD,EAWlD,CAAC,gBAAD,EAAmB,UAAnB,EAA+B,UAA/B,CAXkD,CAArD;AAaA,MAAM,KAAK,GAAG,OAAO,CAAC,YAAA;AACpB,WAAO;AACL,MAAA,iCAAiC,EAAA,iCAD5B;AAEL,MAAA,2BAA2B,EAAE,gBAAgB,CAAC;AAFzC,KAAP;AAID,GALoB,EAKlB,CAAC,gBAAD,EAAmB,iCAAnB,CALkB,CAArB;AAOA,SACE,KAAA,CAAA,aAAA,CAAC,qBAAqB,CAAC,QAAvB,EAA+B;AAAC,IAAA,KAAK,EAAE;AAAR,GAA/B,EACG,QADH,CADF;AAKD,CAlCD;;AAoCA,eAAe,iBAAf","sourceRoot":"","sourcesContent":["import { __read, __spread } from \"tslib\";\nimport React, { useCallback, useMemo } from 'react';\nimport { default as AnalyticsReactContext } from '@atlaskit/analytics-next-stable-react-context';\nimport { useAnalyticsContext } from '../../hooks/useAnalyticsContext';\nimport { useTrackedRef } from '../../hooks/useTrackedRef';\nvar AnalyticsListener = function (_a) {\n    var children = _a.children, channel = _a.channel, onEvent = _a.onEvent;\n    var analyticsContext = useAnalyticsContext();\n    var onEventRef = useTrackedRef(onEvent);\n    var channelRef = useTrackedRef(channel);\n    var getAtlaskitAnalyticsEventHandlers = useCallback(function () {\n        var thisHandler = function (event, eventChannel) {\n            if (channelRef.current === '*' || channelRef.current === eventChannel) {\n                onEventRef.current(event, eventChannel);\n            }\n        };\n        return __spread(analyticsContext.getAtlaskitAnalyticsEventHandlers(), [\n            thisHandler,\n        ]);\n    }, [analyticsContext, channelRef, onEventRef]);\n    var value = useMemo(function () {\n        return {\n            getAtlaskitAnalyticsEventHandlers: getAtlaskitAnalyticsEventHandlers,\n            getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext,\n        };\n    }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);\n    return (React.createElement(AnalyticsReactContext.Provider, { value: value }, children));\n};\nexport default AnalyticsListener;\n//# sourceMappingURL=ModernAnalyticsListener.js.map"]},"metadata":{},"sourceType":"module"}