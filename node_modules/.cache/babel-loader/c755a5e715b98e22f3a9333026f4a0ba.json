{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport { canUseDOM } from 'exenv';\nimport { UIDConsumer, UIDReset } from 'react-uid';\nimport { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents } from '@atlaskit/analytics-next';\nimport Blanket from '@atlaskit/blanket';\nimport { WIDTH_ENUM } from '../shared-variables';\nimport { Dialog, FillScreen as StyledFillScreen } from '../styled/Modal';\nimport { name as packageName, version as packageVersion } from '../version.json';\nimport { Animation } from './Animation';\nimport Content from './Content';\nimport FocusLock from './FocusLock';\nimport Positioner from './Positioner';\n\nfunction getScrollDistance() {\n  return window.pageYOffset || document.documentElement && document.documentElement.scrollTop || document.body && document.body.scrollTop || 0;\n}\n\nvar Modal =\n/** @class */\nfunction (_super) {\n  __extends(Modal, _super);\n\n  function Modal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      dialogNode: null,\n      scrollDistance: canUseDOM ? getScrollDistance() : 0,\n      isExiting: false\n    };\n    /* Prevent window from being scrolled programatically so that the modal is positioned correctly\n     * and to prevent scrollIntoView from scrolling the window.\n     */\n\n    _this.handleWindowScroll = function () {\n      if (getScrollDistance() !== _this.state.scrollDistance) {\n        window.scrollTo(window.pageXOffset, _this.state.scrollDistance);\n      }\n    };\n\n    _this.handleOverlayClick = function (e) {\n      if (_this.props.shouldCloseOnOverlayClick) {\n        _this.props.onClose(e);\n      }\n    };\n\n    return _this;\n  }\n\n  Modal.prototype.componentDidMount = function () {\n    var scrollDistance = getScrollDistance();\n\n    if (getScrollDistance() !== this.state.scrollDistance) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        scrollDistance: scrollDistance\n      });\n    }\n\n    window.addEventListener('scroll', this.handleWindowScroll);\n  };\n\n  Modal.prototype.componentWillUnmount = function () {\n    window.removeEventListener('scroll', this.handleWindowScroll);\n  };\n\n  Modal.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        actions = _a.actions,\n        appearance = _a.appearance,\n        autoFocus = _a.autoFocus,\n        body = _a.body,\n        children = _a.children,\n        components = _a.components,\n        footer = _a.footer,\n        header = _a.header,\n        height = _a.height,\n        isBlanketHidden = _a.isBlanketHidden,\n        isChromeless = _a.isChromeless,\n        isHeadingMultiline = _a.isHeadingMultiline,\n        isOpen = _a.isOpen,\n        onClose = _a.onClose,\n        onCloseComplete = _a.onCloseComplete,\n        onOpenComplete = _a.onOpenComplete,\n        onStackChange = _a.onStackChange,\n        shouldCloseOnEscapePress = _a.shouldCloseOnEscapePress,\n        stackIndex = _a.stackIndex,\n        heading = _a.heading,\n        width = _a.width,\n        scrollBehavior = _a.scrollBehavior,\n        testId = _a.testId;\n    var scrollDistance = this.state.scrollDistance;\n    var isBackground = stackIndex != null && stackIndex > 0; // If a custom width (number or percentage) is supplied, set inline style\n    // otherwise allow styled component to consume as named prop\n\n    var widthName = width ? WIDTH_ENUM.values.indexOf(width.toString()) !== -1 ? width : undefined : undefined;\n    var widthValue = widthName ? undefined : width;\n    return React.createElement(Animation, {\n      in: isOpen,\n      onExited: onCloseComplete,\n      onEntered: onOpenComplete,\n      stackIndex: stackIndex\n    }, function (_a) {\n      var fade = _a.fade,\n          slide = _a.slide;\n      return React.createElement(StyledFillScreen, {\n        style: fade,\n        \"aria-hidden\": isBackground,\n        scrollDistance: scrollDistance\n      }, React.createElement(FocusLock, {\n        isEnabled: stackIndex === 0 && isOpen,\n        autoFocus: autoFocus\n      }, React.createElement(Blanket, {\n        isTinted: !isBlanketHidden,\n        onBlanketClicked: _this.handleOverlayClick\n      }), React.createElement(Positioner, {\n        style: slide,\n        scrollBehavior: scrollBehavior,\n        widthName: widthName,\n        widthValue: widthValue\n      }, React.createElement(UIDReset, null, React.createElement(UIDConsumer, null, function (id, _) {\n        return React.createElement(Dialog, {\n          heightValue: height,\n          isChromeless: isChromeless,\n          role: \"dialog\",\n          \"aria-labelledby\": \"dialog-heading-\" + id,\n          \"data-testid\": testId,\n          tabIndex: -1\n        }, React.createElement(Content, {\n          actions: actions,\n          appearance: appearance,\n          components: components,\n          footer: footer,\n          heading: heading,\n          headingId: \"dialog-heading-\" + id,\n          testId: testId && testId + \"-dialog-content\",\n          isHeadingMultiline: isHeadingMultiline,\n          header: header,\n          onClose: onClose,\n          shouldScroll: scrollBehavior === 'inside' || scrollBehavior === 'inside-wide',\n          shouldCloseOnEscapePress: shouldCloseOnEscapePress,\n          onStackChange: onStackChange,\n          isChromeless: isChromeless,\n          stackIndex: stackIndex,\n          body: body\n        }, children));\n      })))));\n    });\n  };\n\n  Modal.defaultProps = {\n    autoFocus: true,\n    scrollBehavior: 'inside',\n    shouldCloseOnEscapePress: true,\n    shouldCloseOnOverlayClick: true,\n    isBlanketHidden: false,\n    isChromeless: false,\n    isOpen: true,\n    stackIndex: 0,\n    width: 'medium',\n    isHeadingMultiline: true,\n    onClose: function () {}\n  };\n  return Modal;\n}(React.Component);\n\nvar createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');\nexport var ModalDialogWithoutAnalytics = Modal;\nexport default withAnalyticsContext({\n  componentName: 'modalDialog',\n  packageName: packageName,\n  packageVersion: packageVersion\n})(withAnalyticsEvents({\n  onClose: createAndFireEventOnAtlaskit({\n    action: 'closed',\n    actionSubject: 'modalDialog',\n    attributes: {\n      componentName: 'modalDialog',\n      packageName: packageName,\n      packageVersion: packageVersion\n    }\n  })\n})(Modal));","map":{"version":3,"sources":["../../../src/components/Modal.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport React from 'react';\nimport { canUseDOM } from 'exenv';\nimport { UIDConsumer, UIDReset } from 'react-uid';\nimport { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';\nimport Blanket from '@atlaskit/blanket';\nimport { WIDTH_ENUM } from '../shared-variables';\nimport { Dialog, FillScreen as StyledFillScreen } from '../styled/Modal';\nimport { name as packageName, version as packageVersion, } from '../version.json';\nimport { Animation } from './Animation';\nimport Content from './Content';\nimport FocusLock from './FocusLock';\nimport Positioner from './Positioner';\nfunction getScrollDistance() {\n    return (window.pageYOffset ||\n        (document.documentElement && document.documentElement.scrollTop) ||\n        (document.body && document.body.scrollTop) ||\n        0);\n}\nvar Modal = /** @class */ (function (_super) {\n    __extends(Modal, _super);\n    function Modal() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            dialogNode: null,\n            scrollDistance: canUseDOM ? getScrollDistance() : 0,\n            isExiting: false,\n        };\n        /* Prevent window from being scrolled programatically so that the modal is positioned correctly\n         * and to prevent scrollIntoView from scrolling the window.\n         */\n        _this.handleWindowScroll = function () {\n            if (getScrollDistance() !== _this.state.scrollDistance) {\n                window.scrollTo(window.pageXOffset, _this.state.scrollDistance);\n            }\n        };\n        _this.handleOverlayClick = function (e) {\n            if (_this.props.shouldCloseOnOverlayClick) {\n                _this.props.onClose(e);\n            }\n        };\n        return _this;\n    }\n    Modal.prototype.componentDidMount = function () {\n        var scrollDistance = getScrollDistance();\n        if (getScrollDistance() !== this.state.scrollDistance) {\n            // eslint-disable-next-line react/no-did-mount-set-state\n            this.setState({ scrollDistance: scrollDistance });\n        }\n        window.addEventListener('scroll', this.handleWindowScroll);\n    };\n    Modal.prototype.componentWillUnmount = function () {\n        window.removeEventListener('scroll', this.handleWindowScroll);\n    };\n    Modal.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, actions = _a.actions, appearance = _a.appearance, autoFocus = _a.autoFocus, body = _a.body, children = _a.children, components = _a.components, footer = _a.footer, header = _a.header, height = _a.height, isBlanketHidden = _a.isBlanketHidden, isChromeless = _a.isChromeless, isHeadingMultiline = _a.isHeadingMultiline, isOpen = _a.isOpen, onClose = _a.onClose, onCloseComplete = _a.onCloseComplete, onOpenComplete = _a.onOpenComplete, onStackChange = _a.onStackChange, shouldCloseOnEscapePress = _a.shouldCloseOnEscapePress, stackIndex = _a.stackIndex, heading = _a.heading, width = _a.width, scrollBehavior = _a.scrollBehavior, testId = _a.testId;\n        var scrollDistance = this.state.scrollDistance;\n        var isBackground = stackIndex != null && stackIndex > 0;\n        // If a custom width (number or percentage) is supplied, set inline style\n        // otherwise allow styled component to consume as named prop\n        var widthName = width\n            ? WIDTH_ENUM.values.indexOf(width.toString()) !== -1\n                ? width\n                : undefined\n            : undefined;\n        var widthValue = widthName ? undefined : width;\n        return (React.createElement(Animation, { in: isOpen, onExited: onCloseComplete, onEntered: onOpenComplete, stackIndex: stackIndex }, function (_a) {\n            var fade = _a.fade, slide = _a.slide;\n            return (React.createElement(StyledFillScreen, { style: fade, \"aria-hidden\": isBackground, scrollDistance: scrollDistance },\n                React.createElement(FocusLock, { isEnabled: stackIndex === 0 && isOpen, autoFocus: autoFocus },\n                    React.createElement(Blanket, { isTinted: !isBlanketHidden, onBlanketClicked: _this.handleOverlayClick }),\n                    React.createElement(Positioner, { style: slide, scrollBehavior: scrollBehavior, widthName: widthName, widthValue: widthValue },\n                        React.createElement(UIDReset, null,\n                            React.createElement(UIDConsumer, null, function (id, _) { return (React.createElement(Dialog, { heightValue: height, isChromeless: isChromeless, role: \"dialog\", \"aria-labelledby\": \"dialog-heading-\" + id, \"data-testid\": testId, tabIndex: -1 },\n                                React.createElement(Content, { actions: actions, appearance: appearance, components: components, footer: footer, heading: heading, headingId: \"dialog-heading-\" + id, testId: testId && testId + \"-dialog-content\", isHeadingMultiline: isHeadingMultiline, header: header, onClose: onClose, shouldScroll: scrollBehavior === 'inside' ||\n                                        scrollBehavior === 'inside-wide', shouldCloseOnEscapePress: shouldCloseOnEscapePress, onStackChange: onStackChange, isChromeless: isChromeless, stackIndex: stackIndex, body: body }, children))); }))))));\n        }));\n    };\n    Modal.defaultProps = {\n        autoFocus: true,\n        scrollBehavior: 'inside',\n        shouldCloseOnEscapePress: true,\n        shouldCloseOnOverlayClick: true,\n        isBlanketHidden: false,\n        isChromeless: false,\n        isOpen: true,\n        stackIndex: 0,\n        width: 'medium',\n        isHeadingMultiline: true,\n        onClose: function () { },\n    };\n    return Modal;\n}(React.Component));\nvar createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');\nexport var ModalDialogWithoutAnalytics = Modal;\nexport default withAnalyticsContext({\n    componentName: 'modalDialog',\n    packageName: packageName,\n    packageVersion: packageVersion,\n})(withAnalyticsEvents({\n    onClose: createAndFireEventOnAtlaskit({\n        action: 'closed',\n        actionSubject: 'modalDialog',\n        attributes: {\n            componentName: 'modalDialog',\n            packageName: packageName,\n            packageVersion: packageVersion,\n        },\n    }),\n})(Modal));\n//# sourceMappingURL=Modal.js.map"]},"metadata":{},"sourceType":"module"}