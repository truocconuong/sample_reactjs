{"ast":null,"code":"import { __extends, __read, __spread } from \"tslib\";\nimport React from 'react'; // This is the source of truth for open modals\n\nvar stackConsumers = []; // This component provides the position of a modal dialog in the list of all open dialogs.\n// The key behaviours are:\n// - When a modal renders for the first time it takes the first stack position\n// - When a modal mounts, all other modals have to adjust their position\n// - When a modal unmounts, all other modals have to adjust their position\n\nvar StackConsumer =\n/** @class */\nfunction (_super) {\n  __extends(StackConsumer, _super);\n\n  function StackConsumer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      stackIndex: 0\n    };\n\n    _this.update = function () {\n      var stackIndex = stackConsumers.indexOf(_this.update);\n\n      if (_this.state.stackIndex !== stackIndex) {\n        _this.setState({\n          stackIndex: stackIndex\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  StackConsumer.prototype.componentDidMount = function () {\n    stackConsumers.forEach(function (updateFn) {\n      return updateFn();\n    });\n  };\n\n  StackConsumer.prototype.componentWillUnmount = function () {\n    var _this = this; // This check will pass if the <Transition><Modal/></Transition> pattern has not been\n    // implemented correctly. In this case, will still need to make sure we remove ourselves\n    // from the stack list.\n\n\n    if (stackConsumers.indexOf(this.update) !== -1) {\n      stackConsumers = stackConsumers.filter(function (stack) {\n        return stack !== _this.update;\n      });\n      stackConsumers.forEach(function (updateFn) {\n        return updateFn();\n      });\n    }\n  };\n\n  StackConsumer.prototype.componentDidUpdate = function (prevProps) {\n    var _this = this;\n\n    if (prevProps.isOpen && !this.props.isOpen) {\n      stackConsumers = stackConsumers.filter(function (stack) {\n        return stack !== _this.update;\n      });\n      stackConsumers.forEach(function (updateFn) {\n        return updateFn();\n      });\n    }\n  };\n\n  StackConsumer.prototype.render = function () {\n    if (stackConsumers.indexOf(this.update) === -1) {\n      // add this instance to stack consumer list\n      stackConsumers = __spread([this.update], stackConsumers);\n    }\n\n    return this.props.children(this.state.stackIndex);\n  };\n\n  return StackConsumer;\n}(React.Component);\n\nexport default StackConsumer;","map":{"version":3,"sources":["../../../src/components/StackConsumer.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB,C,CAiBA;;AACA,IAAI,cAAc,GAAmB,EAArC,C,CAEA;AACA;AACA;AACA;AACA;;AACA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA4B,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAA5B,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACE,IAAA,KAAA,CAAA,KAAA,GAAQ;AACN,MAAA,UAAU,EAAE;AADN,KAAR;;AAyBA,IAAA,KAAA,CAAA,MAAA,GAAS,YAAA;AACP,UAAM,UAAU,GAAG,cAAc,CAAC,OAAf,CAAuB,KAAI,CAAC,MAA5B,CAAnB;;AACA,UAAI,KAAI,CAAC,KAAL,CAAW,UAAX,KAA0B,UAA9B,EAA0C;AACxC,QAAA,KAAI,CAAC,QAAL,CAAc;AAAE,UAAA,UAAU,EAAA;AAAZ,SAAd;AACD;AACF,KALD;;;AAcD;;AAnCC,EAAA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACE,IAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAA,EAAA;AAAU,KAA7C;AACD,GAFD;;AAIA,EAAA,aAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;AACA;;;AACA,QAAI,cAAc,CAAC,OAAf,CAAuB,KAAK,MAA5B,MAAwC,CAAC,CAA7C,EAAgD;AAC9C,MAAA,cAAc,GAAG,cAAc,CAAC,MAAf,CAAsB,UAAA,KAAA,EAAK;AAAI,eAAA,KAAK,KAAK,KAAI,CAAd,MAAA;AAAqB,OAApD,CAAjB;AACA,MAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,eAAA,QAAA,EAAA;AAAU,OAA7C;AACD;AACF,GARD;;AAUA,EAAA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,SAAnB,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,SAAS,CAAC,MAAV,IAAoB,CAAC,KAAK,KAAL,CAAW,MAApC,EAA4C;AAC1C,MAAA,cAAc,GAAG,cAAc,CAAC,MAAf,CAAsB,UAAA,KAAA,EAAK;AAAI,eAAA,KAAK,KAAK,KAAI,CAAd,MAAA;AAAqB,OAApD,CAAjB;AACA,MAAA,cAAc,CAAC,OAAf,CAAuB,UAAA,QAAA,EAAQ;AAAI,eAAA,QAAA,EAAA;AAAU,OAA7C;AACD;AACF,GALD;;AAcA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAI,cAAc,CAAC,OAAf,CAAuB,KAAK,MAA5B,MAAwC,CAAC,CAA7C,EAAgD;AAC9C;AACA,MAAA,cAAc,GAAA,QAAA,CAAA,CAAI,KAAK,MAAT,CAAA,EAAoB,cAApB,CAAd;AACD;;AACD,WAAO,KAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,KAAL,CAAW,UAA/B,CAAP;AACD,GAND;;AAOF,SAAA,aAAA;AAAC,CAxCD,CAA4B,KAAK,CAAC,SAAlC,CAAA;;AA0CA,eAAe,aAAf","sourceRoot":"","sourcesContent":["import { __extends, __read, __spread } from \"tslib\";\nimport React from 'react';\n// This is the source of truth for open modals\nvar stackConsumers = [];\n// This component provides the position of a modal dialog in the list of all open dialogs.\n// The key behaviours are:\n// - When a modal renders for the first time it takes the first stack position\n// - When a modal mounts, all other modals have to adjust their position\n// - When a modal unmounts, all other modals have to adjust their position\nvar StackConsumer = /** @class */ (function (_super) {\n    __extends(StackConsumer, _super);\n    function StackConsumer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            stackIndex: 0,\n        };\n        _this.update = function () {\n            var stackIndex = stackConsumers.indexOf(_this.update);\n            if (_this.state.stackIndex !== stackIndex) {\n                _this.setState({ stackIndex: stackIndex });\n            }\n        };\n        return _this;\n    }\n    StackConsumer.prototype.componentDidMount = function () {\n        stackConsumers.forEach(function (updateFn) { return updateFn(); });\n    };\n    StackConsumer.prototype.componentWillUnmount = function () {\n        var _this = this;\n        // This check will pass if the <Transition><Modal/></Transition> pattern has not been\n        // implemented correctly. In this case, will still need to make sure we remove ourselves\n        // from the stack list.\n        if (stackConsumers.indexOf(this.update) !== -1) {\n            stackConsumers = stackConsumers.filter(function (stack) { return stack !== _this.update; });\n            stackConsumers.forEach(function (updateFn) { return updateFn(); });\n        }\n    };\n    StackConsumer.prototype.componentDidUpdate = function (prevProps) {\n        var _this = this;\n        if (prevProps.isOpen && !this.props.isOpen) {\n            stackConsumers = stackConsumers.filter(function (stack) { return stack !== _this.update; });\n            stackConsumers.forEach(function (updateFn) { return updateFn(); });\n        }\n    };\n    StackConsumer.prototype.render = function () {\n        if (stackConsumers.indexOf(this.update) === -1) {\n            // add this instance to stack consumer list\n            stackConsumers = __spread([this.update], stackConsumers);\n        }\n        return this.props.children(this.state.stackIndex);\n    };\n    return StackConsumer;\n}(React.Component));\nexport default StackConsumer;\n//# sourceMappingURL=StackConsumer.js.map"]},"metadata":{},"sourceType":"module"}