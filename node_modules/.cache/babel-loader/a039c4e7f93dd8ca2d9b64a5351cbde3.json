{"ast":null,"code":"var _jsxFileName = \"/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/src/Components/common/Wrapper.js\";\nimport React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\nexport default function Wrapper({\n  // Are there more items to load?\n  // (This information comes from the most recent API request.)\n  hasNextPage,\n  // Are we currently loading a page of items?\n  // (This may be an in-flight flag in your Redux store for example.)\n  isNextPageLoading,\n  // Array of items loaded so far.\n  items,\n  // Callback function responsible for loading the next page of items.\n  loadNextPage,\n  renderNotiRow,\n  forwardNoti\n}) {\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? items.length + 1 : items.length; // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n\n  const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage; // Every row is loaded except for our loading indicator row.\n\n  const isItemLoaded = index => !hasNextPage || index < items.length; // Render an item or a loading indicator.\n\n\n  const Item = ({\n    index,\n    style\n  }) => {\n    if (!isItemLoaded(index)) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 14\n        }\n      }, \"Loading\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, renderNotiRow(index, style, items[index], forwardNoti));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteLoader, {\n    isItemLoaded: isItemLoaded,\n    itemCount: itemCount,\n    loadMoreItems: loadMoreItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, ({\n    onItemsRendered,\n    ref\n  }) => /*#__PURE__*/React.createElement(List, {\n    className: \"List\",\n    height: 655,\n    itemCount: itemCount,\n    itemSize: 108,\n    onItemsRendered: onItemsRendered,\n    ref: ref,\n    width: 310,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, Item));\n}","map":{"version":3,"sources":["/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/src/Components/common/Wrapper.js"],"names":["React","FixedSizeList","List","InfiniteLoader","Wrapper","hasNextPage","isNextPageLoading","items","loadNextPage","renderNotiRow","forwardNoti","itemCount","length","loadMoreItems","isItemLoaded","index","Item","style","onItemsRendered","ref"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,IAA1B,QAAsC,cAAtC;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA,eAAe,SAASC,OAAT,CAAiB;AAC9B;AACA;AACAC,EAAAA,WAH8B;AAK9B;AACA;AACAC,EAAAA,iBAP8B;AAS9B;AACAC,EAAAA,KAV8B;AAY9B;AACAC,EAAAA,YAb8B;AAe9BC,EAAAA,aAf8B;AAiB9BC,EAAAA;AAjB8B,CAAjB,EAkBZ;AACD;AACA,QAAMC,SAAS,GAAGN,WAAW,GAAGE,KAAK,CAACK,MAAN,GAAe,CAAlB,GAAsBL,KAAK,CAACK,MAAzD,CAFC,CAID;AACA;;AACA,QAAMC,aAAa,GAAGP,iBAAiB,GAAG,MAAM,CAAE,CAAX,GAAcE,YAArD,CANC,CAQD;;AACA,QAAMM,YAAY,GAAIC,KAAD,IAAW,CAACV,WAAD,IAAgBU,KAAK,GAAGR,KAAK,CAACK,MAA9D,CATC,CAWD;;;AACA,QAAMI,IAAI,GAAG,CAAC;AAAED,IAAAA,KAAF;AAASE,IAAAA;AAAT,GAAD,KAAsB;AACjC,QAAI,CAACH,YAAY,CAACC,KAAD,CAAjB,EAA0B;AACxB,0BAAO;AAAK,QAAA,KAAK,EAAEE,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,KAFD,MAEO;AACL,0BACE;AAAK,QAAA,KAAK,EAAEA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoBR,aAAa,CAACM,KAAD,EAAQE,KAAR,EAAeV,KAAK,CAACQ,KAAD,CAApB,EAA6BL,WAA7B,CAAjC,CADF;AAGD;AACF,GARD;;AAUA,sBACE,oBAAC,cAAD;AACE,IAAA,YAAY,EAAEI,YADhB;AAEE,IAAA,SAAS,EAAEH,SAFb;AAGE,IAAA,aAAa,EAAEE,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AAAEK,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,GAAD,kBACC,oBAAC,IAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,MAAM,EAAE,GAFV;AAGE,IAAA,SAAS,EAAER,SAHb;AAIE,IAAA,QAAQ,EAAE,GAJZ;AAKE,IAAA,eAAe,EAAEO,eALnB;AAME,IAAA,GAAG,EAAEC,GANP;AAOE,IAAA,KAAK,EAAE,GAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGH,IATH,CANJ,CADF;AAqBD","sourcesContent":["import React from \"react\";\nimport { FixedSizeList as List } from \"react-window\";\nimport InfiniteLoader from \"react-window-infinite-loader\";\n\nexport default function Wrapper({\n  // Are there more items to load?\n  // (This information comes from the most recent API request.)\n  hasNextPage,\n\n  // Are we currently loading a page of items?\n  // (This may be an in-flight flag in your Redux store for example.)\n  isNextPageLoading,\n\n  // Array of items loaded so far.\n  items,\n\n  // Callback function responsible for loading the next page of items.\n  loadNextPage,\n\n  renderNotiRow,\n\n  forwardNoti,\n}) {\n  // If there are more items to be loaded then add an extra row to hold a loading indicator.\n  const itemCount = hasNextPage ? items.length + 1 : items.length;\n\n  // Only load 1 page of items at a time.\n  // Pass an empty callback to InfiniteLoader in case it asks us to load more than once.\n  const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\n\n  // Every row is loaded except for our loading indicator row.\n  const isItemLoaded = (index) => !hasNextPage || index < items.length;\n\n  // Render an item or a loading indicator.\n  const Item = ({ index, style }) => {\n    if (!isItemLoaded(index)) {\n      return <div style={style}>Loading</div>;\n    } else {\n      return (\n        <div style={style}>{renderNotiRow(index, style, items[index], forwardNoti)}</div>\n      );\n    }\n  };\n\n  return (\n    <InfiniteLoader\n      isItemLoaded={isItemLoaded}\n      itemCount={itemCount}\n      loadMoreItems={loadMoreItems}\n    >\n      {({ onItemsRendered, ref }) => (\n        <List\n          className=\"List\"\n          height={655}\n          itemCount={itemCount}\n          itemSize={108}\n          onItemsRendered={onItemsRendered}\n          ref={ref}\n          width={310}\n        >\n          {Item}\n        </List>\n      )}\n    </InfiniteLoader>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}