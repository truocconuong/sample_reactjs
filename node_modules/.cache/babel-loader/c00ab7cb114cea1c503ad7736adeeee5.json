{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React, { forwardRef } from 'react';\nimport { useAnalyticsEvents } from '../hooks/useAnalyticsEvents';\nimport { usePatchedProps } from '../hooks/usePatchedProps';\n\nvar withAnalyticsEvents = function (createEventMap) {\n  if (createEventMap === void 0) {\n    createEventMap = {};\n  }\n\n  return function (WrappedComponent) {\n    var WithAnalyticsEvents = forwardRef(function (props, ref) {\n      var patchedEventProps = usePatchedProps(createEventMap, props).patchedEventProps;\n      var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;\n      return React.createElement(WrappedComponent, __assign({}, props, patchedEventProps, {\n        createAnalyticsEvent: createAnalyticsEvent,\n        ref: ref\n      }));\n    }); // @ts-ignore\n\n    WithAnalyticsEvents.displayName = \"WithAnalyticsEvents(\" + ( // @ts-ignore disneyName doesn't exist on type\n    WrappedComponent.displayName || WrappedComponent.name) + \")\";\n    return WithAnalyticsEvents;\n  };\n};\n\nexport default withAnalyticsEvents;","map":{"version":3,"sources":["../../../src/hocs/withAnalyticsEvents.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkC,OAAlC;AAEA,SAAS,kBAAT,QAAmC,6BAAnC;AACA,SAAS,eAAT,QAAgC,0BAAhC;;AAaA,IAAM,mBAAmB,GAAG,UAAC,cAAD,EAAoC;AAAnC,MAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,EAAA;AAAmC;;AAAK,SAAA,UAInE,gBAJmE,EAIH;AAOhE,QAAM,mBAAmB,GAAG,UAAU,CAAoB,UAAC,KAAD,EAAQ,GAAR,EAAW;AAC3D,UAAA,iBAAiB,GAAK,eAAe,CAC3C,cAD2C,EAE3C,KAF2C,CAAf,CAAL,iBAAjB;AAIA,UAAA,oBAAoB,GAAK,kBAAkB,GAAvB,oBAApB;AAER,aACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB,QAAA,CAAA,EAAA,EACV,KADU,EAEX,iBAFW,EAEM;AACrB,QAAA,oBAAoB,EAAE,oBADD;AAErB,QAAA,GAAG,EAAE;AAFgB,OAFN,CAAjB,CADF;AAQD,KAfqC,CAAtC,CAPgE,CAwBhE;;AACA,IAAA,mBAAmB,CAAC,WAApB,GAAkC,2BAChC;AACA,IAAA,gBAAgB,CAAC,WAAjB,IAAgC,gBAAgB,CAAC,IAFjB,IAEqB,GAFvD;AAKA,WAAO,mBAAP;AACD,GAnCoE;AAmCpE,CAnCD;;AAqCA,eAAe,mBAAf","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport React, { forwardRef } from 'react';\nimport { useAnalyticsEvents } from '../hooks/useAnalyticsEvents';\nimport { usePatchedProps } from '../hooks/usePatchedProps';\nvar withAnalyticsEvents = function (createEventMap) {\n    if (createEventMap === void 0) { createEventMap = {}; }\n    return function (WrappedComponent) {\n        var WithAnalyticsEvents = forwardRef(function (props, ref) {\n            var patchedEventProps = usePatchedProps(createEventMap, props).patchedEventProps;\n            var createAnalyticsEvent = useAnalyticsEvents().createAnalyticsEvent;\n            return (React.createElement(WrappedComponent, __assign({}, props, patchedEventProps, { createAnalyticsEvent: createAnalyticsEvent, ref: ref })));\n        });\n        // @ts-ignore\n        WithAnalyticsEvents.displayName = \"WithAnalyticsEvents(\" + (\n        // @ts-ignore disneyName doesn't exist on type\n        WrappedComponent.displayName || WrappedComponent.name) + \")\";\n        return WithAnalyticsEvents;\n    };\n};\nexport default withAnalyticsEvents;\n//# sourceMappingURL=withAnalyticsEvents.js.map"]},"metadata":{},"sourceType":"module"}