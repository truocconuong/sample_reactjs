{"ast":null,"code":"import methods from \"validator\";\n\nclass Validator {\n  constructor(rules) {\n    this.rules = rules;\n    this.initiate();\n  }\n\n  initiate() {\n    this.errors = {};\n  }\n\n  validate(state) {\n    this.initiate();\n    this.rules.forEach(rule => {\n      const fieldValue = (typeof state[rule.field] === \"object\" ? state[rule.field].value : state[rule.field]) || \"\"; // check duoc ca obj {label: \"\", value:\"\"}\n\n      const option = rule.option ? rule.option : {};\n      const validationMethod = typeof rule.method === \"string\" ? methods[rule.method] : rule.method;\n\n      if (validationMethod(fieldValue, option) !== rule.validWhen) {\n        this.errors[rule.field] = rule.message;\n      }\n    });\n    return this.errors;\n  }\n\n}\n\nexport default Validator;","map":{"version":3,"sources":["/Users/asknteach/projects/fetch/portal.fetch.tech.frontend/src/utils/validator.js"],"names":["methods","Validator","constructor","rules","initiate","errors","validate","state","forEach","rule","fieldValue","field","value","option","validationMethod","method","validWhen","message"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL;AACD;;AAEDA,EAAAA,QAAQ,GAAG;AACT,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,SAAKH,QAAL;AAEA,SAAKD,KAAL,CAAWK,OAAX,CAAoBC,IAAD,IAAU;AAC3B,YAAMC,UAAU,GACd,CAAC,OAAOH,KAAK,CAACE,IAAI,CAACE,KAAN,CAAZ,KAA6B,QAA7B,GACGJ,KAAK,CAACE,IAAI,CAACE,KAAN,CAAL,CAAkBC,KADrB,GAEGL,KAAK,CAACE,IAAI,CAACE,KAAN,CAFT,KAE0B,EAH5B,CAD2B,CAIK;;AAChC,YAAME,MAAM,GAAGJ,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAACI,MAAnB,GAA4B,EAA3C;AACA,YAAMC,gBAAgB,GACpB,OAAOL,IAAI,CAACM,MAAZ,KAAuB,QAAvB,GAAkCf,OAAO,CAACS,IAAI,CAACM,MAAN,CAAzC,GAAyDN,IAAI,CAACM,MADhE;;AAGA,UAAID,gBAAgB,CAACJ,UAAD,EAAaG,MAAb,CAAhB,KAAyCJ,IAAI,CAACO,SAAlD,EAA6D;AAC3D,aAAKX,MAAL,CAAYI,IAAI,CAACE,KAAjB,IAA0BF,IAAI,CAACQ,OAA/B;AACD;AACF,KAZD;AAaA,WAAO,KAAKZ,MAAZ;AACD;;AA3Ba;;AA8BhB,eAAeJ,SAAf","sourcesContent":["import methods from \"validator\";\n\nclass Validator {\n  constructor(rules) {\n    this.rules = rules;\n    this.initiate();\n  }\n\n  initiate() {\n    this.errors = {};\n  }\n\n  validate(state) {\n    this.initiate();\n\n    this.rules.forEach((rule) => {\n      const fieldValue =\n        (typeof state[rule.field] === \"object\"\n          ? state[rule.field].value\n          : state[rule.field]) || \"\"; // check duoc ca obj {label: \"\", value:\"\"}\n      const option = rule.option ? rule.option : {};\n      const validationMethod =\n        typeof rule.method === \"string\" ? methods[rule.method] : rule.method;\n\n      if (validationMethod(fieldValue, option) !== rule.validWhen) {\n        this.errors[rule.field] = rule.message;\n      }\n    });\n    return this.errors;\n  }\n}\n\nexport default Validator;\n"]},"metadata":{},"sourceType":"module"}