{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\n/** @jsx jsx */\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';\nimport { name as packageName, version as packageVersion } from '../version.json';\nimport blockEvents from './block-events';\nimport { getContentStyle, getFadingCss, getIconStyle, overlayCss } from './css';\nimport useAutoFocus from './use-auto-focus';\n\nfunction noop() {} // Disabled buttons will still publish events for nested elements in webkit.\n// We are disabling pointer events on child elements so that\n// the button will always be the target of events\n// Note: firefox does not have this behaviour for child elements\n\n\nvar noPointerEventsOnChildrenCss = {\n  '> *': {\n    pointerEvents: 'none'\n  }\n};\nexport default React.forwardRef(function ButtonBase(props, ref) {\n  var _a = props.appearance,\n      appearance = _a === void 0 ? 'default' : _a,\n      buttonCss = props.buttonCss,\n      _b = props.spacing,\n      spacing = _b === void 0 ? 'default' : _b,\n      _c = props.autoFocus,\n      autoFocus = _c === void 0 ? false : _c,\n      _d = props.isDisabled,\n      isDisabled = _d === void 0 ? false : _d,\n      _e = props.shouldFitContainer,\n      shouldFitContainer = _e === void 0 ? false : _e,\n      _f = props.isSelected,\n      isSelected = _f === void 0 ? false : _f,\n      iconBefore = props.iconBefore,\n      iconAfter = props.iconAfter,\n      children = props.children,\n      className = props.className,\n      href = props.href,\n      overlay = props.overlay,\n      _g = props.tabIndex,\n      tabIndex = _g === void 0 ? 0 : _g,\n      _h = props.type,\n      type = _h === void 0 ? !href ? 'button' : undefined : _h,\n      _j = props.onMouseDown,\n      providedOnMouseDown = _j === void 0 ? noop : _j,\n      _k = props.onClick,\n      providedOnClick = _k === void 0 ? noop : _k,\n      // use the provided component prop,\n  // else default to anchor if there is a href, and button if there is no href\n  _l = props.component,\n      // use the provided component prop,\n  // else default to anchor if there is a href, and button if there is no href\n  Component = _l === void 0 ? href ? 'a' : 'button' : _l,\n      testId = props.testId,\n      // I don't think this should be in button, but for now it is\n  analyticsContext = props.analyticsContext,\n      rest = __rest(props, [\"appearance\", \"buttonCss\", \"spacing\", \"autoFocus\", \"isDisabled\", \"shouldFitContainer\", \"isSelected\", \"iconBefore\", \"iconAfter\", \"children\", \"className\", \"href\", \"overlay\", \"tabIndex\", \"type\", \"onMouseDown\", \"onClick\", \"component\", \"testId\", \"analyticsContext\"]);\n\n  var ourRef = useRef();\n  var setRef = useCallback(function (node) {\n    ourRef.current = node;\n\n    if (ref == null) {\n      return;\n    }\n\n    if (typeof ref === 'function') {\n      ref(node);\n      return;\n    } // @ts-ignore\n\n\n    ref.current = node;\n  }, [ourRef, ref]); // Cross browser auto focusing is pretty broken, so we are doing it ourselves\n\n  useAutoFocus(ourRef, autoFocus);\n  var onClick = usePlatformLeafEventHandler({\n    fn: providedOnClick,\n    action: 'clicked',\n    componentName: 'button',\n    packageName: packageName,\n    packageVersion: packageVersion,\n    analyticsData: analyticsContext\n  }); // Button currently calls preventDefault, which is not standard button behaviour\n\n  var onMouseDown = useCallback(function (event) {\n    event.preventDefault();\n    providedOnMouseDown(event);\n  }, [providedOnMouseDown]); // Lose focus when becoming disabled (standard button behaviour)\n\n  useEffect(function () {\n    var el = ourRef.current;\n\n    if (isDisabled && el && el === document.activeElement) {\n      el.blur();\n    }\n  }, [isDisabled]); // we are 'disabling' input with a button when there is an overlay\n\n  var hasOverlay = Boolean(overlay);\n  var fadeCss = getFadingCss({\n    hasOverlay: hasOverlay\n  });\n  var isInteractive = !isDisabled && !hasOverlay;\n  return jsx(Component, __assign({}, rest, {\n    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],\n    className: className,\n    ref: setRef,\n    onClick: onClick,\n    onMouseDown: onMouseDown,\n    disabled: isDisabled,\n    href: isInteractive ? href : undefined,\n    \"data-has-overlay\": hasOverlay ? true : undefined,\n    \"data-testid\": testId,\n    type: type,\n    // Adding a tab index so element is always focusable, even when not a <button> or <a>\n    // Disabling focus via keyboard navigation when disabled\n    // as this is standard button behaviour\n    tabIndex: isDisabled ? -1 : tabIndex\n  }, blockEvents({\n    isInteractive: isInteractive\n  })), iconBefore ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconBefore) : null, children ? jsx(\"span\", {\n    css: [fadeCss, getContentStyle({\n      spacing: spacing\n    })]\n  }, children) : null, iconAfter ? jsx(\"span\", {\n    css: [fadeCss, getIconStyle({\n      spacing: spacing\n    })]\n  }, iconAfter) : null, overlay ? jsx(\"span\", {\n    css: overlayCss\n  }, overlay) : null);\n});","map":{"version":3,"sources":["../../../src/shared/button-base.tsx"],"names":[],"mappings":";AAAA;;AACA,OAAO,KAAP,IAAgB,WAAhB,EAA6B,SAA7B,EAAwC,MAAxC,QAAsD,OAAtD;AAEA,SAAoB,GAApB,QAA+B,eAA/B;AAEA,SAAS,2BAAT,QAA4C,0BAA5C;AAGA,SACE,IAAI,IAAI,WADV,EAEE,OAAO,IAAI,cAFb,QAGO,iBAHP;AAKA,OAAO,WAAP,MAAwB,gBAAxB;AACA,SAAS,eAAT,EAA0B,YAA1B,EAAwC,YAAxC,EAAsD,UAAtD,QAAwE,OAAxE;AACA,OAAO,YAAP,MAAyB,kBAAzB;;AAEA,SAAS,IAAT,GAAa,CAAK,C,CAElB;AACA;AACA;AACA;;;AACA,IAAM,4BAA4B,GAAc;AAC9C,SAAO;AACL,IAAA,aAAa,EAAE;AADV;AADuC,CAAhD;AAUA,eAAe,KAAK,CAAC,UAAN,CAAqC,SAAS,UAAT,CAClD,KADkD,EAElD,GAFkD,EAEvB;AAGzB,MAAA,EAAA,GAwBE,KAAK,CAxBe,UAAtB;AAAA,MAAA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAH,GAAY,EAAtB;AAAA,MACA,SAAS,GAuBP,KAAK,CAvBE,SADT;AAAA,MAEA,EAAA,GAsBE,KAAK,CAtBY,OAFnB;AAAA,MAEA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAH,GAAY,EAFnB;AAAA,MAGA,EAAA,GAqBE,KAAK,CArBU,SAHjB;AAAA,MAGA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAHjB;AAAA,MAIA,EAAA,GAoBE,KAAK,CApBW,UAJlB;AAAA,MAIA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAJlB;AAAA,MAKA,EAAA,GAmBE,KAAK,CAnBmB,kBAL1B;AAAA,MAKA,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAL1B;AAAA,MAMA,EAAA,GAkBE,KAAK,CAlBW,UANlB;AAAA,MAMA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EANlB;AAAA,MAOA,UAAU,GAiBR,KAAK,CAjBG,UAPV;AAAA,MAQA,SAAS,GAgBP,KAAK,CAhBE,SART;AAAA,MASA,QAAQ,GAeN,KAAK,CAfC,QATR;AAAA,MAUA,SAAS,GAcP,KAAK,CAdE,SAVT;AAAA,MAWA,IAAI,GAaF,KAAK,CAbH,IAXJ;AAAA,MAYA,OAAO,GAYL,KAAK,CAZA,OAZP;AAAA,MAaA,EAAA,GAWE,KAAK,CAXK,QAbZ;AAAA,MAaA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAH,GAAI,EAbZ;AAAA,MAcA,EAAA,GAUE,KAAK,CAV4B,IAdnC;AAAA,MAcA,IAAI,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,CAAC,IAAD,GAAQ,QAAR,GAAmB,SAAtB,GAA+B,EAdnC;AAAA,MAeA,EAAA,GASE,KAAK,CATgC,WAfvC;AAAA,MAea,mBAAmB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAfvC;AAAA,MAgBA,EAAA,GAQE,KAAK,CARwB,OAhB/B;AAAA,MAgBS,eAAe,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAhB/B;AAAA,MAiBA;AACA;AACA,EAAA,EAAA,GAKE,KAAK,CALqC,SAnB5C;AAAA,MAiBA;AACA;AACW,EAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAI,GAAG,GAAH,GAAS,QAAhB,GAAwB,EAnB5C;AAAA,MAoBA,MAAM,GAIJ,KAAK,CAJD,MApBN;AAAA,MAqBA;AACA,EAAA,gBAAgB,GAEd,KAAK,CAFS,gBAtBhB;AAAA,MAuBG,IAAI,GAAA,MAAA,CACL,KADK,EAxBH,CAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,WAAA,EAAA,YAAA,EAAA,oBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,WAAA,EAAA,QAAA,EAAA,kBAAA,CAwBG,CAvBP;;AA0BF,MAAM,MAAM,GAAG,MAAM,EAArB;AAEA,MAAM,MAAM,GAAG,WAAW,CACxB,UAAC,IAAD,EAAyB;AACvB,IAAA,MAAM,CAAC,OAAP,GAAiB,IAAjB;;AAEA,QAAI,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AAED,QAAI,OAAO,GAAP,KAAe,UAAnB,EAA+B;AAC7B,MAAA,GAAG,CAAC,IAAD,CAAH;AACA;AACD,KAVsB,CAYvB;;;AACA,IAAA,GAAG,CAAC,OAAJ,GAAc,IAAd;AACD,GAfuB,EAgBxB,CAAC,MAAD,EAAS,GAAT,CAhBwB,CAA1B,CA/B2B,CAkD3B;;AACA,EAAA,YAAY,CAAC,MAAD,EAAS,SAAT,CAAZ;AAEA,MAAM,OAAO,GAAG,2BAA2B,CAAC;AAC1C,IAAA,EAAE,EAAE,eADsC;AAE1C,IAAA,MAAM,EAAE,SAFkC;AAG1C,IAAA,aAAa,EAAE,QAH2B;AAI1C,IAAA,WAAW,EAAA,WAJ+B;AAK1C,IAAA,cAAc,EAAA,cAL4B;AAM1C,IAAA,aAAa,EAAE;AAN2B,GAAD,CAA3C,CArD2B,CA8D3B;;AACA,MAAM,WAAW,GAAG,WAAW,CAC7B,UAAC,KAAD,EAAqC;AACnC,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAJ4B,EAK7B,CAAC,mBAAD,CAL6B,CAA/B,CA/D2B,CAuE3B;;AACA,EAAA,SAAS,CAAC,YAAA;AACR,QAAM,EAAE,GAAG,MAAM,CAAC,OAAlB;;AACA,QAAI,UAAU,IAAI,EAAd,IAAoB,EAAE,KAAK,QAAQ,CAAC,aAAxC,EAAuD;AACrD,MAAA,EAAE,CAAC,IAAH;AACD;AACF,GALQ,EAKN,CAAC,UAAD,CALM,CAAT,CAxE2B,CA+E3B;;AACA,MAAM,UAAU,GAAY,OAAO,CAAC,OAAD,CAAnC;AACA,MAAM,OAAO,GAAc,YAAY,CAAC;AAAE,IAAA,UAAU,EAAA;AAAZ,GAAD,CAAvC;AAEA,MAAM,aAAa,GAAY,CAAC,UAAD,IAAe,CAAC,UAA/C;AAEA,SACE,GAAA,CAAC,SAAD,EAAU,QAAA,CAAA,EAAA,EACJ,IADI,EACA;AACR,IAAA,GAAG,EAAE,CAAC,SAAD,EAAY,aAAa,GAAG,IAAH,GAAU,4BAAnC,CADG;AAER,IAAA,SAAS,EAAE,SAFH;AAGR,IAAA,GAAG,EAAE,MAHG;AAIR,IAAA,OAAO,EAAE,OAJD;AAKR,IAAA,WAAW,EAAE,WALL;AAMR,IAAA,QAAQ,EAAE,UANF;AAOR,IAAA,IAAI,EAAE,aAAa,GAAG,IAAH,GAAU,SAPrB;AAO8B,wBAEpB,UAAU,GAAG,IAAH,GAAU,SAT9B;AASuC,mBAClC,MAVL;AAWR,IAAA,IAAI,EAAE,IAXE;AAYR;AACA;AACA;AACA,IAAA,QAAQ,EAAE,UAAU,GAAG,CAAC,CAAJ,GAAQ;AAfpB,GADA,EAiBJ,WAAW,CAAC;AAAE,IAAA,aAAa,EAAA;AAAf,GAAD,CAjBP,CAAV,EAmBG,UAAU,GACT,GAAA,CAAA,MAAA,EAAA;AAAM,IAAA,GAAG,EAAE,CAAC,OAAD,EAAU,YAAY,CAAC;AAAE,MAAA,OAAO,EAAA;AAAT,KAAD,CAAtB;AAAX,GAAA,EAAkD,UAAlD,CADS,GAEP,IArBN,EAsBG,QAAQ,GACP,GAAA,CAAA,MAAA,EAAA;AAAM,IAAA,GAAG,EAAE,CAAC,OAAD,EAAU,eAAe,CAAC;AAAE,MAAA,OAAO,EAAA;AAAT,KAAD,CAAzB;AAAX,GAAA,EAAqD,QAArD,CADO,GAEL,IAxBN,EAyBG,SAAS,GACR,GAAA,CAAA,MAAA,EAAA;AAAM,IAAA,GAAG,EAAE,CAAC,OAAD,EAAU,YAAY,CAAC;AAAE,MAAA,OAAO,EAAA;AAAT,KAAD,CAAtB;AAAX,GAAA,EAAkD,SAAlD,CADQ,GAEN,IA3BN,EA4BG,OAAO,GAAG,GAAA,CAAA,MAAA,EAAA;AAAM,IAAA,GAAG,EAAE;AAAX,GAAA,EAAwB,OAAxB,CAAH,GAA6C,IA5BvD,CADF;AAgCD,CAvHc,CAAf","sourceRoot":"","sourcesContent":["import { __assign, __rest } from \"tslib\";\n/** @jsx jsx */\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { jsx } from '@emotion/core';\nimport { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';\nimport { name as packageName, version as packageVersion, } from '../version.json';\nimport blockEvents from './block-events';\nimport { getContentStyle, getFadingCss, getIconStyle, overlayCss } from './css';\nimport useAutoFocus from './use-auto-focus';\nfunction noop() { }\n// Disabled buttons will still publish events for nested elements in webkit.\n// We are disabling pointer events on child elements so that\n// the button will always be the target of events\n// Note: firefox does not have this behaviour for child elements\nvar noPointerEventsOnChildrenCss = {\n    '> *': {\n        pointerEvents: 'none',\n    },\n};\nexport default React.forwardRef(function ButtonBase(props, ref) {\n    var _a = props.appearance, appearance = _a === void 0 ? 'default' : _a, buttonCss = props.buttonCss, _b = props.spacing, spacing = _b === void 0 ? 'default' : _b, _c = props.autoFocus, autoFocus = _c === void 0 ? false : _c, _d = props.isDisabled, isDisabled = _d === void 0 ? false : _d, _e = props.shouldFitContainer, shouldFitContainer = _e === void 0 ? false : _e, _f = props.isSelected, isSelected = _f === void 0 ? false : _f, iconBefore = props.iconBefore, iconAfter = props.iconAfter, children = props.children, className = props.className, href = props.href, overlay = props.overlay, _g = props.tabIndex, tabIndex = _g === void 0 ? 0 : _g, _h = props.type, type = _h === void 0 ? !href ? 'button' : undefined : _h, _j = props.onMouseDown, providedOnMouseDown = _j === void 0 ? noop : _j, _k = props.onClick, providedOnClick = _k === void 0 ? noop : _k, \n    // use the provided component prop,\n    // else default to anchor if there is a href, and button if there is no href\n    _l = props.component, \n    // use the provided component prop,\n    // else default to anchor if there is a href, and button if there is no href\n    Component = _l === void 0 ? href ? 'a' : 'button' : _l, testId = props.testId, \n    // I don't think this should be in button, but for now it is\n    analyticsContext = props.analyticsContext, rest = __rest(props, [\"appearance\", \"buttonCss\", \"spacing\", \"autoFocus\", \"isDisabled\", \"shouldFitContainer\", \"isSelected\", \"iconBefore\", \"iconAfter\", \"children\", \"className\", \"href\", \"overlay\", \"tabIndex\", \"type\", \"onMouseDown\", \"onClick\", \"component\", \"testId\", \"analyticsContext\"]);\n    var ourRef = useRef();\n    var setRef = useCallback(function (node) {\n        ourRef.current = node;\n        if (ref == null) {\n            return;\n        }\n        if (typeof ref === 'function') {\n            ref(node);\n            return;\n        }\n        // @ts-ignore\n        ref.current = node;\n    }, [ourRef, ref]);\n    // Cross browser auto focusing is pretty broken, so we are doing it ourselves\n    useAutoFocus(ourRef, autoFocus);\n    var onClick = usePlatformLeafEventHandler({\n        fn: providedOnClick,\n        action: 'clicked',\n        componentName: 'button',\n        packageName: packageName,\n        packageVersion: packageVersion,\n        analyticsData: analyticsContext,\n    });\n    // Button currently calls preventDefault, which is not standard button behaviour\n    var onMouseDown = useCallback(function (event) {\n        event.preventDefault();\n        providedOnMouseDown(event);\n    }, [providedOnMouseDown]);\n    // Lose focus when becoming disabled (standard button behaviour)\n    useEffect(function () {\n        var el = ourRef.current;\n        if (isDisabled && el && el === document.activeElement) {\n            el.blur();\n        }\n    }, [isDisabled]);\n    // we are 'disabling' input with a button when there is an overlay\n    var hasOverlay = Boolean(overlay);\n    var fadeCss = getFadingCss({ hasOverlay: hasOverlay });\n    var isInteractive = !isDisabled && !hasOverlay;\n    return (jsx(Component, __assign({}, rest, { css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss], className: className, ref: setRef, onClick: onClick, onMouseDown: onMouseDown, disabled: isDisabled, href: isInteractive ? href : undefined, \"data-has-overlay\": hasOverlay ? true : undefined, \"data-testid\": testId, type: type, \n        // Adding a tab index so element is always focusable, even when not a <button> or <a>\n        // Disabling focus via keyboard navigation when disabled\n        // as this is standard button behaviour\n        tabIndex: isDisabled ? -1 : tabIndex }, blockEvents({ isInteractive: isInteractive })),\n        iconBefore ? (jsx(\"span\", { css: [fadeCss, getIconStyle({ spacing: spacing })] }, iconBefore)) : null,\n        children ? (jsx(\"span\", { css: [fadeCss, getContentStyle({ spacing: spacing })] }, children)) : null,\n        iconAfter ? (jsx(\"span\", { css: [fadeCss, getIconStyle({ spacing: spacing })] }, iconAfter)) : null,\n        overlay ? jsx(\"span\", { css: overlayCss }, overlay) : null));\n});\n//# sourceMappingURL=button-base.js.map"]},"metadata":{},"sourceType":"module"}